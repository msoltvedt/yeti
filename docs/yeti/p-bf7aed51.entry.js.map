{"version":3,"names":["YetiInput","utils","generateUniqueId","this","inputId","handleKeyUp","ev","isTouched","value","target","readyToVerifyFast","emit","handleFieldBlur","readyToVerifySlow","render","cssClasses","inputClass","isValid","h","Object","assign","type","class","id","name","inputName","onBlur","describedBy"],"sources":["src/components/yeti-input/yeti-input.tsx"],"sourcesContent":["import { Component, Prop, h, State, Event, EventEmitter, Listen, Element } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-input',\n  shadow: false,\n})\nexport class YetiInput {\n\n  @Element() el: HTMLElement;\n\n  @Listen('keyup')\n  handleKeyUp(ev) {\n    this.isTouched = true;\n    this.value = ev.target.value;\n    this.readyToVerifyFast.emit(ev);\n  }\n\n  /**\n   * Event that fires when the user leaves (blurs) the input field.\n   */\n  @Event({ bubbles: true }) readyToVerifySlow: EventEmitter<CustomEvent>;\n\n  /**\n   * Event that fires when the user enters or changes the contents of the input field.\n   */\n  @Event({ bubbles: true }) readyToVerifyFast: EventEmitter<CustomEvent>;\n\n  /**\n   * CSS classlist applied to the actual HTML input element.\n   */\n  @Prop() inputClass: string = '';\n\n  /**\n   * id applied to the actual HTML input element.\n   */\n  @Prop() inputId: string = utils.generateUniqueId();\n\n  /**\n   * name applied to the actual HTML input element. Defaults to match id.\n   */\n  @Prop() inputName: string = this.inputId;\n\n  /**\n   * Whether the field is required to have a valid value or not.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * Tracks whether the input's current value is valid or not.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) isValid: boolean;\n\n  /**\n   * The actual value of the input field.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) value: string = '';\n\n  /**\n   * id of an outside HTML element pointed to by the actual input element's aria-describedby attribute.\n   */\n  @Prop() describedBy: string = \"\";\n\n  /**\n   * Whether the user has focused and left (i.e. interacted with) the actual input element.\n   */\n  @State() isTouched: boolean = false;\n\n  handleFieldBlur(ev) {\n    this.isTouched = true;\n    this.value = ev.target.value;\n    this.readyToVerifySlow.emit(ev);\n  }\n\n  render() {\n\n    let cssClasses = 'yeti-input';\n\n    if (this.inputClass != '') {\n      cssClasses += ' ' + this.inputClass;\n    }\n\n    if (this.isValid == false) {\n      cssClasses += ' yeti-input__error';\n    }\n\n    return (\n      <input \n        type=\"text\" \n        class={cssClasses} \n        id={this.inputId}\n        name={this.inputName}\n        value={this.value}\n        onBlur={(ev) => this.handleFieldBlur(ev)}\n        aria-invalid={!this.isValid}\n        {...((this.describedBy != \"\") ? {\"aria-describedby\": this.describedBy} : {})}\n      />\n    );\n  }\n\n}\n"],"mappings":"mGAOaA,EAAS,M,mJAwBS,G,aAKHC,EAAMC,mB,eAKJC,KAAKC,Q,cAKL,M,kCAgBT,G,iBAKW,G,eAKA,K,CA5D9B,WAAAC,CAAYC,GACVH,KAAKI,UAAY,KACjBJ,KAAKK,MAAQF,EAAGG,OAAOD,MACvBL,KAAKO,kBAAkBC,KAAKL,E,CA2D9B,eAAAM,CAAgBN,GACdH,KAAKI,UAAY,KACjBJ,KAAKK,MAAQF,EAAGG,OAAOD,MACvBL,KAAKU,kBAAkBF,KAAKL,E,CAG9B,MAAAQ,GAEE,IAAIC,EAAa,aAEjB,GAAIZ,KAAKa,YAAc,GAAI,CACzBD,GAAc,IAAMZ,KAAKa,U,CAG3B,GAAIb,KAAKc,SAAW,MAAO,CACzBF,GAAc,oB,CAGhB,OACEG,EAAA,QAAAC,OAAAC,OAAA,CACEC,KAAK,OACLC,MAAOP,EACPQ,GAAIpB,KAAKC,QACToB,KAAMrB,KAAKsB,UACXjB,MAAOL,KAAKK,MACZkB,OAASpB,GAAOH,KAAKS,gBAAgBN,GAAG,gBACzBH,KAAKc,SACdd,KAAKwB,aAAe,GAAM,CAAC,mBAAoBxB,KAAKwB,aAAe,I"}