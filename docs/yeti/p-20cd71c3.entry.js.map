{"version":3,"names":["YetiField","this","tipId","utils","generateUniqueId","errorId","hasSlottedField","hasSlottedRequired","hasSlottedLabel","inputId","updateSlottedContentForErrorState","newValue","element","el","querySelector","classList","add","remove","handleReadyToVerifySlow","ev","childControl","target","autovalidate","required","value","errorMessage","label","isValid","nodeName","toLowerCase","componentWillLoad","potentiallySlottedElement","potentiallySlottedRequired","potentiallySlottedLabel","describedBy","tip","id","hasAttribute","inputName","getAttribute","setAttribute","renderRequiredIndicator","indicateRequired","h","name","class","render","cssClass","wrapperClass","tipClass","tipPosition","isInline","key","htmlFor","type","defaultValue","Object","assign","inputClass","inputWrapperClass","inputMaxlength","placeholder"],"sources":["src/components/yeti-field/yeti-field.tsx"],"sourcesContent":["import { Component, Prop, h, State, Watch, Listen, Element } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-field',\r\n  shadow: false,\r\n})\r\n\r\nexport class YetiField {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * id that will be assigned to the actual input element. A unique one will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputId: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputName: string = this.inputId;\r\n\r\n  /**\r\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) placeholder: string = \"\";\r\n\r\n  /**\r\n   * type that will be assigned to the actual input element.\r\n   */\r\n  @Prop() type: string = \"text\";\r\n\r\n  /**\r\n   * maximum length for the field.\r\n   */\r\n  @Prop() inputMaxlength?: number = 0;\r\n  \r\n  /**\r\n   * Mandatory value for the label of the field.\r\n   */\r\n  @Prop() label: string=\"\";\r\n  \r\n\r\n  /**\r\n   * Value for the optional input tip that appears at the bottom of the field.\r\n   */\r\n  @Prop() tip: string = \"\";\r\n\r\n  /**\r\n   * Position of the input tip relative to the rest of the field's contents. Defaults to \"below\", can also be \"above\".\r\n   */\r\n  @Prop() tipPosition?: string = \"below\";\r\n\r\n  /**\r\n   * Whether the field is required to have a valid value by the greater form.\r\n   */\r\n  @Prop() required?: boolean = false;\r\n\r\n  /**\r\n   * Whether to indicate the field is required by showing a default icon.\r\n   */\r\n  @Prop() indicateRequired?: boolean = false;\r\n\r\n  /**\r\n   * Error message that appears when the field is invalid. Can be updated at any time.\r\n   */\r\n  @Prop({mutable: true}) errorMessage: string = 'Error: please correct this field.'\r\n\r\n  /**\r\n   * Whether the input is currently valid or invalid.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean = true;\r\n  @Watch('isValid')\r\n  updateSlottedContentForErrorState(newValue: string) {\r\n\r\n    if (!this.hasSlottedField) {\r\n      return; // We don't need to do anything here unless the form element comes via slotted content.\r\n    }\r\n\r\n    let element = this.el.querySelector(`#${this.inputId}`);\r\n\r\n    if (element) {\r\n\r\n      if (newValue) {\r\n        element.classList.add(\"yeti-input__error\");\r\n      } else {\r\n        element.classList.remove(\"yeti-input__error\");\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default value of the field's input.\r\n   */\r\n  @Prop() defaultValue: string = '';\r\n\r\n  /**\r\n   * Determines whether the field should attempt to validate itself or merely pass through any readyToVerify events from its input.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) autovalidate: boolean = true;\r\n\r\n  /**\r\n   * Determines whether the field uses block (default) or inline labels.\r\n   */\r\n  @Prop() isInline: boolean = false;\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the Field's wrapper.\r\n   */\r\n  @Prop() wrapperClass?: string = \"\";\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the input.\r\n   */\r\n  @Prop() inputClass?: string = \"\";\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the input's wrapper.\r\n   */\r\n  @Prop() inputWrapperClass?: string = \"\";\r\n\r\n  /**\r\n   * Tracks whether the field's input has been focused and then blurred (i.e. if the user has interacted with it yet).\r\n   */\r\n  @State() isDirty: boolean = false;\r\n  \r\n  @Listen('readyToVerifySlow', { capture: true })\r\n  handleReadyToVerifySlow(ev) {\r\n\r\n    let childControl = ev.target;\r\n\r\n    if (this.autovalidate == false) {\r\n      return;\r\n    }\r\n\r\n   \r\n    if (this.required) {\r\n\r\n      // Autoverification is on, this field is required, and the child component just notified us that it's ready for verification.\r\n\r\n      // First, regardless of whether it's an input or date-picker, it can't be empty.\r\n      if (childControl.value == \"\") {\r\n\r\n        this.errorMessage = (this.errorMessage != \"\") ? this.errorMessage : `${this.label} field is required.`\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n      \r\n    } else if (childControl.nodeName.toLowerCase() == \"yeti-date-picker\") {\r\n\r\n      // Second, if it's a non-empty date-picker, see if it's a valid date.\r\n\r\n      if (!childControl.isValid) {\r\n\r\n        // The date-picker already validates itself. We just need to check its status.\r\n        this.errorMessage = 'Enter the date in mm/dd/yyyy format.'\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n    }\r\n\r\n    this.isValid = true;\r\n\r\n  }\r\n\r\n\r\n  tipId = utils.generateUniqueId();\r\n  errorId = utils.generateUniqueId();\r\n  hasSlottedField: boolean = false;\r\n  hasSlottedRequired: boolean = false;\r\n  hasSlottedLabel: boolean = false;\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    \r\n    let potentiallySlottedElement = this.el.querySelector('[slot=\"element\"]');\r\n    let potentiallySlottedRequired = this.el.querySelector('[slot=\"required\"]');\r\n    let potentiallySlottedLabel = this.el.querySelector('[slot=\"label\"]');\r\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\r\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\r\n\r\n    // Handle Required\r\n    if (potentiallySlottedRequired) {\r\n\r\n      this.hasSlottedRequired = true;\r\n\r\n    }\r\n\r\n     // Handle label\r\n     if (potentiallySlottedLabel) {\r\n\r\n      this.hasSlottedLabel = true;\r\n\r\n    }\r\n\r\n    // Handle Element\r\n    if (potentiallySlottedElement) {\r\n\r\n      this.hasSlottedField = true;\r\n      this.autovalidate = false; // We can't autovalidate a slotted element provided by the user\r\n\r\n      // See if the slotted element has an id\r\n      if (potentiallySlottedElement.id) {\r\n        this.inputId = potentiallySlottedElement.id; // It does, so replace the auto-generated default with the user-provided one.\r\n      } else {\r\n        potentiallySlottedElement.id = this.inputId; // It doesn't, so assign the auto-generated default one.\r\n      }\r\n\r\n      // See if the slotted element has a name\r\n      if (potentiallySlottedElement.hasAttribute(\"name\")) {\r\n        this.inputName = potentiallySlottedElement.getAttribute(\"name\"); // It does, so replace the auto-generated default with the user-provided one.\r\n      } else {\r\n        potentiallySlottedElement.setAttribute(\"name\", this.inputName);  // It doesn't, so assign the auto-generated default one.\r\n      }\r\n\r\n      // Connect the slotted element to the tip and/or error message\r\n      if (describedBy != \"\") {\r\n        potentiallySlottedElement.setAttribute(\"aria-describedby\", describedBy);\r\n      }\r\n\r\n      // Add the error class if necessary\r\n      if (!this.isValid) {\r\n        potentiallySlottedElement.classList.add(\"yeti-input__error\");\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  renderRequiredIndicator() {\r\n\r\n    if (!this.required) {\r\n      return null;\r\n    }\r\n    \r\n\r\n    if (this.required && this.indicateRequired) {\r\n\r\n      // Use the slotted required content if it exists\r\n      if (this.hasSlottedRequired) {\r\n        return <slot name=\"required\"></slot>;\r\n      }\r\n\r\n      // Otherwise use the Yeti Required Symbol\r\n      else {\r\n        return <span class=\"yeti-form-label-required-wrapper\">\r\n          <yeti-required-symbol></yeti-required-symbol>\r\n        </span>;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let cssClass = \"yeti-form-field\";\r\n    cssClass += (this.wrapperClass != \"\") ? ` ${this.wrapperClass}` : '';\r\n\r\n\r\n    let tipClass = `yeti-form-tip`;\r\n    tipClass += (this.tipPosition == \"above\") ? ` yeti-form-tip-above` : ``;\r\n\r\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\r\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\r\n\r\n    if (this.isInline) {\r\n      cssClass += \" yeti-form-field-inline\";\r\n    }\r\n\r\n    return (\r\n      <div class={cssClass}>\r\n\r\n        <label htmlFor={this.inputId} class=\"yeti-form-label\">\r\n          {(this.hasSlottedLabel) ? <slot name=\"label\"></slot> : `${this.label}`}\r\n          {(this.indicateRequired) ? \r\n           (this.hasSlottedRequired ? <slot name=\"required\"></slot> : <yeti-required-symbol></yeti-required-symbol>)\r\n           : null}\r\n        </label>\r\n\r\n        {(!this.hasSlottedField) ?\r\n\r\n            (this.type == \"date\") ?\r\n\r\n              <yeti-date-picker\r\n                input-id={this.inputId}\r\n                input-name={this.inputName}\r\n                value={this.defaultValue}\r\n                required={this.required}\r\n                is-valid={this.isValid}\r\n                described-by={describedBy}\r\n              ></yeti-date-picker>\r\n\r\n            :\r\n          \r\n              <yeti-input \r\n                inputId={this.inputId} \r\n                // input-class={!this.isValid ? 'yeti-input__error' : null}\r\n                value={this.defaultValue} \r\n                required={this.required}\r\n                isValid={this.isValid}\r\n                describedBy={describedBy}\r\n                inputName={this.inputName}\r\n                {...((this.inputClass != \"\") ? {\"input-class\": this.inputClass} : {})}\r\n                {...((this.inputWrapperClass != \"\") ? {\"wrapper-class\": this.inputWrapperClass} : {})}\r\n                {...((this.inputMaxlength != 0) ? {\"input-maxlength\": this.inputMaxlength} : {})}\r\n                {...((this.placeholder != \"\") ? {\"placeholder\": this.placeholder} : {})}\r\n              ></yeti-input>\r\n\r\n        :\r\n\r\n          <slot name=\"element\"></slot>\r\n\r\n        }\r\n\r\n        \r\n        {\r\n          (this.tip != \"\") ?\r\n\r\n            <span class={tipClass} aria-live=\"polite\" id={this.tipId}>{this.tip}</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n        \r\n        {\r\n          (this.errorMessage != \"\" && !this.isValid) ?\r\n\r\n            <span class=\"yeti-form-field-error\" aria-live=\"polite\" id={this.errorId}>{this.errorMessage}</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]}