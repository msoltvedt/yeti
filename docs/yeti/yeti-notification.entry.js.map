{"file":"yeti-notification.entry.esm.js","mappings":"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","names":[],"sources":["src/components/yeti-notification/yeti-notification.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Event, EventEmitter } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-notification',\r\n  shadow: false,\r\n})\r\nexport class YetiTooltip {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Fires when the user clicks the action button.\r\n   */\r\n  @Event({ bubbles: true }) notificationActionClick: EventEmitter;\r\n\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop({ attribute: 'wrapper-class'}) wrapperCSS: string = '';\r\n\r\n  /**\r\n   * The type of notification: error (default) | info | success | warning | warningAlt.\r\n   */\r\n  @Prop() notificationType: string = \"\";\r\n\r\n  /**\r\n   * Whether to use the low-contrast variant or not.\r\n   */\r\n  @Prop() isLowContrast: boolean = false;\r\n\r\n  /**\r\n   * Whether to show the close button or not.\r\n   */\r\n  @Prop() showCloseButton: boolean = true;\r\n\r\n  /**\r\n   * Which icon to use (see Google Material Icons).\r\n   */\r\n  @Prop() iconCode: string = \"\";\r\n\r\n  /**\r\n   * The alt text for the icon.\r\n   */\r\n  @Prop() iconAltText: string = \"\";\r\n\r\n  /**\r\n   * Text value to display as the notification's title.\r\n   */\r\n  @Prop() textTitle: string = \"Mmmm Toast!\";\r\n\r\n  /**\r\n   * Text label for the action button.\r\n   */\r\n  @Prop() actionLabel: string = \"\";\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) notificationId: string = \"\"; // Set on load\r\n\r\n  \r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the notification is visible or not.\r\n   */\r\n  @Prop() isVisible: boolean = true;\r\n\r\n\r\n\r\n  handleCloseClick(e) {\r\n    this.isVisible = false;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  handleActionClick(e) {\r\n    this.notificationActionClick.emit();\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    this.notificationId = (this.notificationId != \"\") ? this.notificationId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let altText = this.iconAltText;\r\n    let iconCode = this.iconCode;\r\n    let wrapperCSS = 'yeti-notification';\r\n    wrapperCSS += (this.wrapperCSS !== '') ? ` ${this.wrapperCSS}` : ``;\r\n\r\n    // Set type-based CSS class\r\n    switch (this.notificationType) {\r\n\r\n      case \"error\":\r\n\r\n        wrapperCSS += ' yeti-notification-error';\r\n        altText = (altText != '') ? altText : 'Error';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n      case \"info\":\r\n\r\n        wrapperCSS += ' yeti-notification-info';\r\n        altText = (altText != '') ? altText : 'Information';\r\n        iconCode = (iconCode != '') ? iconCode : 'info';\r\n        break;\r\n\r\n      case \"success\":\r\n\r\n        wrapperCSS += ' yeti-notification-success';\r\n        altText = (altText != '') ? altText : 'Success';\r\n        iconCode = (iconCode != '') ? iconCode : 'check_circle';\r\n        break;\r\n\r\n      case \"warning\":\r\n\r\n        wrapperCSS += ' yeti-notification-warning';\r\n        altText = (altText != '') ? altText : 'Warning';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n      case \"warningAlt\":\r\n\r\n        wrapperCSS += ' yeti-notification-warning_alt';\r\n        altText = (altText != '') ? altText : 'Warning';\r\n        iconCode = (iconCode != '') ? iconCode : 'warning';\r\n        break;\r\n\r\n      case \"\":\r\n      default:\r\n        altText = (altText != '') ? altText : 'Error';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n    }\r\n    \r\n\r\n    // Set low-contrast mode\r\n    wrapperCSS += (this.isLowContrast) ? ' yeti-notification-low_contrast' : '';\r\n\r\n\r\n    // Set visibility\r\n    wrapperCSS += (this.isVisible) ? '' : ' yeti-notification__hidden';\r\n  \r\n\r\n    return (\r\n      <div class={wrapperCSS} id={this.notificationId} role=\"status\">\r\n\r\n        <div class=\"yeti-notification-icon\">\r\n          \r\n          <span class=\"material-icons\" aria-hidden=\"true\">{iconCode}</span>\r\n          <span class=\"yeti-a11y-hidden\">{altText}</span>\r\n\r\n        </div>\r\n\r\n\r\n        <div class=\"yeti-notification-content\">\r\n        \r\n          {\r\n            (this.textTitle != \"\") ?\r\n              <div class=\"yeti-notification-content-title\">{this.textTitle}</div>\r\n            :\r\n              ''\r\n          }\r\n          <div class=\"yeti-notification-content-subtitle\">\r\n\r\n            <slot />\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n        {\r\n          (this.actionLabel != \"\") ?\r\n\r\n            <button class=\"yeti-notification-action\" onClick={(e) => this.handleActionClick(e)}>\r\n              {this.actionLabel}\r\n            </button>\r\n          :\r\n            \"\"\r\n        }\r\n\r\n        {\r\n          (this.showCloseButton) ?\r\n\r\n            <button class=\"yeti-notification-close\" onClick={(e) => this.handleCloseClick(e)}>\r\n              <span class=\"material-icons\">close</span>\r\n            </button>\r\n          :\r\n            \"\"\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}"],"version":3}