{"file":"yeti-notification.entry.esm.js","mappings":";;;MAOa,WAAW;;;0BAQoC,EAAE;yBAKhC,aAAa;sBAQrB,EAAE;8BAQM,EAAE;wBAOD,KAAK;6BAKA,KAAK;;IAOvC,qBAAqB;QACnB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;KAC5B;IAID,gBAAgB,CAAC,CAAC;QAChB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,CAAC,CAAC,wBAAwB,EAAE,CAAC;QAC7B,CAAC,CAAC,cAAc,EAAE,CAAC;KACpB;IAGD,iBAAiB;;QAEf,IAAI,WAAW,GAAG,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAE7C,IAAI,CAAC,WAAW,IAAI,WAAW,IAAI,EAAE,EAAE;YACrC,WAAW,GAAG,KAAK,CAAC,gBAAgB,EAAE,CAAC;YACvC,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;SACzC;QAED,IAAI,CAAC,cAAc,GAAG,CAAC,IAAI,CAAC,cAAc,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,GAAG,GAAG,WAAW,MAAM,CAAC;QAC/F,IAAI,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,MAAM,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,GAAG,GAAG,WAAW,OAAO,CAAC;KACzE;IAGD,MAAM;QAEJ,IAAI,UAAU,GAAG,iCAAiC,CAAC;QAGnD,QAAQ;YACN,WAAK,KAAK,EAAE,UAAU,IAEpB,WAAK,KAAK,EAAC,6BAA6B,IAEtC,WAAK,KAAK,EAAC,WAAW,IACpB,iBAAW,QAAQ,EAAC,OAAO,EAAC,OAAO,EAAC,qDAAqD,GAAa,CAClG,EAEN,WAAK,KAAK,EAAC,mCAAmC,IAE5C,WAAK,KAAK,EAAC,iCAAiC,EAAC,EAAE,EAAE,IAAI,CAAC,cAAc,IAAG,IAAI,CAAC,SAAS,CAAO,EAC5F,WAAK,KAAK,EAAC,2BAA2B,EAAC,EAAE,EAAE,IAAI,CAAC,cAAc,IAE5D,eAAQ,CAEJ,CAEF,EAEN,cAAQ,KAAK,EAAC,yBAAyB,EAAC,OAAO,EAAE,CAAC,CAAC,OAAO,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,EAAE,IACnF,iBAAW,QAAQ,EAAC,OAAO,EAAC,OAAO,EAAC,mCAAmC,GAAa,CAC7E,CAEL,CAEF;SACP,EAAE;KACJ;IAID,kBAAkB;QAChB,IAAI,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,4BAA4B,CAAC,CAAC,iBAAiB,CAAC;QACjF,IAAI,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QACnC,IAAI,CAAC,YAAY,CAAC,kBAAkB,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC;KAC3D;;;;;;","names":[],"sources":["src/components/yeti-notification/yeti-notification.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Listen } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-notification',\r\n  shadow: false,\r\n})\r\nexport class YetiTooltip {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop({ attribute: 'wrapper-class'}) wrapperCSS: string = '';\r\n\r\n  /**\r\n   * Text value to display as the notification's title.\r\n   */\r\n  @Prop() textTitle: string = \"Mmmm Toast!\";\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) notificationId: string = \"\"; // Set on load\r\n\r\n  \r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip has been clicked open or not.\r\n   */\r\n  @State() isClickedOpen: boolean = false;\r\n\r\n\r\n\r\n  @Listen('click', {\r\n    target: 'body'\r\n  })\r\n  handleDeFocusingClick() {\r\n    this.isClickedOpen = false;\r\n  }\r\n\r\n\r\n\r\n  handleCloseClick(e) {\r\n    this.isClickedOpen = false;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    this.notificationId = (this.notificationId != \"\") ? this.notificationId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperCSS = 'yeti-notification-wrapper-error';\r\n  \r\n\r\n    return ([\r\n      <div class={wrapperCSS}>\r\n\r\n        <div class=\"yeti-notification-container\">\r\n          \r\n          <div class=\"yeti-flex\">\r\n            <yeti-icon iconCode=\"error\" iconCSS='yeti-color-red yeti-typo-size-5 yeti-margin-right-2'></yeti-icon>\r\n          </div>\r\n\r\n          <div class=\"yeti-notification-content-wrapper\">\r\n          \r\n            <div class=\"yeti-notification-content-title\" id={this.notificationId}>{this.textTitle}</div>\r\n            <div class=\"yeti-notification-content\" id={this.notificationId}>\r\n\r\n              <slot />\r\n\r\n            </div>\r\n\r\n          </div>\r\n          \r\n          <button class=\"yeti-notification-close\" onClick={(e) => { this.handleCloseClick(e); }}>\r\n            <yeti-icon iconCode=\"close\" iconCSS='yeti-color-white yeti-typo-size-4'></yeti-icon>\r\n          </button>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    let slot = this.el.querySelector(\".yeti-notification-trigger\").firstElementChild;\r\n    slot.setAttribute(\"tabindex\", \"0\");\r\n    slot.setAttribute(\"aria-describedby\",this.notificationId);\r\n  }\r\n\r\n}\r\n"],"version":3}