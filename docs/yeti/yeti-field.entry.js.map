{"file":"yeti-field.entry.esm.js","mappings":";;;MAOa,SAAS;;;QAsHpB,UAAK,GAAG,KAAK,CAAC,gBAAgB,EAAE,CAAC;uBAjHP,KAAK,CAAC,gBAAgB,EAAE;yBAKtB,IAAI,CAAC,OAAO;oBAKjB,MAAM;0BAKA,EAAE;8BAKG,CAAC;;mBAkBb,EAAE;wBAKI,KAAK;4BAKa,mCAAmC;uBAQ3D,IAAI;4BAKK,EAAE;4BAKD,IAAI;uBAKR,KAAK;;IA5CjC,aAAa,CAAC,QAAgB;;QAE5B,MAAM,SAAS,GAAG,OAAO,QAAQ,KAAK,QAAQ,IAAI,QAAQ,KAAK,EAAE,CAAC;QAClE,IAAI,SAAS,EAAE;YACb,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACrE;KACF;IAyCD,uBAAuB,CAAC,EAAE;QAExB,IAAI,YAAY,GAAG,EAAE,CAAC,MAAM,CAAC;QAE7B,IAAI,IAAI,CAAC,YAAY,IAAI,KAAK,EAAE;YAC9B,OAAO;SACR;QAED,IAAI,IAAI,CAAC,QAAQ,EAAE;;;YAKjB,IAAI,YAAY,CAAC,KAAK,IAAI,EAAE,EAAE;gBAE5B,IAAI,CAAC,YAAY,GAAG,GAAG,IAAI,CAAC,KAAK,qBAAqB,CAAA;gBACtD,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,OAAO;aAER;SAEF;aAAM,IAAI,YAAY,CAAC,QAAQ,CAAC,WAAW,EAAE,IAAI,kBAAkB,EAAE;;YAIpE,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;;gBAGzB,IAAI,CAAC,YAAY,GAAG,sCAAsC,CAAA;gBAC1D,IAAI,CAAC,OAAO,GAAG,KAAK,CAAC;gBACrB,OAAO;aAER;SACF;QAED,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;KAErB;IAMD,MAAM;QAEJ,IAAI,QAAQ,GAAG,iBAAiB,CAAC;QAEjC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAE/B,IAAI,IAAI,CAAC,UAAU,IAAI,EAAE,EAAE;YACzB,QAAQ,GAAE,kBAAkB,GAAG,IAAI,CAAC,UAAU,CAAC;SAChD;QAED,QACE,WAAK,KAAK,EAAE,QAAQ,IAElB,aAAO,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,KAAK,EAAC,iBAAiB,IAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,GAAG,aAAa,GAAG,IAAI,CAAS,EAG9G,CAAC,IAAI,CAAC,IAAI,IAAI,MAAM;YAElB,oCACY,IAAI,CAAC,OAAO,gBACV,IAAI,CAAC,SAAS,EAC1B,KAAK,EAAE,IAAI,CAAC,YAAY,EACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ,cACb,IAAI,CAAC,OAAO,kBACR,IAAI,CAAC,KAAK,GACN;;gBAIpB,4CACY,IAAI,CAAC,OAAO,iBACT,CAAC,IAAI,CAAC,OAAO,GAAG,mBAAmB,GAAG,IAAI,EACvD,KAAK,EAAE,IAAI,CAAC,YAAY,EACxB,QAAQ,EAAE,IAAI,CAAC,QAAQ,cACb,IAAI,CAAC,OAAO,kBACR,IAAI,CAAC,KAAK,KACnB,CAAC,IAAI,CAAC,cAAc,IAAI,CAAC,IAAI,EAAC,iBAAiB,EAAE,IAAI,CAAC,cAAc,EAAC,GAAG,EAAE,GACnE,EAIhB,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE;YAEb,YAAM,KAAK,EAAC,eAAe,eAAW,QAAQ,EAAC,EAAE,EAAE,IAAI,CAAC,KAAK,IAEvD,CAAC,IAAI,CAAC,OAAO;kBACX,IAAI,CAAC,YAAY;;oBAEjB,IAAI,CAAC,GAAG;0BACN,IAAI,CAAC,GAAG;0BACR,IAAI,CAEN;;gBAGR,EAAE,CAGF,EACN;KACH;;;;;;;;","names":[],"sources":["src/components/yeti-field/yeti-field.tsx"],"sourcesContent":["import { Component, Prop, h, State, Watch, Listen } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-field',\n  shadow: false,\n})\nexport class YetiField {\n\n  /**\n   * id that will be assigned to the actual input element. A unique one will be assigned if one is not provided.\n   */\n  @Prop() inputId: string = utils.generateUniqueId();\n\n  /**\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\n   */\n  @Prop() inputName: string = this.inputId;\n\n  /**\n   * type that will be assigned to the actual input element.\n   */\n  @Prop() type: string = \"text\";\n\n  /**\n   * CSS classlist that will be assigned to the containing field element (probably a div).\n   */\n  @Prop() fieldClass: string = \"\";\n\n  /**\n   * maximum length for the field.\n   */\n  @Prop() inputMaxlength?: number = 0;\n  \n  /**\n   * Mandatory value for the label of the field.\n   */\n  @Prop() label!: string;\n  @Watch('label')\n  validateLabel(newValue: string) {\n    // Label must have a non-empty value.\n    const isInvalid = typeof newValue !== 'string' || newValue === '';\n    if (isInvalid) {\n      throw new Error('yeti-field must have a non-empty label attribute');\n    }\n  }\n\n  /**\n   * Value for the optional input tip that appears at the bottom of the field.\n   */\n  @Prop() tip: string = \"\";\n\n  /**\n   * Whether the field is required to have a valid value by the greater form.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * Error message that appears when the field is invalid. Can be updated at any time.\n   */\n  @Prop({mutable: true}) errorMessage: string = 'Error: please correct this field.'\n\n  /**\n   * Whether the input is currently valid or invalid.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) isValid: boolean = true;\n\n  /**\n   * Default value of the field's input.\n   */\n  @Prop() defaultValue: string = '';\n\n  /**\n   * Determines whether the field should attempt to validate itself or merely pass through any readyToVerify events from its input.\n   */\n  @Prop() autovalidate: boolean = true;\n\n  /**\n   * Tracks whether the field's input has been focused and then blurred (i.e. if the user has interacted with it yet).\n   */\n  @State() isDirty: boolean = false;\n  \n  @Listen('readyToVerifySlow', { capture: true })\n  handleReadyToVerifySlow(ev) {\n\n    let childControl = ev.target;\n\n    if (this.autovalidate == false) {\n      return;\n    }\n\n    if (this.required) {\n\n      // Autoverification is on, this field is required, and the child component just notified us that it's ready for verification.\n\n      // First, regardless of whether it's an input or date-picker, it can't be empty.\n      if (childControl.value == \"\") {\n\n        this.errorMessage = `${this.label} field is required.`\n        this.isValid = false;\n        return;\n\n      }\n      \n    } else if (childControl.nodeName.toLowerCase() == \"yeti-date-picker\") {\n\n      // Second, if it's a non-empty date-picker, see if it's a valid date.\n\n      if (!childControl.isValid) {\n\n        // The date-picker already validates itself. We just need to check its status.\n        this.errorMessage = 'Enter the date in mm/dd/yyyy format.'\n        this.isValid = false;\n        return;\n\n      }\n    }\n\n    this.isValid = true;\n\n  }\n\n  tipId = utils.generateUniqueId();\n\n\n\n  render() {\n\n    let cssClass = \"yeti-form-field\";\n\n    this.validateLabel(this.label);\n\n    if (this.fieldClass != \"\") {\n      cssClass =\"yeti-form-field \" + this.fieldClass;\n    }\n\n    return (\n      <div class={cssClass}>\n\n        <label htmlFor={this.inputId} class=\"yeti-form-label\">{this.label}{this.required ? ' (required)' : null}</label>\n\n        { \n          (this.type == \"date\") ?\n\n            <yeti-date-picker\n              input-id={this.inputId}\n              input-name={this.inputName}\n              value={this.defaultValue}\n              required={this.required}\n              is-valid={this.isValid}\n              described-by={this.tipId}\n            ></yeti-date-picker>\n\n          :\n        \n            <yeti-input \n              input-id={this.inputId} \n              input-class={!this.isValid ? 'yeti-input__error' : null} \n              value={this.defaultValue} \n              required={this.required}\n              is-valid={this.isValid}\n              described-by={this.tipId}\n              {...((this.inputMaxlength != 0) ? {\"input-maxlength\": this.inputMaxlength} : {})}\n            ></yeti-input>\n        }\n        \n        {\n          (this.tip != \"\") ?\n\n            <span class=\"yeti-form-tip\" aria-live=\"polite\" id={this.tipId}>{\n\n                  !this.isValid\n                  ? this.errorMessage\n                  : \n                    this.tip\n                    ? this.tip\n                    : null\n\n            }</span>\n\n          :\n            \"\"\n        }\n        \n      </div>\n    );\n  }\n\n}\n"],"version":3}