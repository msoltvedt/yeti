{"file":"yeti-field.entry.esm.js","mappings":"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","names":[],"sources":["src/components/yeti-field/yeti-field.tsx"],"sourcesContent":["import { Component, Prop, h, State, Watch, Listen, Element } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-field',\r\n  shadow: false,\r\n})\r\n\r\nexport class YetiField {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * id that will be assigned to the actual input element. A unique one will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputId: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputName: string = this.inputId;\r\n\r\n  /**\r\n   * type that will be assigned to the actual input element.\r\n   */\r\n  @Prop() type: string = \"text\";\r\n\r\n  /**\r\n   * maximum length for the field.\r\n   */\r\n  @Prop() inputMaxlength?: number = 0;\r\n  \r\n  /**\r\n   * Mandatory value for the label of the field.\r\n   */\r\n  @Prop() label: string=\"\";\r\n  \r\n\r\n  /**\r\n   * Value for the optional input tip that appears at the bottom of the field.\r\n   */\r\n  @Prop() tip: string = \"\";\r\n\r\n  /**\r\n   * Position of the input tip relative to the rest of the field's contents. Defaults to \"below\", can also be \"above\".\r\n   */\r\n  @Prop() tipPosition?: string = \"below\";\r\n\r\n  /**\r\n   * Whether the field is required to have a valid value by the greater form.\r\n   */\r\n  @Prop() required?: boolean = false;\r\n\r\n  /**\r\n   * Whether to indicate the field is required by showing a default icon.\r\n   */\r\n  @Prop() indicateRequired?: boolean = false;\r\n\r\n  /**\r\n   * Error message that appears when the field is invalid. Can be updated at any time.\r\n   */\r\n  @Prop({mutable: true}) errorMessage: string = 'Error: please correct this field.'\r\n\r\n  /**\r\n   * Whether the input is currently valid or invalid.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean = true;\r\n  @Watch('isValid')\r\n  updateSlottedContentForErrorState(newValue: string) {\r\n\r\n    if (!this.hasSlottedField) {\r\n      return; // We don't need to do anything here unless the form element comes via slotted content.\r\n    }\r\n\r\n    let element = this.el.querySelector(`#${this.inputId}`);\r\n\r\n    if (element) {\r\n\r\n      if (newValue) {\r\n        element.classList.add(\"yeti-input__error\");\r\n      } else {\r\n        element.classList.remove(\"yeti-input__error\");\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default value of the field's input.\r\n   */\r\n  @Prop() defaultValue: string = '';\r\n\r\n  /**\r\n   * Determines whether the field should attempt to validate itself or merely pass through any readyToVerify events from its input.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) autovalidate: boolean = true;\r\n\r\n  /**\r\n   * Determines whether the field uses block (default) or inline labels.\r\n   */\r\n  @Prop() isInline: boolean = false;\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the Field's wrapper.\r\n   */\r\n  @Prop() wrapperClass?: string = \"\";\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the input.\r\n   */\r\n  @Prop() inputClass?: string = \"\";\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the input's wrapper.\r\n   */\r\n  @Prop() inputWrapperClass?: string = \"\";\r\n\r\n  /**\r\n   * Tracks whether the field's input has been focused and then blurred (i.e. if the user has interacted with it yet).\r\n   */\r\n  @State() isDirty: boolean = false;\r\n  \r\n  @Listen('readyToVerifySlow', { capture: true })\r\n  handleReadyToVerifySlow(ev) {\r\n\r\n    let childControl = ev.target;\r\n\r\n    if (this.autovalidate == false) {\r\n      return;\r\n    }\r\n\r\n   \r\n    if (this.required) {\r\n\r\n      // Autoverification is on, this field is required, and the child component just notified us that it's ready for verification.\r\n\r\n      // First, regardless of whether it's an input or date-picker, it can't be empty.\r\n      if (childControl.value == \"\") {\r\n\r\n        this.errorMessage = (this.errorMessage != \"\") ? this.errorMessage : `${this.label} field is required.`\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n      \r\n    } else if (childControl.nodeName.toLowerCase() == \"yeti-date-picker\") {\r\n\r\n      // Second, if it's a non-empty date-picker, see if it's a valid date.\r\n\r\n      if (!childControl.isValid) {\r\n\r\n        // The date-picker already validates itself. We just need to check its status.\r\n        this.errorMessage = 'Enter the date in mm/dd/yyyy format.'\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n    }\r\n\r\n    this.isValid = true;\r\n\r\n  }\r\n\r\n\r\n  tipId = utils.generateUniqueId();\r\n  errorId = utils.generateUniqueId();\r\n  hasSlottedField: boolean = false;\r\n  hasSlottedRequired: boolean = false;\r\n  hasSlottedLabel: boolean = false;\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    \r\n    let potentiallySlottedElement = this.el.querySelector('[slot=\"element\"]');\r\n    let potentiallySlottedRequired = this.el.querySelector('[slot=\"required\"]');\r\n    let potentiallySlottedLabel = this.el.querySelector('[slot=\"label\"]');\r\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\r\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\r\n\r\n    // Handle Required\r\n    if (potentiallySlottedRequired) {\r\n\r\n      this.hasSlottedRequired = true;\r\n\r\n    }\r\n\r\n     // Handle label\r\n     if (potentiallySlottedLabel) {\r\n\r\n      this.hasSlottedLabel = true;\r\n\r\n    }\r\n\r\n    // Handle Element\r\n    if (potentiallySlottedElement) {\r\n\r\n      this.hasSlottedField = true;\r\n      this.autovalidate = false; // We can't autovalidate a slotted element provided by the user\r\n\r\n      // See if the slotted element has an id\r\n      if (potentiallySlottedElement.id) {\r\n        this.inputId = potentiallySlottedElement.id; // It does, so replace the auto-generated default with the user-provided one.\r\n      } else {\r\n        potentiallySlottedElement.id = this.inputId; // It doesn't, so assign the auto-generated default one.\r\n      }\r\n\r\n      // See if the slotted element has a name\r\n      if (potentiallySlottedElement.hasAttribute(\"name\")) {\r\n        this.inputName = potentiallySlottedElement.getAttribute(\"name\"); // It does, so replace the auto-generated default with the user-provided one.\r\n      } else {\r\n        potentiallySlottedElement.setAttribute(\"name\", this.inputName);  // It doesn't, so assign the auto-generated default one.\r\n      }\r\n\r\n      // Connect the slotted element to the tip and/or error message\r\n      if (describedBy != \"\") {\r\n        potentiallySlottedElement.setAttribute(\"aria-describedby\", describedBy);\r\n      }\r\n\r\n      // Add the error class if necessary\r\n      if (!this.isValid) {\r\n        potentiallySlottedElement.classList.add(\"yeti-input__error\");\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  renderRequiredIndicator() {\r\n\r\n    if (!this.required) {\r\n      return null;\r\n    }\r\n    \r\n\r\n    if (this.required && this.indicateRequired) {\r\n\r\n      // Use the slotted required content if it exists\r\n      if (this.hasSlottedRequired) {\r\n        return <slot name=\"required\"></slot>;\r\n      }\r\n\r\n      // Otherwise use the Yeti Required Symbol\r\n      else {\r\n        return <span class=\"yeti-form-label-required-wrapper\">\r\n          <yeti-required-symbol></yeti-required-symbol>\r\n        </span>;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let cssClass = \"yeti-form-field\";\r\n    cssClass += (this.wrapperClass != \"\") ? ` ${this.wrapperClass}` : '';\r\n\r\n\r\n    let tipClass = `yeti-form-tip`;\r\n    tipClass += (this.tipPosition == \"above\") ? ` yeti-form-tip-above` : ``;\r\n\r\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\r\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\r\n\r\n    if (this.isInline) {\r\n      cssClass += \" yeti-form-field-inline\";\r\n    }\r\n\r\n    return (\r\n      <div class={cssClass}>\r\n\r\n        <label htmlFor={this.inputId} class=\"yeti-form-label\">\r\n          {(this.hasSlottedLabel) ? <slot name=\"label\"></slot> : `${this.label}`}\r\n          {(this.indicateRequired) ? \r\n           (this.hasSlottedRequired ? <slot name=\"required\"></slot> : <yeti-required-symbol></yeti-required-symbol>)\r\n           : null}\r\n        </label>\r\n\r\n        {(!this.hasSlottedField) ?\r\n\r\n            (this.type == \"date\") ?\r\n\r\n              <yeti-date-picker\r\n                input-id={this.inputId}\r\n                input-name={this.inputName}\r\n                value={this.defaultValue}\r\n                required={this.required}\r\n                is-valid={this.isValid}\r\n                described-by={describedBy}\r\n              ></yeti-date-picker>\r\n\r\n            :\r\n          \r\n              <yeti-input \r\n                inputId={this.inputId} \r\n                // input-class={!this.isValid ? 'yeti-input__error' : null}\r\n                value={this.defaultValue} \r\n                required={this.required}\r\n                isValid={this.isValid}\r\n                describedBy={describedBy}\r\n                inputName={this.inputName}\r\n                {...((this.inputClass != \"\") ? {\"input-class\": this.inputClass} : {})}\r\n                {...((this.inputWrapperClass != \"\") ? {\"wrapper-class\": this.inputWrapperClass} : {})}\r\n                {...((this.inputMaxlength != 0) ? {\"input-maxlength\": this.inputMaxlength} : {})}\r\n              ></yeti-input>\r\n\r\n        :\r\n\r\n          <slot name=\"element\"></slot>\r\n\r\n        }\r\n\r\n        \r\n        {\r\n          (this.tip != \"\") ?\r\n\r\n            <span class={tipClass} aria-live=\"polite\" id={this.tipId}>{this.tip}</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n        \r\n        {\r\n          (this.errorMessage != \"\" && !this.isValid) ?\r\n\r\n            <span class=\"yeti-form-field-error\" aria-live=\"polite\" id={this.errorId}>{this.errorMessage}</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n"],"version":3}