{"file":"yeti-field.entry.esm.js","mappings":"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","names":[],"sources":["src/components/yeti-field/yeti-field.tsx"],"sourcesContent":["import { Component, Prop, h, State, Watch, Listen, Element } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-field',\n  shadow: false,\n})\n\nexport class YetiField {\n\n  @Element() el: HTMLElement;\n\n  /**\n   * id that will be assigned to the actual input element. A unique one will be assigned if one is not provided.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) inputId: string = utils.generateUniqueId();\n\n  /**\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) inputName: string = this.inputId;\n\n  /**\n   * type that will be assigned to the actual input element.\n   */\n  @Prop() type: string = \"text\";\n\n  /**\n   * maximum length for the field.\n   */\n  @Prop() inputMaxlength?: number = 0;\n  \n  /**\n   * Mandatory value for the label of the field.\n   */\n  @Prop() label: string=\"\";\n  \n\n  /**\n   * Value for the optional input tip that appears at the bottom of the field.\n   */\n  @Prop() tip: string = \"\";\n\n  /**\n   * Position of the input tip relative to the rest of the field's contents. Defaults to \"below\", can also be \"above\".\n   */\n  @Prop() tipPosition?: string = \"below\";\n\n  /**\n   * Whether the field is required to have a valid value by the greater form.\n   */\n  @Prop() required?: boolean = false;\n\n  /**\n   * Whether to indicate the field is required by showing a default icon.\n   */\n  @Prop() indicateRequired?: boolean = false;\n\n  /**\n   * Error message that appears when the field is invalid. Can be updated at any time.\n   */\n  @Prop({mutable: true}) errorMessage: string = 'Error: please correct this field.'\n\n  /**\n   * Whether the input is currently valid or invalid.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) isValid: boolean = true;\n  @Watch('isValid')\n  updateSlottedContentForErrorState(newValue: string) {\n\n    if (!this.hasSlottedField) {\n      return; // We don't need to do anything here unless the form element comes via slotted content.\n    }\n\n    let element = this.el.querySelector(`#${this.inputId}`);\n\n    if (element) {\n\n      if (newValue) {\n        element.classList.add(\"yeti-input__error\");\n      } else {\n        element.classList.remove(\"yeti-input__error\");\n      }\n\n    }\n  }\n\n  /**\n   * Default value of the field's input.\n   */\n  @Prop() defaultValue: string = '';\n\n  /**\n   * Determines whether the field should attempt to validate itself or merely pass through any readyToVerify events from its input.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) autovalidate: boolean = true;\n\n  /**\n   * Determines whether the field uses block (default) or inline labels.\n   */\n  @Prop() isInline: boolean = false;\n\n  /**\n   * Additional user-supplied CSS classes to apply to the Field's wrapper.\n   */\n  @Prop() wrapperClass?: string = \"\";\n\n  /**\n   * Additional user-supplied CSS classes to apply to the input.\n   */\n  @Prop() inputClass?: string = \"\";\n\n  /**\n   * Additional user-supplied CSS classes to apply to the input's wrapper.\n   */\n  @Prop() inputWrapperClass?: string = \"\";\n\n  /**\n   * Tracks whether the field's input has been focused and then blurred (i.e. if the user has interacted with it yet).\n   */\n  @State() isDirty: boolean = false;\n  \n  @Listen('readyToVerifySlow', { capture: true })\n  handleReadyToVerifySlow(ev) {\n\n    let childControl = ev.target;\n\n    if (this.autovalidate == false) {\n      return;\n    }\n\n   \n    if (this.required) {\n\n      // Autoverification is on, this field is required, and the child component just notified us that it's ready for verification.\n\n      // First, regardless of whether it's an input or date-picker, it can't be empty.\n      if (childControl.value == \"\") {\n\n        this.errorMessage = (this.errorMessage != \"\") ? this.errorMessage : `${this.label} field is required.`\n        this.isValid = false;\n        return;\n\n      }\n      \n    } else if (childControl.nodeName.toLowerCase() == \"yeti-date-picker\") {\n\n      // Second, if it's a non-empty date-picker, see if it's a valid date.\n\n      if (!childControl.isValid) {\n\n        // The date-picker already validates itself. We just need to check its status.\n        this.errorMessage = 'Enter the date in mm/dd/yyyy format.'\n        this.isValid = false;\n        return;\n\n      }\n    }\n\n    this.isValid = true;\n\n  }\n\n\n  tipId = utils.generateUniqueId();\n  errorId = utils.generateUniqueId();\n  hasSlottedField: boolean = false;\n  hasSlottedRequired: boolean = false;\n  hasSlottedLabel: boolean = false;\n\n\n\n  componentWillLoad() {\n    \n    let potentiallySlottedElement = this.el.querySelector('[slot=\"element\"]');\n    let potentiallySlottedRequired = this.el.querySelector('[slot=\"required\"]');\n    let potentiallySlottedLabel = this.el.querySelector('[slot=\"label\"]');\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\n\n    // Handle Required\n    if (potentiallySlottedRequired) {\n\n      this.hasSlottedRequired = true;\n\n    }\n\n     // Handle label\n     if (potentiallySlottedLabel) {\n\n      this.hasSlottedLabel = true;\n\n    }\n\n    // Handle Element\n    if (potentiallySlottedElement) {\n\n      this.hasSlottedField = true;\n      this.autovalidate = false; // We can't autovalidate a slotted element provided by the user\n\n      // See if the slotted element has an id\n      if (potentiallySlottedElement.id) {\n        this.inputId = potentiallySlottedElement.id; // It does, so replace the auto-generated default with the user-provided one.\n      } else {\n        potentiallySlottedElement.id = this.inputId; // It doesn't, so assign the auto-generated default one.\n      }\n\n      // See if the slotted element has a name\n      if (potentiallySlottedElement.hasAttribute(\"name\")) {\n        this.inputName = potentiallySlottedElement.getAttribute(\"name\"); // It does, so replace the auto-generated default with the user-provided one.\n      } else {\n        potentiallySlottedElement.setAttribute(\"name\", this.inputName);  // It doesn't, so assign the auto-generated default one.\n      }\n\n      // Connect the slotted element to the tip and/or error message\n      if (describedBy != \"\") {\n        potentiallySlottedElement.setAttribute(\"aria-describedby\", describedBy);\n      }\n\n      // Add the error class if necessary\n      if (!this.isValid) {\n        potentiallySlottedElement.classList.add(\"yeti-input__error\");\n      }\n\n    }\n    \n  }\n\n\n\n  renderRequiredIndicator() {\n\n    if (!this.required) {\n      return null;\n    }\n    \n\n    if (this.required && this.indicateRequired) {\n\n      // Use the slotted required content if it exists\n      if (this.hasSlottedRequired) {\n        return <slot name=\"required\"></slot>;\n      }\n\n      // Otherwise use the Yeti Required Symbol\n      else {\n        return <span class=\"yeti-form-label-required-wrapper\">\n          <yeti-required-symbol></yeti-required-symbol>\n        </span>;\n      }\n\n    }\n\n  }\n\n\n\n  render() {\n\n    let cssClass = \"yeti-form-field\";\n    cssClass += (this.wrapperClass != \"\") ? ` ${this.wrapperClass}` : '';\n\n\n    let tipClass = `yeti-form-tip`;\n    tipClass += (this.tipPosition == \"above\") ? ` yeti-form-tip-above` : ``;\n\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\n\n    if (this.isInline) {\n      cssClass += \" yeti-form-field-inline\";\n    }\n\n    return (\n      <div class={cssClass}>\n\n        <label htmlFor={this.inputId} class=\"yeti-form-label\">\n          {(this.hasSlottedLabel) ? <slot name=\"label\"></slot> : `${this.label}`}\n          {(this.indicateRequired) ? \n           (this.hasSlottedRequired ? <slot name=\"required\"></slot> : <yeti-required-symbol></yeti-required-symbol>)\n           : null}\n        </label>\n\n        {(!this.hasSlottedField) ?\n\n            (this.type == \"date\") ?\n\n              <yeti-date-picker\n                input-id={this.inputId}\n                input-name={this.inputName}\n                value={this.defaultValue}\n                required={this.required}\n                is-valid={this.isValid}\n                described-by={describedBy}\n              ></yeti-date-picker>\n\n            :\n          \n              <yeti-input \n                inputId={this.inputId} \n                // input-class={!this.isValid ? 'yeti-input__error' : null}\n                value={this.defaultValue} \n                required={this.required}\n                isValid={this.isValid}\n                describedBy={describedBy}\n                inputName={this.inputName}\n                {...((this.inputClass != \"\") ? {\"input-class\": this.inputClass} : {})}\n                {...((this.inputWrapperClass != \"\") ? {\"wrapper-class\": this.inputWrapperClass} : {})}\n                {...((this.inputMaxlength != 0) ? {\"input-maxlength\": this.inputMaxlength} : {})}\n              ></yeti-input>\n\n        :\n\n          <slot name=\"element\"></slot>\n\n        }\n\n        \n        {\n          (this.tip != \"\") ?\n\n            <span class={tipClass} aria-live=\"polite\" id={this.tipId}>{this.tip}</span>\n\n          :\n            \"\"\n        }\n        \n        \n        {\n          (this.errorMessage != \"\" && !this.isValid) ?\n\n            <span class=\"yeti-form-field-error\" aria-live=\"polite\" id={this.errorId}>{this.errorMessage}</span>\n\n          :\n            \"\"\n        }\n        \n      </div>\n    );\n  }\n\n}\n"],"version":3}