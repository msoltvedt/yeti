{"version":3,"names":["YetiTextarea","constructor","hostRef","this","textareaClass","wrapperClass","isDisabled","autocomplete","textareaId","utils","generateUniqueId","textareaName","maxlength","required","isValid","value","textareaTabindex","labeledBy","describedBy","description","characterCounterId","isTouched","length","usesCharacterCounter","handleKeyDown","handleKeyUp","ev","target","conformValueToMaxlength","readyToVerifyFast","emit","originalEvent","yetiTextarea","el","updateCharacterCounter","handleFieldBlur","stopImmediatePropagation","readyToVerifySlow","substring","characterCounter","innerHTML","componentWillLoad","componentDidLoad","document","getElementById","error","console","warn","render","cssClasses","wrapperClasses","h","key","class","Object","assign","id","name","onKeyDown","onKeyUp","onBlur","disabled","tabindex"],"sources":["src/components/yeti-textarea/yeti-textarea.tsx"],"sourcesContent":["import { Component, Prop, h, State, Event, EventEmitter, Element } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-textarea',\r\n  shadow: false,\r\n})\r\nexport class YetiTextarea {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Event that fires when the user leaves (blurs) the input field.\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifySlow: EventEmitter;\r\n\r\n  /**\r\n   * Event that fires when the user enters or changes the contents of the input field.\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifyFast: EventEmitter;\r\n\r\n  /**\r\n   * CSS classlist applied to the actual HTML textarea element.\r\n   */\r\n  @Prop() textareaClass: string = '';\r\n\r\n  /**\r\n   * CSS classlist applied to the HTML wrapper around the element and associated elements.\r\n   */\r\n  @Prop() wrapperClass: string = '';\r\n\r\n  /**\r\n   * Whether or not the textarea is disabled.\r\n   */\r\n  @Prop() isDisabled: boolean = false;\r\n\r\n  /**\r\n   * Passthrough to the textarea's autocomplete attribute.\r\n   */\r\n  @Prop() autocomplete: string = '';\r\n\r\n  /**\r\n   * id applied to the actual HTML textarea element.\r\n   */\r\n  @Prop() textareaId: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * name applied to the actual HTML textarea element. Defaults to match id.\r\n   */\r\n  @Prop() textareaName: string = this.textareaId;\r\n\r\n  /**\r\n   * Optional attribute to set the maxlength of the field\r\n   */\r\n  @Prop({ attribute: \"textarea-maxlength\"}) maxlength?: number = 100000;\r\n\r\n  /**\r\n   * Whether the field is required to have a valid value or not.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  /**\r\n   * Tracks whether the textarea's current value is valid or not.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean = true;\r\n\r\n  /**\r\n   * The actual value of the textarea field.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) value: string = '';\r\n\r\n  /**\r\n   * The tabindex of the textarea field.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true,\r\n  }) textareaTabindex: string = '';\r\n\r\n  /**\r\n   * id of an outside HTML element pointed to by the actual textarea element's aria-labeledby attribute.\r\n   */\r\n  @Prop() labeledBy?: string = \"\";\r\n\r\n  /**\r\n   * id of an outside HTML element pointed to by the actual textarea element's aria-describedby attribute.\r\n   */\r\n  @Prop() describedBy?: string = \"\";\r\n\r\n  /**\r\n   * Text description of what the textarea is or does\r\n   */\r\n  @Prop() description?: string = \"\";\r\n\r\n  /**\r\n   * Id of an HTML element that represents the character counter\r\n   */\r\n  @Prop() characterCounterId?: string = \"\";\r\n\r\n  /**\r\n   * Whether the user has focused and left (i.e. interacted with) the actual textarea element.\r\n   */\r\n  @State() isTouched: boolean = false;\r\n\r\n  /**\r\n   * How many characters long the textarea's value is.\r\n   */\r\n  @State() length: number = 0;\r\n\r\n  \r\n  private usesCharacterCounter: boolean = false;\r\n  private characterCounter: HTMLElement; // A reference to the actual HTML element that represents the character counter.\r\n\r\n  \r\n\r\n  handleKeyDown() {\r\n    // Any validation of a keystroke would go here.\r\n  }\r\n  \r\n\r\n\r\n  handleKeyUp(ev) {\r\n    this.isTouched = true;\r\n    this.value = ev.target.value;\r\n    this.length = this.value.length;\r\n    this.conformValueToMaxlength();\r\n    this.readyToVerifyFast.emit({\r\n      \"originalEvent\": ev,\r\n      \"yetiTextarea\": this.el,\r\n      \"value\": ev.target.value\r\n    });\r\n\r\n    if (this.usesCharacterCounter) {\r\n      this.updateCharacterCounter();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleFieldBlur(ev) {\r\n    ev.stopImmediatePropagation();\r\n    this.isTouched = true;\r\n    this.value = ev.target.value;\r\n    this.readyToVerifySlow.emit({\r\n      \"originalEvent\": ev,\r\n      \"yetiTextarea\": this.el,\r\n      \"value\": ev.target.value\r\n    });\r\n  }\r\n\r\n\r\n\r\n  conformValueToMaxlength() {\r\n    // If the value is longer than maxlength we need to truncate it.\r\n    if (this.value.length > this.maxlength) {\r\n      this.value = this.value.substring(0, this.maxlength);\r\n      this.length = this.maxlength;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  updateCharacterCounter() {\r\n\r\n    if (this.usesCharacterCounter) {\r\n      this.characterCounter.innerHTML = `${this.maxlength - this.length}/${this.maxlength} <span class='yeti-a11y-hidden'>characters remaining</span>`;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    this.length = this.value.length;\r\n    this.conformValueToMaxlength();\r\n  }\r\n\r\n\r\n\r\n  componentDidLoad() {\r\n    // Verify value is within bounds initially\r\n    this.conformValueToMaxlength();\r\n\r\n    // Initialize private variables\r\n    try {\r\n      if (this.characterCounterId != \"\") {\r\n        // User supplied an id for the character counter. Use it if it points to an actual HTML element.\r\n        this.characterCounter = document.getElementById(this.characterCounterId) as HTMLElement;\r\n        this.usesCharacterCounter = true;\r\n        this.updateCharacterCounter();\r\n        this.describedBy += ` ${this.characterCounterId}`;\r\n      }\r\n    } catch(error) {\r\n      console.warn(`Yeti Textarea was unable to set a character counter element with the supplied id of ${this.characterCounterId}.`, error);\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let cssClasses = 'yeti-textarea';\r\n    let wrapperClasses = 'yeti-textarea-wrapper';\r\n\r\n    if (this.textareaClass != '') {\r\n      cssClasses += ' ' + this.textareaClass;\r\n    }\r\n\r\n    if (this.wrapperClass != '') {\r\n      wrapperClasses += ' ' + this.wrapperClass;\r\n    }\r\n\r\n    if (this.isValid == false) {\r\n      cssClasses += ' yeti-textarea__error';\r\n    }\r\n\r\n    return (\r\n      <div class={wrapperClasses}>\r\n        <textarea \r\n          class={cssClasses} \r\n          id={this.textareaId}\r\n          name={this.textareaName}\r\n          value={this.value}\r\n          onKeyDown={() => this.handleKeyDown()}\r\n          onKeyUp={(ev) => this.handleKeyUp(ev)}\r\n          onBlur={(ev) => this.handleFieldBlur(ev)}\r\n          aria-invalid={!this.isValid}\r\n          {...((this.isDisabled) ? {\"disabled\": this.isDisabled} : {})}\r\n          {...((this.autocomplete != \"\") ? {\"autocomplete\": this.autocomplete} : {})}\r\n          {...((this.textareaTabindex != \"\") ? {\"tabindex\": this.textareaTabindex} : {})}\r\n          {...((this.labeledBy != \"\") ? {\"aria-labelledby\": this.labeledBy} : {})}\r\n          {...((this.describedBy != \"\") ? {\"aria-describedby\": this.describedBy} : {})}\r\n          {...((this.description != \"\") ? {\"aria-description\": this.description} : {})}\r\n          {...((this.maxlength != 100000) ? {\"maxlength\": this.maxlength} : {})}>\r\n\r\n          {this.value}\r\n        \r\n        </textarea>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]}