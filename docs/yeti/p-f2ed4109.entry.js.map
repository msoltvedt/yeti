{"version":3,"names":["YetiToast","handleCloseClick","e","this","isVisible","stopImmediatePropagation","preventDefault","isClosed","handleActionClick","toastActionClick","emit","componentWillLoad","componentId","el","getAttribute","utils","generateUniqueId","setAttribute","toastId","slotId","closesSelfAfter","setTimeout","render","altText","iconAltText","iconCode","wrapperClass","actualClass","size","toastType","h","key","class","id","role","textTitle","actionLabel","onClick"],"sources":["src/components/yeti-toast/yeti-toast.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Event, EventEmitter } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-toast',\r\n  shadow: false,\r\n})\r\nexport class YetiToast {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Fires when the user clicks the action button.\r\n   */\r\n  @Event({ bubbles: true }) toastActionClick: EventEmitter;\r\n\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop() actualClass: string = '';\r\n\r\n  /**\r\n   * The type of toast: error (default) | info | success | warning | warningAlt.\r\n   */\r\n  @Prop() toastType: string = \"\";\r\n\r\n  /**\r\n   * Whether to use the high-contrast variant or not.\r\n   */\r\n  @Prop() isHighContrast: boolean = false;\r\n\r\n  /**\r\n   * Whether to show the close button or not.\r\n   */\r\n  @Prop() showCloseButton: boolean = true;\r\n\r\n  /**\r\n   * Which icon to use (see Google Material Icons).\r\n   */\r\n  @Prop() iconCode: string = \"\";\r\n\r\n  /**\r\n   * The alt text for the icon.\r\n   */\r\n  @Prop() iconAltText: string = \"\";\r\n\r\n  /**\r\n   * Text value to display as the toast's title.\r\n   */\r\n  @Prop() textTitle: string = \"Mmmm Toast!\";\r\n\r\n  /**\r\n   * Optionally set a size (currently only supports default and \"full\")\r\n   */\r\n  @Prop() size: string = \"\";\r\n\r\n  /**\r\n   * Text label for the action button.\r\n   */\r\n  @Prop() actionLabel: string = \"\";\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) toastId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * Time in ms before the Toast closes itself. Values of less than 1 will be ignored.\r\n   */\r\n  @Prop() closesSelfAfter: number = 0;\r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the toast is visible or not.\r\n   */\r\n  @Prop() isVisible: boolean = true;\r\n\r\n  /**\r\n   * Whether the toast should animated into the closed (not visible) state.\r\n   */\r\n  @Prop() isClosed: boolean = false;\r\n\r\n\r\n\r\n  handleCloseClick(e) {\r\n\r\n    this.isVisible = false;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n    this.isClosed = true;\r\n\r\n  }\r\n\r\n\r\n\r\n  handleActionClick(e) {\r\n    this.toastActionClick.emit();\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    this.toastId = (this.toastId != \"\") ? this.toastId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n\r\n    if (this.closesSelfAfter > 0) {\r\n      setTimeout(() => {\r\n        this.isVisible = false;\r\n      }, this.closesSelfAfter);\r\n    }\r\n\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let altText = this.iconAltText;\r\n    let iconCode = this.iconCode;\r\n    let wrapperClass = 'yeti-toast-wrapper';\r\n    let actualClass = 'yeti-toast';\r\n    actualClass += (this.size == 'full') ? ' yeti-toast_full' : '';\r\n    actualClass += (this.actualClass !== '') ? ` ${this.actualClass}` : ``;\r\n\r\n    wrapperClass += (this.isClosed) ? ' yeti-toast-wrapper__closing' : '';\r\n\r\n    // Set type-based CSS class\r\n    switch (this.toastType) {\r\n\r\n      case \"error\":\r\n\r\n        actualClass += ' yeti-toast-error';\r\n        altText = (altText != '') ? altText : 'Error';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n      case \"info\":\r\n\r\n        actualClass += ' yeti-toast-info';\r\n        altText = (altText != '') ? altText : 'Information';\r\n        iconCode = (iconCode != '') ? iconCode : 'info';\r\n        break;\r\n\r\n      case \"success\":\r\n\r\n        actualClass += ' yeti-toast-success';\r\n        altText = (altText != '') ? altText : 'Success';\r\n        iconCode = (iconCode != '') ? iconCode : 'check_circle';\r\n        break;\r\n\r\n      case \"warning\":\r\n\r\n        actualClass += ' yeti-toast-warning';\r\n        altText = (altText != '') ? altText : 'Warning';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n      case \"warningAlt\":\r\n\r\n        actualClass += ' yeti-toast-warning_alt';\r\n        altText = (altText != '') ? altText : 'Warning';\r\n        iconCode = (iconCode != '') ? iconCode : 'warning';\r\n        break;\r\n\r\n      case \"\":\r\n      default:\r\n        altText = (altText != '') ? altText : 'Error';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n    }\r\n    \r\n\r\n    // Set low-contrast mode\r\n    actualClass += (this.isHighContrast) ? ' yeti-toast-high_contrast' : '';\r\n\r\n\r\n    // Set visibility\r\n    actualClass += (this.isVisible) ? '' : ' yeti-toast__hidden';\r\n  \r\n\r\n    return (\r\n      <div class={wrapperClass}>\r\n\r\n        <div class={actualClass} id={this.toastId} role=\"status\">\r\n\r\n          <div class=\"yeti-toast-icon\">\r\n            \r\n            <span class=\"material-icons\" aria-hidden=\"true\">{iconCode}</span>\r\n            <span class=\"yeti-a11y-hidden\">{altText}</span>\r\n\r\n          </div>\r\n\r\n\r\n          <div class=\"yeti-toast-content\">\r\n\r\n            <div class=\"yeti-toast-content-text\">\r\n          \r\n              {\r\n                (this.textTitle != \"\") ?\r\n                  <div class=\"yeti-toast-content-text-title\">{this.textTitle}</div>\r\n                :\r\n                  ''\r\n              }\r\n              <div class=\"yeti-toast-content-text-copy\">\r\n\r\n                <slot />\r\n\r\n              </div>\r\n\r\n            </div>\r\n\r\n\r\n            {\r\n              (this.actionLabel != \"\") ?\r\n\r\n                <button class=\"yeti-toast-action yeti-button yeti-button-tertiary yeti-button-size-xs\" onClick={(e) => this.handleActionClick(e)}>\r\n                  {this.actionLabel}\r\n                </button>\r\n              :\r\n                \"\"\r\n            }\r\n\r\n          </div>\r\n\r\n          {\r\n            (this.showCloseButton) ?\r\n\r\n              <button class=\"yeti-toast-close\" onClick={(e) => this.handleCloseClick(e)}>\r\n                <span class=\"material-icons\">close</span>\r\n              </button>\r\n            :\r\n              \"\"\r\n          }\r\n\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}"],"mappings":"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","ignoreList":[]}