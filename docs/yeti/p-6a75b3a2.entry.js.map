{"version":3,"names":["YetiCombobox","handleValueChange","this","updateOptions","handleSelectionTypeChange","selectionType","handleDefocusingClick","el","querySelectorAll","length","isOpen","closeFlyout","handleClick","ev","isTouched","toggleFlyout","preventDefault","handleButtonClick","handleKeydown","key","toString","toLowerCase","shiftKey","value","cursorPosition","options","openFlyout","target","classList","contains","click","handleOptionClick","option","selected","label","match","handleClearSelections","fieldElement","querySelector","focus","stopPropagation","readyToVerifySlow","emit","readyToVerifyFast","handleInputChange","foundASelectionAlready","isFilterable","indexOf","isVisible","handleFieldBlur","parseOptionElements","i","item","tagName","optionId","hasAttribute","getAttribute","push","innerHTML","id","j","remove","getPlaceholderDisplay","placeholder","clickedOption","input","componentWillLoad","optionElements","children","componentId","utils","generateUniqueId","setAttribute","inputId","buttonId","dropdownId","inputName","render","wrapperCss","dropdownCss","activeDescendantId","isValid","menuAlignment","h","class","onClick","Object","assign","type","name","onFocus","onBlur","e","onInput","role","autocomplete","inputDescribedBy","showClear","title","tabIndex","isLookup","iconCode","alt","map","optionClass","componentDidRender","dropdown","hoveredOption","thingToScrollIntoView","scrollIntoView","behavior","block"],"sources":["src/components/yeti-combobox/yeti-combobox.tsx"],"sourcesContent":["import { Component, Watch, Prop, h, State, Event, EventEmitter, Element, Listen, /*Watch*/ } from '@stencil/core';\r\nimport { utils, YetiComboboxOption } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-combobox',\r\n  shadow: false,\r\n})\r\nexport class YetiCombobox {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Fires when the user has made a selection and closed the dropdown (usually by focusing elsewhere).\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifySlow: EventEmitter<CustomEvent>;\r\n\r\n  /**\r\n   * Fires when the user clicks an option or types in the input field.\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifyFast: EventEmitter<CustomEvent>;\r\n\r\n  /**\r\n   * CSS classlist to add to the component's outer wrapper element.\r\n   */\r\n  @Prop({ attribute: 'wrapper-class'}) wrapperCss: string = '';\r\n\r\n  /**\r\n   * Whether the component requires a valid value.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  /**\r\n   * Token list of left | right and/or above | below that describes the drop-down's visual position relative to the closed state anchor.\r\n   */\r\n  @Prop() menuAlignment: string = \"\";\r\n\r\n  /**\r\n   * Whether the component has a valid value.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean;\r\n\r\n  /**\r\n   * The component's value.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) value: string = '';\r\n \r\n  @Watch(\"value\")\r\n  handleValueChange() {\r\n    this.updateOptions();\r\n  }\r\n\r\n  /**\r\n   * Text that appears in the closed state/anchor when there are no selections.\r\n   */\r\n  @Prop() placeholder: string = \"- Select -\";\r\n\r\n  /**\r\n   * Array of YetiComboboxOptions that describes the component's internal representation of its options. See utils.js for more detail.\r\n   */\r\n  @State() options: YetiComboboxOption[] = [];\r\n\r\n  /**\r\n   * Whether or not the user has interacted with the component (i.e. focused and blurred).\r\n   */\r\n  @State() isTouched: boolean = false;\r\n\r\n  /**\r\n   * Toggle to re-render the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether or not the drop-down is open/visible or not.\r\n   */\r\n  @State() isOpen: boolean = false;\r\n\r\n  /**\r\n   * 0-based index of the currently focused option.\r\n   */\r\n  @State() cursorPosition: number = -1;\r\n\r\n  /**\r\n   * Whether or not to show the optional Clear all selections puck.\r\n   */\r\n  @Prop() showClear: boolean = true;\r\n\r\n  /**\r\n   * Optionally provide an id for the combobox element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputId: string = \"\";\r\n\r\n  /**\r\n   * Optionally provide a form element name.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputName: string = \"\";\r\n\r\n  /**\r\n   * Optionally provide the id of a describing element (like an input tip).\r\n   */\r\n  @Prop({ attribute: 'input-describedby'}) inputDescribedBy: string = \"\";\r\n\r\n  /**\r\n   * Use the Lookup style (i.e. swap the caret for a search icon)\r\n   */\r\n  @Prop() isLookup: boolean = false;\r\n\r\n  /**\r\n   * Whether the options list should be filtered by the text input\r\n   */\r\n  @Prop() isFilterable: boolean = false;\r\n\r\n  /**\r\n   * Whether/how changes to the text field value select an option from the list. Possible values are \"manual\" (default) and \"automatic\". Any value other than \"automatic\" will equal manual.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) selectionType?: string = \"manual\";\r\n \r\n  @Watch(\"selectionType\")\r\n  handleSelectionTypeChange() {\r\n    // Make sure selection type is a valid value.\r\n    this.selectionType = (this.selectionType == \"automatic\") ? this.selectionType : \"manual\";\r\n  }\r\n\r\n\r\n  // These will be initialized on component load\r\n  componentId: string;\r\n  buttonId: string;\r\n  dropdownId: string;\r\n\r\n\r\n\r\n  @Listen(\"click\", {\r\n    target: \"body\"\r\n  })\r\n  handleDefocusingClick() {\r\n    if (this.el.querySelectorAll(\":focus\").length == 0 && this.isOpen) {\r\n      this.closeFlyout();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleClick(ev) {\r\n    this.isTouched = true;\r\n    this.toggleFlyout();\r\n    ev.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  handleButtonClick(ev) {\r\n    ev.preventDefault();\r\n    // Otherwise just let the handleClick function do the rest.\r\n  }\r\n\r\n\r\n\r\n  @Listen(\"keydown\")\r\n  handleKeydown(ev: KeyboardEvent) {\r\n\r\n    let key = ev.key.toString().toLowerCase();\r\n\r\n    switch (key) {\r\n\r\n      // Handle potential tabout\r\n      case \"tab\": {\r\n\r\n        // Normal tab direction\r\n        if (!ev.shiftKey) {\r\n\r\n          if (this.el.querySelectorAll(\".yeti-combobox-input:focus\").length == 0 || this.value == \"\") {\r\n            this.closeFlyout();\r\n          }\r\n\r\n        // Shift tab direction (backwards)\r\n        } else {\r\n\r\n          if (this.el.querySelectorAll(\".yeti-combobox-input:focus\").length > 0) {\r\n            this.closeFlyout();\r\n          }\r\n\r\n        }\r\n        \r\n        break;\r\n      }\r\n\r\n\r\n      // Handle arrow navigation\r\n      case \"arrowdown\": {\r\n\r\n        if (this.isOpen) {\r\n          this.cursorPosition = (this.cursorPosition + 1) % this.options.length;\r\n          ev.preventDefault();\r\n        } else {\r\n\r\n          this.cursorPosition = (ev.altKey) ? this.cursorPosition : 0;\r\n          this.openFlyout();\r\n          ev.preventDefault();\r\n\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle arrow navigation\r\n      case \"arrowup\": {\r\n\r\n        if (this.isOpen) {\r\n          this.cursorPosition = (this.cursorPosition - 1 + this.options.length) % this.options.length;\r\n          ev.preventDefault();\r\n        } else {\r\n\r\n          this.cursorPosition = this.options.length - 1;\r\n          this.openFlyout();\r\n          ev.preventDefault();\r\n\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle escape navigation\r\n      case \"escape\": {\r\n\r\n        if (this.isOpen) {\r\n          this.closeFlyout();\r\n          ev.preventDefault();\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle dropdown open/close toggling enter/space or selection-making enter/space\r\n      case \"enter\": {\r\n\r\n        // Check to see if this happened while selecting something.\r\n        ev.preventDefault();\r\n        let target = ev.target as HTMLElement;\r\n\r\n        // First check if the clear everything puck has focus\r\n        if (target.classList.contains(\"yeti-combobox-clear\")) {\r\n          target.click();\r\n          break;\r\n        } \r\n        \r\n        else {\r\n          \r\n          // Next check if the cursor is on a selection and the flyout is open\r\n          if (this.cursorPosition >= 0 && this.isOpen) {\r\n            // Toggle selection on the option at this cursor position.\r\n            this.handleOptionClick(this.cursorPosition);\r\n          }\r\n          \r\n          // Finally, if the selection type is automatic, and there's at least one option selected, set the value to its label.\r\n          if (this.selectionType == \"automatic\") {\r\n            for (let option of this.options) {\r\n              if (option.selected) {\r\n                this.value = option.label;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          \r\n          this.closeFlyout();\r\n        }\r\n\r\n        break;\r\n      }\r\n      \r\n      default: {\r\n        // If the user is trying to type a letter or number then open the flyout\r\n        if (key.length == 1 && key.match(/[a-zA-Z0-9]/)) {\r\n          this.openFlyout();\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleClearSelections(ev: Event) {\r\n    let fieldElement = this.el.querySelector(\".yeti-combobox-input\") as HTMLElement;\r\n    for (let option of this.options) {\r\n      option.selected = false;\r\n    }\r\n    this.value = \"\";\r\n    fieldElement.focus();\r\n    ev.stopPropagation();\r\n    this.readyToVerifySlow.emit();\r\n    this.readyToVerifyFast.emit();\r\n  }\r\n\r\n\r\n\r\n  handleInputChange(ev) {\r\n    this.value = ev.target.value;\r\n  }\r\n\r\n\r\n\r\n  updateOptions() {\r\n    // Based on the (new) value of this.value, set the options' status\r\n    let foundASelectionAlready = false;\r\n\r\n    for (let option of this.options) {\r\n      option.selected = (option.label.toLowerCase() == this.value.toLowerCase());\r\n\r\n      // Determine whether to show this option or not based on filtering\r\n      if (this.isFilterable && option.label.toLowerCase().indexOf( this.value.toLowerCase() ) < 0) {\r\n        option.isVisible = false;\r\n      } else {\r\n        option.isVisible = true;\r\n      }\r\n\r\n      // Determine whether to mark this option as selected based on selection type\r\n      if (this.selectionType == \"automatic\") {\r\n\r\n        // If this is a match, and we don't already have one, mark this one as selected. Otherwise set it as unselected.\r\n        if (!foundASelectionAlready\r\n            && this.value != \"\"\r\n            && option.label.toLowerCase().indexOf( this.value.toLowerCase() ) >= 0 \r\n        ) {\r\n          option.selected = true;\r\n          foundASelectionAlready = true;\r\n        } else {\r\n          option.selected = false;\r\n        }\r\n\r\n      }\r\n      \r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  openFlyout() {\r\n    this.isOpen = true;\r\n  }\r\n\r\n\r\n\r\n  closeFlyout() {\r\n    this.isOpen = false;\r\n    // this.cursorPosition = -1;\r\n    this.isTouched = true;\r\n    this.readyToVerifySlow.emit();\r\n  }\r\n\r\n\r\n\r\n  toggleFlyout() {\r\n    if (this.isOpen) {\r\n      this.closeFlyout()\r\n    } else {\r\n      this.openFlyout();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleFieldBlur(ev) {\r\n    this.isTouched = true;\r\n    \r\n    // If selection type is automatic, update value with the first selected option.\r\n    if (this.selectionType == \"automatic\") {\r\n      for (let option of this.options) {\r\n        if (option.selected) {\r\n          this.value = option.label;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.readyToVerifySlow.emit(ev);\r\n  }\r\n\r\n\r\n\r\n  parseOptionElements(options: HTMLCollection) {\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      \r\n      let option = options.item(i);\r\n      \r\n      // First, confirm this element is indeed a yeti-combobox-option element.\r\n      if (option.tagName.toLowerCase() == 'yeti-combobox-option') {\r\n\r\n        let optionId;\r\n\r\n        if (option.hasAttribute(\"id\")) {\r\n          optionId = option.getAttribute(\"id\");\r\n        } else {\r\n          optionId = `${this.el.getAttribute(\"id\")}_option${i}`;\r\n        }\r\n\r\n        this.options.push({\r\n          selected: (option.hasAttribute(\"selected\") || option.innerHTML == this.value),\r\n          label: option.innerHTML,\r\n          isVisible: true,\r\n          id: optionId\r\n        });\r\n\r\n        if (option.hasAttribute(\"selected\")) {\r\n          this.value = option.innerHTML;\r\n        }\r\n\r\n      }\r\n\r\n    } // End for\r\n\r\n    // Finally, we need to remove the option elements.\r\n    for (let j = options.length - 1; j >= 0; --j) {\r\n      options.item(j).remove();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  getPlaceholderDisplay() {\r\n    // Returns the string of text that should go in the placeholder area.\r\n    return (this.value != \"\") ? this.value : this.placeholder;\r\n  }\r\n\r\n\r\n\r\n  handleOptionClick(i: number) {\r\n    // i = options index\r\n    let clickedOption = this.options[i];\r\n    let input = this.el.querySelector(\".yeti-combobox-input\") as HTMLInputElement;\r\n\r\n    // Set selected state of each option\r\n    for (let j = 0; j < this.options.length; j++) {\r\n      this.options[j].selected = (i == j);\r\n    }\r\n\r\n    // Update value, close dropdown, refocus, and fire events\r\n    this.value = clickedOption.label;\r\n    this.closeFlyout();\r\n    input.focus();\r\n    this.readyToVerifyFast.emit();\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids and handle any <yeti-combobox-option> elements\r\n    let optionElements = this.el.children;\r\n\r\n    // Set up ids\r\n    this.componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!this.componentId || this.componentId == \"\") {\r\n      this.componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", this.componentId);\r\n    }\r\n\r\n    this.inputId = (this.inputId != \"\") ? this.inputId : this.componentId + \"_input\";\r\n    this.buttonId = this.componentId + \"_button\";\r\n    this.dropdownId = this.componentId + \"_dropdown\";\r\n\r\n    this.inputName = (this.inputName != \"\") ? this.inputName : this.inputId; // If the user supplied a name, use it, otherwise just re-use the id.\r\n\r\n    // Look for and handle any <yeti-combobox-option> elements.\r\n    if (optionElements.length > 0) {\r\n      this.parseOptionElements(optionElements);\r\n    }\r\n\r\n    // Make sure selection type is a valid value.\r\n    this.selectionType = (this.selectionType == \"automatic\") ? this.selectionType : \"manual\";\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperCss = 'yeti-combobox-wrapper';\r\n    let dropdownCss = 'yeti-combobox-dropdown';\r\n    let activeDescendantId = (this.isOpen && this.cursorPosition != -1) ? `${this.componentId}_option${this.cursorPosition}` : ``; // If there is an active descendant (i.e. the menu is open and one of the options has the cursor highlight) then its id will look something like componentId_option3.\r\n\r\n    wrapperCss += (this.wrapperCss == \"\") ? '' : ` ${this.wrapperCss}`;\r\n\r\n    if (this.isValid == false) {\r\n      wrapperCss += ' yeti-combobox__error';\r\n    }\r\n\r\n    dropdownCss += (this.isOpen) ? \" yeti-combobox-dropdown__open\" : \"\";\r\n\r\n    if (this.menuAlignment == \"right\") {\r\n      dropdownCss += ' yeti-combobox-dropdown-align-right'\r\n    }\r\n\r\n    return ([\r\n      <div class={wrapperCss}>\r\n\r\n        <div \r\n          class=\"yeti-combobox\"\r\n          onClick={(ev) => this.handleClick(ev)}\r\n        >\r\n\r\n          <input \r\n            type=\"text\" \r\n            class=\"yeti-combobox-input\" \r\n            // title={this.value}\r\n            value={this.value}\r\n            name={this.inputName}\r\n            onFocus={() => {\r\n              this.isTouched = true;\r\n            }}\r\n            onBlur={(e) => {\r\n              this.handleFieldBlur(e);\r\n            }}\r\n            onInput={(ev) => this.handleInputChange(ev)}\r\n            role=\"combobox\"\r\n            autocomplete=\"off\"\r\n            aria-autocomplete=\"none\"\r\n            aria-controls={this.dropdownId}\r\n            aria-expanded={this.isOpen}\r\n            id={this.inputId}\r\n            {...(this.inputDescribedBy != \"\") ? { \"aria-describedby\" : this.inputDescribedBy } : {}}\r\n            {...(activeDescendantId != \"\") ? { \"aria-activedescendant\" : activeDescendantId } : {}}\r\n          />\r\n\r\n          { (this.showClear && this.value != '') ? \r\n\r\n            (<button class=\"yeti-combobox-clear\" title=\"Clear all selections\" onClick={ (ev) => { this.handleClearSelections(ev); ev.preventDefault() }}>\r\n              <span class=\"material-icons yeti-combobox-clear-icon\" aria-hidden=\"true\">clear</span>\r\n            </button>)\r\n\r\n          :\r\n\r\n            \"\"\r\n\r\n          }\r\n\r\n          <button \r\n            class=\"yeti-combobox-button\" \r\n            tabIndex={-1}\r\n            aria-controls={this.dropdownId}\r\n            aria-expanded={this.isOpen}\r\n            id={this.buttonId}\r\n            onClick={(ev) => { this.handleButtonClick(ev) }}\r\n          >\r\n            {\r\n              (!this.isLookup) ?\r\n\r\n                <yeti-icon iconCode={(this.isOpen ? 'expand_less' : 'expand_more')} alt={(this.isOpen ? 'close' : 'open')}></yeti-icon>\r\n\r\n              :\r\n\r\n                <yeti-icon iconCode='search' alt={(this.isOpen ? 'lookup, close' : 'lookup, open')}></yeti-icon>\r\n\r\n            }\r\n            \r\n          </button>\r\n\r\n        </div>\r\n\r\n        \r\n        <div class={dropdownCss}>\r\n        \r\n          <ul\r\n            class=\"yeti-combobox-options\"\r\n            id={this.dropdownId}\r\n            role=\"listbox\"\r\n          >\r\n\r\n            {this.options.map((option, i) => {\r\n\r\n                let optionClass = (this.cursorPosition == i) ? \"yeti-combobox-option yeti-combobox-option__hover\" : \"yeti-combobox-option\";\r\n                optionClass += (option.selected) ? \" yeti-combobox-option__selected\" : \"\";\r\n\r\n                // Only render visible options\r\n                if (!option.isVisible) {\r\n                  return \"\";\r\n                }\r\n              \r\n                return (\r\n                  <li \r\n                    id={option.id} \r\n                    key={option.id} \r\n                    role=\"option\"\r\n                    aria-selected={`${option.selected}`}\r\n                    class={optionClass}\r\n                    onClick={(ev) => { this.handleOptionClick(i); ev.preventDefault(); }}\r\n                  >\r\n\r\n                      <span class=\"yeti-combobox-option-label\">{option.label}</span>\r\n                      <span class=\"yeti-combobox-option-checkmark\" aria-hidden='true'>\r\n                        {(option.selected) ? \r\n                        \r\n                          <yeti-icon iconCode='checkmark'></yeti-icon>\r\n\r\n                        :\r\n\r\n                          ''\r\n\r\n                        }\r\n                      </span>\r\n\r\n                  </li>\r\n                )\r\n              }\r\n            \r\n            )}\r\n\r\n          </ul>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    // If the cursor is over an option, make sure it's visible.\r\n    if (this.isOpen) {\r\n      // The facade dropdown is open. If one of the options is being hovered over then we want to scroll it into view.\r\n      // If not, then we'll scroll the whole dropdown into view.\r\n      let dropdown = this.el.querySelector(\".yeti-combobox-dropdown\");\r\n      let hoveredOption = this.el.querySelector(\".yeti-combobox-option__hover\");\r\n      let thingToScrollIntoView = (hoveredOption) ? hoveredOption : dropdown;\r\n      thingToScrollIntoView.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\"\r\n      });\r\n    }\r\n  }\r\n\r\n}"],"mappings":"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","ignoreList":[]}