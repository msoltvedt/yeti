{"file":"yeti-input.entry.esm.js","mappings":";;;MAOa,SAAS;;;;;sBAeS,EAAE;mBAEL,KAAK,CAAC,gBAAgB,EAAE;qBAEtB,IAAI,CAAC,OAAO;oBAEZ,KAAK;;iBAUd,EAAE;uBAES,EAAE;qBAEF,KAAK;;EA9BnC,WAAW,CAAC,EAAE;IACZ,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACtB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GACjC;EA4BD,eAAe,CAAC,EAAE;IAChB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACtB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;IAC7B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GACjC;EAED,MAAM;IAEJ,IAAI,UAAU,GAAG,YAAY,CAAC;IAE9B,IAAI,IAAI,CAAC,UAAU,IAAI,EAAE,EAAE;MACzB,UAAU,IAAI,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;KACrC;IAED,IAAI,IAAI,CAAC,OAAO,IAAI,KAAK,EAAE;MACzB,UAAU,IAAI,oBAAoB,CAAC;KACpC;IAED,QACE,2BACE,IAAI,EAAC,MAAM,EACX,KAAK,EAAE,UAAU,EACjB,EAAE,EAAE,IAAI,CAAC,OAAO,EAChB,IAAI,EAAE,IAAI,CAAC,SAAS,EACpB,KAAK,EAAE,IAAI,CAAC,KAAK,EACjB,MAAM,EAAE,CAAC,EAAE,KAAK,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,kBAC1B,CAAC,IAAI,CAAC,OAAO,KACtB,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,IAAI,EAAC,kBAAkB,EAAE,IAAI,CAAC,WAAW,EAAC,GAAG,EAAE,GAC3E,EACF;GACH;;;;;;","names":[],"sources":["src/components/yeti-input/yeti-input.tsx"],"sourcesContent":["import { Component, Prop, h, State, Event, EventEmitter, Listen, Element } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-input',\n  shadow: false,\n})\nexport class YetiInput {\n\n  @Element() el: HTMLElement;\n\n  @Listen('keyup')\n  handleKeyUp(ev) {\n    this.isTouched = true;\n    this.value = ev.target.value;\n    this.readyToVerifyFast.emit(ev);\n  }\n\n  @Event({ bubbles: true }) readyToVerifySlow: EventEmitter<CustomEvent>;\n\n  @Event({ bubbles: true }) readyToVerifyFast: EventEmitter<CustomEvent>;\n\n  @Prop() inputClass: string = '';\n\n  @Prop() inputId: string = utils.generateUniqueId();\n\n  @Prop() inputName: string = this.inputId;\n\n  @Prop() required: boolean = false;\n\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) isValid: boolean;\n\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) value: string = '';\n\n  @Prop() describedBy: string = \"\";\n\n  @State() isTouched: boolean = false;\n\n  handleFieldBlur(ev) {\n    this.isTouched = true;\n    this.value = ev.target.value;\n    this.readyToVerifySlow.emit(ev);\n  }\n\n  render() {\n\n    let cssClasses = 'yeti-input';\n\n    if (this.inputClass != '') {\n      cssClasses += ' ' + this.inputClass;\n    }\n\n    if (this.isValid == false) {\n      cssClasses += ' yeti-input__error';\n    }\n\n    return (\n      <input \n        type=\"text\" \n        class={cssClasses} \n        id={this.inputId}\n        name={this.inputName}\n        value={this.value}\n        onBlur={(ev) => this.handleFieldBlur(ev)}\n        aria-invalid={!this.isValid}\n        {...((this.describedBy != \"\") ? {\"aria-describedby\": this.describedBy} : {})}\n      />\n    );\n  }\n\n}\n"],"version":3}