{"version":3,"names":["YetiInput","utils","generateUniqueId","this","inputId","handleKeyUp","ev","isTouched","value","target","readyToVerifyFast","emit","handleClearClick","el","querySelector","focus","preventDefault","searchFieldClear","handleFieldBlur","stopImmediatePropagation","readyToVerifySlow","render","cssClasses","clearButtonClass","inputClass","isValid","h","class","Object","assign","type","id","name","inputName","onKeyUp","onBlur","describedBy","description","placeholder","onClick"],"sources":["src/components/yeti-input/yeti-input.tsx"],"sourcesContent":["import { Component, Prop, h, State, Event, EventEmitter, Element } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-input',\n  shadow: false,\n})\nexport class YetiInput {\n\n  @Element() el: HTMLElement;\n\n  /**\n   * Event that fires when the user leaves (blurs) the input field.\n   */\n  @Event({ bubbles: true }) readyToVerifySlow: EventEmitter<CustomEvent>;\n\n  /**\n   * Event that fires when the user enters or changes the contents of the input field.\n   */\n  @Event({ bubbles: true }) readyToVerifyFast: EventEmitter<CustomEvent>;\n\n  /**\n   * Event that fires when the field is a search field and the user hits the clear button within it.\n   */\n  @Event({ bubbles: true }) searchFieldClear: EventEmitter<CustomEvent>;\n\n  /**\n   * CSS classlist applied to the actual HTML input element.\n   */\n  @Prop() inputClass: string = '';\n\n  /**\n   * id applied to the actual HTML input element.\n   */\n  @Prop() inputId: string = utils.generateUniqueId();\n\n  /**\n   * name applied to the actual HTML input element. Defaults to match id.\n   */\n  @Prop() inputName: string = this.inputId;\n\n  /**\n   * Whether the field is required to have a valid value or not.\n   */\n  @Prop() required: boolean = false;\n\n  /**\n   * What type of input element this is; defaults to \"text\".\n   */\n  @Prop() type?: string = \"text\";\n\n  /**\n   * Tracks whether the input's current value is valid or not.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) isValid: boolean;\n\n  /**\n   * The actual value of the input field.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) value: string = '';\n\n  /**\n   * id of an outside HTML element pointed to by the actual input element's aria-describedby attribute.\n   */\n  @Prop() describedBy?: string = \"\";\n\n  /**\n   * Text description of what the input is or does\n   */\n  @Prop() description?: string = \"\";\n\n  /**\n   * Standard old-school input placeholder\n   */\n  @Prop() placeholder?: string = \"\";\n\n  /**\n   * Whether the user has focused and left (i.e. interacted with) the actual input element.\n   */\n  @State() isTouched: boolean = false;\n\n  \n\n  handleKeyUp(ev) {\n    this.isTouched = true;\n    this.value = ev.target.value;\n    this.readyToVerifyFast.emit(ev);\n  }\n\n\n\n  handleClearClick(ev) {\n    this.value = \"\";\n    (this.el.querySelector(\".yeti-input\") as HTMLInputElement).focus();\n    ev.preventDefault();\n    this.searchFieldClear.emit(ev);\n    return false;\n  }\n\n\n\n  handleFieldBlur(ev) {\n    ev.stopImmediatePropagation();\n    this.isTouched = true;\n    this.value = ev.target.value;\n    this.readyToVerifySlow.emit(ev);\n  }\n\n\n\n  render() {\n\n    let cssClasses = 'yeti-input';\n    let clearButtonClass = (this.value != \"\") ? 'yeti-input-clear' : 'yeti-input-clear yeti-input-clear__inert';\n\n    if (this.inputClass != '') {\n      cssClasses += ' ' + this.inputClass;\n    }\n\n    if (this.isValid == false) {\n      cssClasses += ' yeti-input__error';\n    }\n\n    return (\n      <div class=\"yeti-input-wrapper\">\n\n        <input \n          type={this.type} \n          class={cssClasses} \n          id={this.inputId}\n          name={this.inputName}\n          value={this.value}\n          onKeyUp={(ev) => this.handleKeyUp(ev)}\n          onBlur={(ev) => this.handleFieldBlur(ev)}\n          aria-invalid={!this.isValid}\n          {...((this.describedBy != \"\") ? {\"aria-describedby\": this.describedBy} : {})}\n          {...((this.description != \"\") ? {\"aria-description\": this.description} : {})}\n          {...((this.placeholder != \"\") ? {\"placeholder\": this.placeholder} : {})}\n        />\n\n        <button class={clearButtonClass} onClick={(ev) => this.handleClearClick(ev)}>\n          <span class=\"material-icons yeti-size-4 yeti-typo-size-4\" aria-hidden=\"true\">close</span>\n          <span class=\"yeti-a11y-hidden\">clear</span>\n        </button>\n        \n\n      </div>\n    );\n  }\n\n}\n"],"mappings":"mGAOaA,EAAS,M,sMAsBS,G,aAKHC,EAAMC,mB,eAKJC,KAAKC,Q,cAKL,M,UAKJ,O,kCAgBL,G,iBAKY,G,iBAKA,G,iBAKA,G,eAKD,K,CAI9B,WAAAC,CAAYC,GACVH,KAAKI,UAAY,KACjBJ,KAAKK,MAAQF,EAAGG,OAAOD,MACvBL,KAAKO,kBAAkBC,KAAKL,E,CAK9B,gBAAAM,CAAiBN,GACfH,KAAKK,MAAQ,GACZL,KAAKU,GAAGC,cAAc,eAAoCC,QAC3DT,EAAGU,iBACHb,KAAKc,iBAAiBN,KAAKL,GAC3B,OAAO,K,CAKT,eAAAY,CAAgBZ,GACdA,EAAGa,2BACHhB,KAAKI,UAAY,KACjBJ,KAAKK,MAAQF,EAAGG,OAAOD,MACvBL,KAAKiB,kBAAkBT,KAAKL,E,CAK9B,MAAAe,GAEE,IAAIC,EAAa,aACjB,IAAIC,EAAoBpB,KAAKK,OAAS,GAAM,mBAAqB,2CAEjE,GAAIL,KAAKqB,YAAc,GAAI,CACzBF,GAAc,IAAMnB,KAAKqB,U,CAG3B,GAAIrB,KAAKsB,SAAW,MAAO,CACzBH,GAAc,oB,CAGhB,OACEI,EAAA,OAAKC,MAAM,sBAETD,EAAA,QAAAE,OAAAC,OAAA,CACEC,KAAM3B,KAAK2B,KACXH,MAAOL,EACPS,GAAI5B,KAAKC,QACT4B,KAAM7B,KAAK8B,UACXzB,MAAOL,KAAKK,MACZ0B,QAAU5B,GAAOH,KAAKE,YAAYC,GAClC6B,OAAS7B,GAAOH,KAAKe,gBAAgBZ,GAAG,gBACzBH,KAAKsB,SACdtB,KAAKiC,aAAe,GAAM,CAAC,mBAAoBjC,KAAKiC,aAAe,GACnEjC,KAAKkC,aAAe,GAAM,CAAC,mBAAoBlC,KAAKkC,aAAe,GACnElC,KAAKmC,aAAe,GAAM,CAACA,YAAenC,KAAKmC,aAAe,KAGtEZ,EAAA,UAAQC,MAAOJ,EAAkBgB,QAAUjC,GAAOH,KAAKS,iBAAiBN,IACtEoB,EAAA,QAAMC,MAAM,8CAA6C,cAAa,QAAM,SAC5ED,EAAA,QAAMC,MAAM,oBAAkB,U"}