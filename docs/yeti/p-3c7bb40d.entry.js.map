{"version":3,"names":["YetiTableActions","parseTableActionElements","actionElementsWithoutGridColumnsSpecified","this","el","querySelectorAll","actionElementsWithGridColumnsSpecified","numberOfGridColumns","gridColumnsAvailable","genericColumns","forEach","actionElement","spanAttribute","parseInt","getAttribute","span","isNaN","className","existingClasses","setAttribute","length","console","warn","Math","floor","i","isLastElementWithoutColumnsSpecified","componentWillLoad","componentId","parent","parentElement","parentId","utils","generateUniqueId","htmlId","render","cssClasses","cssClass","h","class","id"],"sources":["src/components/yeti-table-actions/yeti-table-actions.tsx"],"sourcesContent":["import { Component, Prop, h, Element } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-table-actions',\n  shadow: false,\n})\nexport class YetiTableActions {\n\n  @Element() el: HTMLElement;\n\n  /**\n   * CSS classlist to add to the actual element serving as the component's wrapper.\n   */\n  @Prop() cssClass: string = '';\n\n  /**\n   * id value of the actual element serving as the component's wrapper. Will be auto-generated with a unique value if not provided.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) htmlId: string = \"\"; // Set on component load\n\n  /**\n   * Whether or not to use the Yeti Grid system to lay out child options.\n   */\n  @Prop() useGrid: boolean = false;\n\n\n\n  parseTableActionElements() {\n    let actionElementsWithoutGridColumnsSpecified = this.el.querySelectorAll('yeti-table-action:not([grid-columns]), yeti-table-pagination:not([grid-columns])');\n    let actionElementsWithGridColumnsSpecified = this.el.querySelectorAll('[grid-columns]');\n    const numberOfGridColumns = 16;\n    let gridColumnsAvailable = numberOfGridColumns;\n    let genericColumns; // This will eventually be what column span to give actions that didn't specify that.\n\n    // actionElement... is the outer, <yeti-*> wrapper element. Since their parent is the grid container, we need to apply\n    // the grid cell styling directly to this element.\n    \n    // First handle the actions that have a grid-columns attribute.\n    actionElementsWithGridColumnsSpecified.forEach((actionElement) => {\n      \n      let spanAttribute = parseInt(actionElement.getAttribute('grid-columns'));\n      let span = (isNaN(spanAttribute)) ? 1 : spanAttribute;\n      let className = 'yeti-grid-column-' + span;\n      let existingClasses = actionElement.getAttribute(\"class\");\n      existingClasses = (existingClasses) ? existingClasses : '';\n\n      actionElement.setAttribute('class', `${existingClasses} ${className}`);\n      gridColumnsAvailable -= span;\n\n    });\n\n    if (gridColumnsAvailable < actionElementsWithoutGridColumnsSpecified.length) {\n      console.warn('Table actions must use a total of no more than 16 columns.');\n    }\n\n    genericColumns = Math.floor( gridColumnsAvailable / actionElementsWithoutGridColumnsSpecified.length );\n    \n    // Second divvy up the remaining grid columns amongst the actions that don't have a grid-columns attribute.\n    for (let i = 0; i < actionElementsWithoutGridColumnsSpecified.length; i++) {\n      \n      let actionElement = actionElementsWithoutGridColumnsSpecified[i];\n      let isLastElementWithoutColumnsSpecified = ((i+1) == actionElementsWithoutGridColumnsSpecified.length) ? true : false;\n      let span = (isLastElementWithoutColumnsSpecified) ? gridColumnsAvailable : genericColumns;\n      let className = 'yeti-grid-column-' + span;\n      let existingClasses = actionElement.getAttribute(\"class\");\n      existingClasses = (existingClasses) ? existingClasses : '';\n\n      actionElement.setAttribute('class', `${existingClasses} ${className}`);\n      gridColumnsAvailable -= span;\n\n    }\n  }\n\n\n\n  componentWillLoad() {\n    // Set up ids and parse table action HTML elements\n\n    // Set up ids\n    let componentId = this.el.getAttribute(\"id\");\n    let parent = this.el.parentElement;\n    let parentId = (parent && parent.getAttribute(\"id\")) ? parent.getAttribute(\"id\") : utils.generateUniqueId();\n\n    if (!componentId || componentId == \"\") {\n\n      componentId = `${parentId}_actionsComponent`;\n      this.el.setAttribute(\"id\", componentId);\n\n    }\n\n    this.htmlId = (this.htmlId != \"\") ? this.htmlId : `${parentId}_actions`;\n\n    // Parse children \n    this.parseTableActionElements();\n  }\n\n\n\n  render() {\n\n    let cssClasses = 'yeti-table-actions';\n\n    cssClasses += (this.useGrid) ? ' yeti-grid yeti-grid-gapless yeti-grid-gutterless' : '';\n\n    if (this.cssClass != '') {\n      cssClasses += ' ' + this.cssClass;\n    }\n\n    return (\n      <div class={cssClasses} id={this.htmlId}><slot /></div>\n    );\n  }\n\n}\n"],"mappings":"4FAOaA,EAAgB,M,uCAOA,G,YAQP,G,aAKO,K,CAI3B,wBAAAC,GACE,IAAIC,EAA4CC,KAAKC,GAAGC,iBAAiB,oFACzE,IAAIC,EAAyCH,KAAKC,GAAGC,iBAAiB,kBACtE,MAAME,EAAsB,GAC5B,IAAIC,EAAuBD,EAC3B,IAAIE,EAMJH,EAAuCI,SAASC,IAE9C,IAAIC,EAAgBC,SAASF,EAAcG,aAAa,iBACxD,IAAIC,EAAQC,MAAMJ,GAAkB,EAAIA,EACxC,IAAIK,EAAY,oBAAsBF,EACtC,IAAIG,EAAkBP,EAAcG,aAAa,SACjDI,EAAkB,EAAoBA,EAAkB,GAExDP,EAAcQ,aAAa,QAAS,GAAGD,KAAmBD,KAC1DT,GAAwBO,CAAI,IAI9B,GAAIP,EAAuBN,EAA0CkB,OAAQ,CAC3EC,QAAQC,KAAK,6D,CAGfb,EAAiBc,KAAKC,MAAOhB,EAAuBN,EAA0CkB,QAG9F,IAAK,IAAIK,EAAI,EAAGA,EAAIvB,EAA0CkB,OAAQK,IAAK,CAEzE,IAAId,EAAgBT,EAA0CuB,GAC9D,IAAIC,EAAyCD,EAAE,GAAMvB,EAA0CkB,OAAU,KAAO,MAChH,IAAIL,EAAO,EAAyCP,EAAuBC,EAC3E,IAAIQ,EAAY,oBAAsBF,EACtC,IAAIG,EAAkBP,EAAcG,aAAa,SACjDI,EAAkB,EAAoBA,EAAkB,GAExDP,EAAcQ,aAAa,QAAS,GAAGD,KAAmBD,KAC1DT,GAAwBO,C,EAO5B,iBAAAY,GAIE,IAAIC,EAAczB,KAAKC,GAAGU,aAAa,MACvC,IAAIe,EAAS1B,KAAKC,GAAG0B,cACrB,IAAIC,EAAYF,GAAUA,EAAOf,aAAa,MAASe,EAAOf,aAAa,MAAQkB,EAAMC,mBAEzF,IAAKL,GAAeA,GAAe,GAAI,CAErCA,EAAc,GAAGG,qBACjB5B,KAAKC,GAAGe,aAAa,KAAMS,E,CAI7BzB,KAAK+B,OAAU/B,KAAK+B,QAAU,GAAM/B,KAAK+B,OAAS,GAAGH,YAGrD5B,KAAKF,0B,CAKP,MAAAkC,GAEE,IAAIC,EAAa,qBAEjBA,GAAejC,KAAY,QAAI,oDAAsD,GAErF,GAAIA,KAAKkC,UAAY,GAAI,CACvBD,GAAc,IAAMjC,KAAKkC,Q,CAG3B,OACEC,EAAA,OAAKC,MAAOH,EAAYI,GAAIrC,KAAK+B,QAAQI,EAAA,a"}