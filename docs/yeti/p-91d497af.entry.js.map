{"version":3,"names":["YetiField","this","tipId","utils","generateUniqueId","inputId","validateLabel","newValue","isInvalid","Error","handleReadyToVerifySlow","ev","childControl","target","autovalidate","required","value","errorMessage","label","isValid","nodeName","toLowerCase","componentWillLoad","console","log","el","render","cssClass","isInline","fieldClass","h","key","class","htmlFor","type","inputName","defaultValue","Object","assign","inputMaxlength","tip","id"],"sources":["src/components/yeti-field/yeti-field.tsx"],"sourcesContent":["import { Component, Prop, h, State, Watch, Listen, Element } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-field',\r\n  shadow: false,\r\n})\r\nexport class YetiField {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * id that will be assigned to the actual input element. A unique one will be assigned if one is not provided.\r\n   */\r\n  @Prop() inputId: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\r\n   */\r\n  @Prop() inputName: string = this.inputId;\r\n\r\n  /**\r\n   * type that will be assigned to the actual input element.\r\n   */\r\n  @Prop() type: string = \"text\";\r\n\r\n  /**\r\n   * CSS classlist that will be assigned to the containing field element (probably a div).\r\n   */\r\n  @Prop() fieldClass: string = \"\";\r\n\r\n  /**\r\n   * maximum length for the field.\r\n   */\r\n  @Prop() inputMaxlength?: number = 0;\r\n  \r\n  /**\r\n   * Mandatory value for the label of the field.\r\n   */\r\n  @Prop() label!: string;\r\n  @Watch('label')\r\n  validateLabel(newValue: string) {\r\n    // Label must have a non-empty value.\r\n    const isInvalid = typeof newValue !== 'string' || newValue === '';\r\n    if (isInvalid) {\r\n      throw new Error('yeti-field must have a non-empty label attribute');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Value for the optional input tip that appears at the bottom of the field.\r\n   */\r\n  @Prop() tip: string = \"\";\r\n\r\n  /**\r\n   * Whether the field is required to have a valid value by the greater form.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  /**\r\n   * Error message that appears when the field is invalid. Can be updated at any time.\r\n   */\r\n  @Prop({mutable: true}) errorMessage: string = 'Error: please correct this field.'\r\n\r\n  /**\r\n   * Whether the input is currently valid or invalid.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean = true;\r\n\r\n  /**\r\n   * Default value of the field's input.\r\n   */\r\n  @Prop() defaultValue: string = '';\r\n\r\n  /**\r\n   * Determines whether the field should attempt to validate itself or merely pass through any readyToVerify events from its input.\r\n   */\r\n  @Prop() autovalidate: boolean = true;\r\n\r\n  /**\r\n   * Determines whether the field uses block (default) or inline labels.\r\n   */\r\n  @Prop() isInline: boolean = false;\r\n\r\n  /**\r\n   * Tracks whether the field's input has been focused and then blurred (i.e. if the user has interacted with it yet).\r\n   */\r\n  @State() isDirty: boolean = false;\r\n  \r\n  @Listen('readyToVerifySlow', { capture: true })\r\n  handleReadyToVerifySlow(ev) {\r\n\r\n    let childControl = ev.target;\r\n\r\n    if (this.autovalidate == false) {\r\n      return;\r\n    }\r\n\r\n    if (this.required) {\r\n\r\n      // Autoverification is on, this field is required, and the child component just notified us that it's ready for verification.\r\n\r\n      // First, regardless of whether it's an input or date-picker, it can't be empty.\r\n      if (childControl.value == \"\") {\r\n\r\n        this.errorMessage = `${this.label} field is required.`\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n      \r\n    } else if (childControl.nodeName.toLowerCase() == \"yeti-date-picker\") {\r\n\r\n      // Second, if it's a non-empty date-picker, see if it's a valid date.\r\n\r\n      if (!childControl.isValid) {\r\n\r\n        // The date-picker already validates itself. We just need to check its status.\r\n        this.errorMessage = 'Enter the date in mm/dd/yyyy format.'\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n    }\r\n\r\n    this.isValid = true;\r\n\r\n  }\r\n\r\n  tipId = utils.generateUniqueId();\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    console.log(this.el)\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let cssClass = \"yeti-form-field\";\r\n\r\n    if (this.isInline) {\r\n      cssClass += \" yeti-form-field-inline\";\r\n    }\r\n\r\n    this.validateLabel(this.label);\r\n\r\n    if (this.fieldClass != \"\") {\r\n      cssClass =\"yeti-form-field \" + this.fieldClass;\r\n    }\r\n\r\n    return (\r\n      <div class={cssClass}>\r\n\r\n        <label htmlFor={this.inputId} class=\"yeti-form-label\">{this.label}{this.required ? ' (required)' : null}</label>\r\n\r\n        {(this.type != \"slot\") ?\r\n\r\n            (this.type == \"date\") ?\r\n\r\n              <yeti-date-picker\r\n                input-id={this.inputId}\r\n                input-name={this.inputName}\r\n                value={this.defaultValue}\r\n                required={this.required}\r\n                is-valid={this.isValid}\r\n                described-by={this.tipId}\r\n              ></yeti-date-picker>\r\n\r\n            :\r\n          \r\n              <yeti-input \r\n                input-id={this.inputId} \r\n                input-class={!this.isValid ? 'yeti-input__error' : null} \r\n                value={this.defaultValue} \r\n                required={this.required}\r\n                is-valid={this.isValid}\r\n                described-by={this.tipId}\r\n                {...((this.inputMaxlength != 0) ? {\"input-maxlength\": this.inputMaxlength} : {})}\r\n              ></yeti-input>\r\n\r\n        :\r\n\r\n          <slot></slot>\r\n\r\n        }\r\n        \r\n        {\r\n          (this.tip != \"\" || (this.errorMessage != \"\" && !this.isValid)) ?\r\n\r\n            <span class=\"yeti-form-tip\" aria-live=\"polite\" id={this.tipId}>{\r\n\r\n                  !this.isValid\r\n                  ? this.errorMessage\r\n                  : \r\n                    this.tip\r\n                    ? this.tip\r\n                    : null\r\n\r\n            }</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"4FAOaA,EAAS,M,yBA6HpBC,KAAAC,MAAQC,EAAMC,mB,aAtHYD,EAAMC,mB,eAKJH,KAAKI,Q,UAKV,O,gBAKM,G,oBAKK,E,8BAkBZ,G,cAKM,M,kBAKkB,oC,aAQxB,K,kBAKS,G,kBAKC,K,cAKJ,M,aAKA,K,CAjD5B,aAAAC,CAAcC,GAEZ,MAAMC,SAAmBD,IAAa,UAAYA,IAAa,GAC/D,GAAIC,EAAW,CACb,MAAM,IAAIC,MAAM,mD,EAgDpB,uBAAAC,CAAwBC,GAEtB,IAAIC,EAAeD,EAAGE,OAEtB,GAAIZ,KAAKa,cAAgB,MAAO,CAC9B,M,CAGF,GAAIb,KAAKc,SAAU,CAKjB,GAAIH,EAAaI,OAAS,GAAI,CAE5Bf,KAAKgB,aAAe,GAAGhB,KAAKiB,2BAC5BjB,KAAKkB,QAAU,MACf,M,OAIG,GAAIP,EAAaQ,SAASC,eAAiB,mBAAoB,CAIpE,IAAKT,EAAaO,QAAS,CAGzBlB,KAAKgB,aAAe,uCACpBhB,KAAKkB,QAAU,MACf,M,EAKJlB,KAAKkB,QAAU,I,CAQjB,iBAAAG,GACEC,QAAQC,IAAIvB,KAAKwB,G,CAKnB,MAAAC,GAEE,IAAIC,EAAW,kBAEf,GAAI1B,KAAK2B,SAAU,CACjBD,GAAY,yB,CAGd1B,KAAKK,cAAcL,KAAKiB,OAExB,GAAIjB,KAAK4B,YAAc,GAAI,CACzBF,EAAU,mBAAqB1B,KAAK4B,U,CAGtC,OACEC,EAAA,OAAAC,IAAA,2CAAKC,MAAOL,GAEVG,EAAA,SAAAC,IAAA,2CAAOE,QAAShC,KAAKI,QAAS2B,MAAM,mBAAmB/B,KAAKiB,MAAOjB,KAAKc,SAAW,cAAgB,MAEjGd,KAAKiC,MAAQ,OAEVjC,KAAKiC,MAAQ,OAEZJ,EAAA,+BACY7B,KAAKI,QAAO,aACVJ,KAAKkC,UACjBnB,MAAOf,KAAKmC,aACZrB,SAAUd,KAAKc,SAAQ,WACbd,KAAKkB,QAAO,eACRlB,KAAKC,QAKrB4B,EAAA,aAAAO,OAAAC,OAAA,YACYrC,KAAKI,QAAO,eACRJ,KAAKkB,QAAU,oBAAsB,KACnDH,MAAOf,KAAKmC,aACZrB,SAAUd,KAAKc,SAAQ,WACbd,KAAKkB,QAAO,eACRlB,KAAKC,OACbD,KAAKsC,gBAAkB,EAAK,CAAC,kBAAmBtC,KAAKsC,gBAAkB,KAKnFT,EAAA,aAKC7B,KAAKuC,KAAO,IAAOvC,KAAKgB,cAAgB,KAAOhB,KAAKkB,QAEnDW,EAAA,QAAME,MAAM,gBAAe,YAAW,SAASS,GAAIxC,KAAKC,QAEjDD,KAAKkB,QACJlB,KAAKgB,aAELhB,KAAKuC,IACHvC,KAAKuC,IACL,MAKV,G"}