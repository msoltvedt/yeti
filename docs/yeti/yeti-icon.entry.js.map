{"file":"yeti-icon.entry.esm.js","mappings":";;;MAOa,QAAQ;;;oBAO4B,cAAc;qBAKjC,EAAE;mBAKqB,EAAE;kBAK3B,KAAK,CAAC,gBAAgB,EAAE;eAK3B,EAAE;qBAKK,KAAK;oBAKN,KAAK;;EAIlC,kBAAkB;IAChB,IAAI,IAAI,CAAC,SAAS,EAAE;MAChB,IAAI,CAAC,EAAE,CAAC,YAAY,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;KACzC;GACF;EAID,MAAM;IAEJ,IAAI,OAAO,GAAG,gBAAgB,CAAC;IAC/B,IAAI,aAAa,GAAG,EAAE,CAAC;IAEvB,QAAQ,IAAI,CAAC,SAAS;MAEpB,KAAK,UAAU;QACb,aAAa,GAAG,WAAW,CAAC;MAE9B,KAAK,EAAE,CAAC;MACR,SAAS;QACP,MAAM;OACP;KACF;IAED,OAAO,IAAI,aAAa,CAAC;IAEzB,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,EAAE,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC;IAE1D;;IAGI;MAEI,0BAAM,KAAK,EAAE,OAAO,KAAO,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,IAAI,EAAC,aAAa,EAAE,IAAI,EAAC,GAAG,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAQ;MAEjG,CAAC,IAAI,CAAC,GAAG,IAAI,EAAE,IAAI,YAAM,KAAK,EAAC,kBAAkB,IAAE,IAAI,CAAC,GAAG,CAAQ,GAAG,EAAE;KAE3E;;MAGH;GACH;;;;;;","names":[],"sources":["src/components/yeti-icon/yeti-icon.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-icon',\r\n  shadow: false,\r\n})\r\nexport class YetiIcon {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * The type of icon. Corresponds to the analogous \"code\" Google uses (i.e. check_circle).\r\n   */\r\n  @Prop({ attribute: 'type'}) iconCode: string = 'check_circle';\r\n\r\n  /**\r\n   * The type of icon. Corresponds to the analogous \"code\" Google uses (i.e. check_circle).\r\n   */\r\n  @Prop() iconStyle: string = '';\r\n\r\n  /**\r\n   * CSS classlist applied to the actual element producing the icon.\r\n   */\r\n  @Prop({ attribute: 'icon-css'}) iconCSS?: string = '';\r\n\r\n  /**\r\n   * id of the actual element producing the icon. Set to a unique id if one is not provided.\r\n   */\r\n  @Prop() iconId?: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * Optional replacement text to use as a more clear description of the icon for screen-reader users. Otherwise AT will announce the Google \"code\" (i.e. check_circle).\r\n   */\r\n  @Prop() alt?: string = \"\";\r\n\r\n  /**\r\n   * Whether the icon can gain focus (used primarily for tooltip anchors).\r\n   */\r\n  @Prop() focusable?: boolean = false;\r\n\r\n  /**\r\n   * Used to toggle a re-render of the icon.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    if (this.focusable) {\r\n        this.el.setAttribute(\"tabindex\", \"0\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let iconCSS = 'material-icons';\r\n    let styleModifier = '';\r\n\r\n    switch (this.iconStyle) {\r\n      \r\n      case 'outlined':\r\n        styleModifier = '-outlined';\r\n\r\n      case '':\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n\r\n    iconCSS += styleModifier;\r\n\r\n    iconCSS += (this.iconCSS != '') ? ` ${this.iconCSS}` : '';\r\n\r\n    return (\r\n\r\n        // <span class=\"yeti-icon-wrapper\" {...((this.focusable) ? {\"tabindex\": 0} : {})}>\r\n        [\r\n            \r\n            <span class={iconCSS} {...((this.alt != \"\") ? {\"aria-hidden\": true} : {})}>{this.iconCode}</span>,\r\n            \r\n            (this.alt != \"\") ? <span class=\"yeti-a11y-hidden\">{this.alt}</span> : \"\"\r\n          \r\n        ]\r\n        //</span>\r\n\r\n    );\r\n  }\r\n\r\n}"],"version":3}