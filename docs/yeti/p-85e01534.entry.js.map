{"version":3,"names":["YetiMenuButton","this","justMadeASelection","hasCustomButtonContents","handleValueChange","newValue","oldValue","menuButtonChange","emit","handleDefocusingClick","el","querySelectorAll","length","isOpen","closeMenu","handleKeydown","ev","key","toString","toLowerCase","cursorPosition","options","openMenu","preventDefault","value","label","isTouched","toggleMenu","parseChildTags","buttonLabel","querySelector","i","option","item","tagName","optionObject","id","href","hasHTML","optionId","getAttribute","innerText","trim","replace","hasAttribute","target","downloadAs","childNodes","firstChild","nodeType","div","document","createElement","setAttribute","appendChild","innerHTML","push","j","remove","unwrapButtonContents","wrapper","replaceWith","Array","from","renderMenuItems","items","linkOrButtonElement","listItemId","h","Object","assign","download","class","role","tabindex","onClick","handleOptionClick","name","isLink","handleActualFocus","facade","focus","handleButtonClick","renderButton","buttonClass","menuId","buttonId","componentWillLoad","elementId","utils","generateUniqueId","componentWillRender","componentDidRender","selector","menu","scrollIntoView","behavior","block","button","menuButtonSelectionMade","render","wrapperClass","menuClass","tooltipId","menuAlignment","indexOf","buttonType","text","tooltipText","slotId","tipId","YetiMultiselect","actualId","closeFlyout","shiftKey","altKey","openFlyout","classList","contains","click","toggleFlyout","readyToVerifySlow","handleFieldBlur","parseOptionElements","selected","numSelections","getPlaceholderDisplay","placeholder","renderActualOptions","optionsActual","optionActual","iLoveJSX","readyToVerifyFast","handleClearSelections","fieldElement","stopPropagation","optionElements","children","componentId","actualName","facadeId","flyout","hoveredOption","thingToScrollIntoView","wrapperClasses","flyoutClass","isValid","tabIndex","multiple","onFocus","labelledBy","describedBy","title","showClear","map","optionClass"],"sources":["src/components/yeti-menu-button/yeti-menu-button.tsx","src/components/yeti-multiselect/yeti-multiselect.tsx"],"sourcesContent":["import { Component, Prop, h, State, Event, EventEmitter, Element, Listen, Watch } from '@stencil/core';\r\nimport { utils, YetiMenuButtonOption } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-menu-button',\r\n  shadow: false,\r\n})\r\nexport class YetiMenuButton {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Fires when the selected value of the Menu Button becomes a different value.\r\n   */\r\n  @Event({ bubbles: true }) menuButtonChange: EventEmitter;\r\n\r\n  /**\r\n   * Fires whenever the user selects a value, even if its the same as it was before.\r\n   */\r\n  @Event({ bubbles: true }) menuButtonSelectionMade: EventEmitter;\r\n\r\n  /**\r\n   * CSS classlist to add to the Menu Button pattern's outer wrapper.\r\n   */\r\n  @Prop({ attribute: 'wrapper-class'}) wrapperClass: string = '';\r\n\r\n  /**\r\n   * CSS classlist to add to the Menu Button's button element.\r\n   */\r\n  @Prop({ attribute: 'button-class'}) buttonClass: string = '';\r\n\r\n  /**\r\n   * CSS classlist to add to the Menu Button's menu element.\r\n   */\r\n  @Prop({ attribute: 'menu-class'}) menuClass: string = '';\r\n\r\n  /**\r\n   * id to apply to the Menu Button's button element. Will be auto-populated with a unique id if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) buttonId: string = \"\";\r\n\r\n  /**\r\n   * Sets a specific type of the button (see the Yeti Button pattern for more info): primary, secondary, tertiary, danger, or ghost.\r\n   */\r\n  @Prop() buttonType?: string = \"\";\r\n\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) menuId: string = \"\";\r\n\r\n  /**\r\n   * Text that appears within the optional tooltip bubble.\r\n   */\r\n  @Prop() tooltipText: string = \"Options\";\r\n\r\n  /**\r\n   * Token list comprising left | right and/or above | below to align the menu relative to the button.\r\n   */\r\n  @Prop() menuAlignment: string = \"\";\r\n\r\n  /**\r\n   * Whether to show a tooltip on hover/focus of the button or not.\r\n   */\r\n  @Prop() hasTooltip: boolean = true;\r\n\r\n  /**\r\n   * The value of the control (will correspond to the value of one of the options in the menu).\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) value: string = '';\r\n  @Watch('value')\r\n  handleValueChange(newValue: string, oldValue: string) {\r\n    this.menuButtonChange.emit({\r\n      \"newValue\": newValue,\r\n      \"oldValue\": oldValue\r\n    });\r\n  }\r\n\r\n  /**\r\n   * id of an outside element the control's aria-labelledby attribute references.\r\n   */\r\n  @Prop() labelledBy: string = \"\";\r\n\r\n  /**\r\n   * id of an outside element the control's aria-describedby attribute reference.\r\n   */\r\n  @Prop() describedBy: string = \"\";\r\n\r\n  /**\r\n   * Array of YetiMenuButtonOptions (see utils.js) that describe the component's representation of its options.\r\n   */\r\n  @State() options: YetiMenuButtonOption[] = [];\r\n\r\n  /**\r\n   * Whether the user has focused and blurred (i.e. interacted with) the component.\r\n   */\r\n  @State() isTouched: boolean = false;\r\n\r\n  /**\r\n   * Toggle to re-rerender the component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the menu is visible or not.\r\n   */\r\n  @State() isOpen: boolean = false;\r\n\r\n  /**\r\n   * 0-based index of the currently focused option relative to the whole menu.\r\n   */\r\n  @State() cursorPosition: number = -1;\r\n\r\n  private justMadeASelection: boolean = false;\r\n\r\n  private hasCustomButtonContents: boolean = false;\r\n\r\n\r\n  @Listen(\"click\", {\r\n    target: \"body\",\r\n    capture: true\r\n  })\r\n  handleDefocusingClick() {\r\n    if (this.el.querySelectorAll(\":focus\").length == 0 && this.isOpen) {\r\n      this.closeMenu();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen(\"keydown\")\r\n  handleKeydown(ev: KeyboardEvent) {\r\n\r\n    let key = ev.key.toString().toLowerCase();\r\n\r\n    switch (key) {\r\n\r\n      // Handle potential tabout\r\n      case \"tab\": {\r\n\r\n        this.closeMenu();\r\n        \r\n        break;\r\n      }\r\n\r\n\r\n      // Handle down arrow\r\n      case \"arrowdown\": {\r\n\r\n        // Menu is already open, focus on next option.\r\n        if (this.isOpen) {\r\n\r\n          this.cursorPosition = (this.cursorPosition + 1) % this.options.length;\r\n\r\n        // Menu isn't open, so open it and focus on the first option.\r\n        } else {\r\n          \r\n          this.cursorPosition = 0;\r\n          this.openMenu();\r\n        \r\n        }\r\n        \r\n        ev.preventDefault();\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle up arrow\r\n      case \"arrowup\": {\r\n\r\n        // Menu is already open, focus on previous option.\r\n        if (this.isOpen) {\r\n\r\n          this.cursorPosition = (this.cursorPosition - 1 + this.options.length) % this.options.length;\r\n          \r\n        // Menu isn't open, so open it and focus on the last option.\r\n        } else {\r\n\r\n          this.cursorPosition = this.options.length - 1;\r\n          this.openMenu();\r\n\r\n        }\r\n        \r\n        ev.preventDefault();\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle space, which should open the menu but do nothing else.\r\n      case \" \": {\r\n\r\n        // Check to see if the menu is open.\r\n        if (!this.isOpen) {\r\n          this.cursorPosition = 0;\r\n          this.openMenu();\r\n        }\r\n\r\n        ev.preventDefault();\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle enter\r\n      case \"enter\": {\r\n\r\n        // Check to see if the menu is open.\r\n        if (!this.isOpen) {\r\n          \r\n          this.openMenu();\r\n          this.cursorPosition = 0;\r\n\r\n          ev.preventDefault();\r\n        }\r\n\r\n        // Menu is already open, so the user just made a selection.\r\n        else {\r\n\r\n          this.value = this.options[this.cursorPosition].label;\r\n          this.justMadeASelection = true;\r\n          this.closeMenu();\r\n          // Note we're not preventing default here, so if the option was a link, that link will still work.\r\n        \r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Home\r\n      case \"home\": {\r\n        \r\n        // If the menu is open then move the cursor to the first option.\r\n        if (this.isOpen) {\r\n\r\n          this.cursorPosition = 0;\r\n\r\n        }\r\n\r\n        ev.preventDefault();\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // End\r\n      case \"end\": {\r\n        \r\n        if (this.isOpen) {\r\n\r\n          this.cursorPosition = this.options.length - 1;\r\n\r\n        }\r\n\r\n        ev.preventDefault();\r\n\r\n        break;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  openMenu() {\r\n    this.isOpen = true;\r\n  }\r\n\r\n\r\n\r\n  closeMenu() {\r\n    this.isOpen = false;\r\n    this.cursorPosition = -1;\r\n    this.isTouched = true;\r\n  }\r\n\r\n\r\n\r\n  toggleMenu() {\r\n    if (this.isOpen) {\r\n      this.closeMenu()\r\n    } else {\r\n      this.openMenu();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  parseChildTags() {\r\n\r\n    let options = this.el.querySelectorAll(\"yeti-menu-button-option\");\r\n    let buttonLabel = this.el.querySelector(\"yeti-menu-button-contents\");\r\n\r\n    this.options = (options && options.length && options.length > 0) ? [] : this.options;\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      \r\n      let option = options.item(i) as Element;\r\n      \r\n      // First, confirm this element is indeed a yeti-menu-button-option element.\r\n      if (option.tagName.toLowerCase() == 'yeti-menu-button-option') {\r\n\r\n        let optionObject: YetiMenuButtonOption = {\r\n          label: \"\",\r\n          id: \"\",\r\n          href: \"\",\r\n          value: \"\",\r\n          hasHTML: false\r\n        };\r\n\r\n        let optionId = option.getAttribute(\"id\");\r\n\r\n        optionObject.id = (optionId && optionId != \"\") ? optionId : `${this.el.getAttribute(\"id\")}_option${i}`;\r\n        optionObject.label = (option as HTMLElement).innerText.trim().replace(/\\t/g, '');\r\n        optionObject.label = optionObject.label.replace(/\\n/g, ' ');\r\n\r\n        // Check to see if it has a href attribute.\r\n        if (option.hasAttribute(\"href\") && option.getAttribute(\"href\") != \"\") {\r\n          optionObject.href = option.getAttribute(\"href\");\r\n\r\n          if (option.hasAttribute(\"target\") && option.getAttribute(\"target\") != \"\") {\r\n            optionObject.target = option.getAttribute(\"target\");\r\n          }\r\n\r\n          if (option.hasAttribute(\"download-as\") && option.getAttribute(\"download-as\") != \"\") {\r\n            optionObject.downloadAs = option.getAttribute(\"download-as\");\r\n          }\r\n        }\r\n\r\n        // Check to see if it's normal or fancy (i.e. has HTML)\r\n        if (option.childNodes.length != 1 || option.firstChild.nodeType != 3) { // If there's not just a single text node\r\n\r\n          optionObject.hasHTML = true;\r\n\r\n          // Create a slot element and move all childNodes to it.\r\n          let div = document.createElement(\"div\");\r\n          div.setAttribute(\"slot\", optionObject.id);\r\n\r\n          while (option.childNodes.length > 0) {\r\n            div.appendChild(option.childNodes[0]);\r\n          }\r\n\r\n          this.el.appendChild(div);\r\n\r\n          optionObject.innerHTML = option.innerHTML;\r\n          \r\n        }\r\n\r\n        this.options.push(optionObject);\r\n\r\n      }\r\n\r\n    } // End for\r\n\r\n    // Handle the button label (if it exists)\r\n    if (buttonLabel) {\r\n      this.hasCustomButtonContents = true;\r\n      buttonLabel.setAttribute(\"slot\", \"buttonContents\");\r\n    }\r\n\r\n    // Finally, we need to remove the option elements.\r\n    for (let j = options.length - 1; j >= 0; --j) {\r\n      options.item(j).remove();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  unwrapButtonContents() {\r\n    let wrapper = this.el.querySelector(\"yeti-menu-button-contents\");\r\n    if (wrapper) {\r\n      wrapper.replaceWith(...Array.from(wrapper.childNodes));\r\n    }\r\n  }\r\n\r\n\r\n\r\n  renderMenuItems() {\r\n    // Creates the <option>s for the actual <select>.\r\n    let items = [];\r\n    for (let i=0; i<this.options.length; i++) {\r\n      // let optionActual = <option value={this.options[i].label} selected={this.options[i].selected}>{this.options[i].label}</option>;\r\n      // optionsActual.push(optionActual);\r\n\r\n      let option = this.options[i];\r\n      let linkOrButtonElement;\r\n      let item;\r\n      //let listItemId = `${option.id}_item${i}`;\r\n      let listItemId = `${option.id}`;\r\n\r\n      // See if it's a link\r\n      if (option.href) {\r\n        linkOrButtonElement = <a \r\n          href={option.href} \r\n          {...((option.target != \"\" && !option.downloadAs) ? {\"target\": option.target} : {})}\r\n          {...((option.downloadAs && option.downloadAs != \"\") ? {\"download\": option.downloadAs} : {})}\r\n          class=\"yeti-menu_button-menu-item-link\" \r\n          role=\"menuitem\" \r\n          tabindex=\"-1\"\r\n          data-option-index={i}\r\n          onClick={(ev) => { this.handleOptionClick(i, ev, true) }}>\r\n            \r\n            {(option.hasHTML) ? <slot name={option.id}></slot> : option.label}\r\n            \r\n        </a>\r\n      }\r\n\r\n      // Nope, it's a button.\r\n      else {\r\n        linkOrButtonElement = <button \r\n          class=\"yeti-menu_button-menu-item-button\" \r\n          role=\"menuitem\" \r\n          tabindex=\"-1\"\r\n          data-option-index={i}\r\n          onClick={(ev) => { this.handleOptionClick(i, ev) }}>\r\n\r\n            {(option.hasHTML) ? <slot name={option.id}></slot> : option.label}\r\n\r\n        </button>\r\n      }\r\n\r\n      item = <li \r\n        class=\"yeti-menu_button-menu-item\" \r\n        role=\"presentation\"\r\n        id={listItemId}\r\n        key={listItemId}\r\n      >{linkOrButtonElement}</li>\r\n\r\n      items.push(item);\r\n\r\n    }\r\n\r\n    return items;\r\n  }\r\n\r\n\r\n\r\n  handleOptionClick(i: number, ev: Event, isLink: boolean = false) {\r\n\r\n    this.value = this.options[i].label;\r\n    this.justMadeASelection = true;\r\n    this.closeMenu();\r\n    if (!isLink) {\r\n      ev.preventDefault();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleActualFocus() {\r\n    let facade = this.el.querySelector(\".yeti-multiselect\") as HTMLElement;\r\n    if (facade) {\r\n      facade.focus();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleButtonClick(ev: Event) {\r\n    this.isOpen = !this.isOpen;\r\n    ev.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  renderButton(buttonClass: string) {\r\n    return <button \r\n      class={buttonClass}\r\n      aria-haspopup=\"true\"\r\n      {...((this.isOpen) ? {\"aria-expanded\": \"true\"} : {})}\r\n      aria-controls={this.menuId} \r\n      id={this.buttonId}\r\n      role=\"button\"\r\n      onClick={(ev) => {\r\n        this.handleButtonClick(ev)\r\n    }}>\r\n\r\n      {(this.hasCustomButtonContents) ?\r\n        <slot name=\"buttonContents\"></slot>\r\n      :\r\n        [\r\n          <span class=\"material-icons\" aria-hidden=\"true\">more_vert</span>,\r\n          <span class=\"yeti-a11y-hidden\">Options</span>\r\n        ]\r\n      }\r\n    </button>\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set ids\r\n    let elementId = this.el.getAttribute(\"id\");\r\n  \r\n    if (!elementId || elementId == \"\") {\r\n\r\n      this.el.setAttribute(\"id\", utils.generateUniqueId());\r\n\r\n    }\r\n\r\n    this.buttonId = (this.buttonId != \"\") ? this.buttonId : `${elementId}_button`;\r\n    this.menuId = (this.menuId != \"\") ? this.menuId : `${elementId}_menu`;\r\n\r\n  }\r\n\r\n\r\n\r\n  componentWillRender() {\r\n    // Look for and handle any <yeti-menu-button-*> tags.\r\n    this.parseChildTags();\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n\r\n    // Unwrap button contents, if necessary\r\n    this.unwrapButtonContents();\r\n\r\n    // If the cursor is over an option, make sure it's visible.\r\n    let selector = '[data-option-index=\"' + this.cursorPosition + '\"';\r\n    let linkOrButtonElement = this.el.querySelector(selector) as HTMLElement;\r\n    let menu = this.el.querySelector(\".yeti-menu_button-menu\");\r\n\r\n    if (linkOrButtonElement) {\r\n      \r\n      linkOrButtonElement.focus();\r\n\r\n    }\r\n\r\n    if (this.isOpen) {\r\n\r\n      menu.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\"\r\n      });\r\n\r\n    }\r\n\r\n    if (this.justMadeASelection) {\r\n\r\n      let button = this.el.querySelector('.yeti-menu_button-button') as HTMLElement;\r\n\r\n      if (button) {\r\n\r\n        button.focus();\r\n        button.scrollIntoView({\r\n          behavior: \"smooth\",\r\n          block: \"nearest\"\r\n        });\r\n\r\n      }\r\n\r\n      this.menuButtonSelectionMade.emit({\r\n        \"value\": this.value\r\n      });\r\n\r\n      this.justMadeASelection = false;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperClass = 'yeti-menu_button';\r\n    let buttonClass = 'yeti-menu_button-button';\r\n    let menuClass = 'yeti-menu_button-menu';\r\n    let tooltipId = `${this.el.getAttribute(\"id\")}_tooltip`;\r\n\r\n    if (this.menuAlignment.indexOf(\"right\") > -1) {\r\n      wrapperClass += ' yeti-menu_button-right_aligned';\r\n    }\r\n\r\n    if (this.isOpen) {\r\n      wrapperClass += ' yeti-menu_button__open';\r\n    }\r\n\r\n    if (this.buttonType && this.buttonType != \"\") {\r\n      buttonClass = `${buttonClass} yeti-menu_button-button-mimic ${buttonClass}-${this.buttonType}`;\r\n    }\r\n\r\n    wrapperClass += (this.wrapperClass && this.wrapperClass != \"\") ? \" \" + this.wrapperClass : \"\";\r\n    buttonClass += (this.buttonClass && this.buttonClass != \"\") ? \" \" + this.buttonClass : \"\";\r\n    menuClass += (this.menuClass && this.menuClass != \"\") ? \" \" + this.menuClass : \"\";\r\n\r\n    return ([\r\n      <div class={wrapperClass}>\r\n\r\n        {\r\n          (this.hasTooltip) ?\r\n\r\n            <yeti-tooltip text={this.tooltipText} id={tooltipId} slotId={this.buttonId} tipId={`${this.buttonId}_tooltip`}>\r\n              {this.renderButton(buttonClass)}\r\n            </yeti-tooltip>\r\n\r\n          :\r\n\r\n            this.renderButton(buttonClass)\r\n        }\r\n\r\n        \r\n        <ul class={menuClass} role=\"menu\" id={this.menuId} aria-labelledby={this.buttonId} key={this.menuId}>\r\n\r\n          {this.renderMenuItems()}\r\n\r\n        </ul>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n}\r\n","import { Component, Prop, h, State, Event, EventEmitter, Element, Listen, /*Watch*/ } from '@stencil/core';\r\nimport { utils, YetiMultiselectOption } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-multiselect',\r\n  shadow: false,\r\n})\r\nexport class YetiMultiselect {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Fires when the user has made a selection and closed the dropdown (usually by focusing elsewhere).\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifySlow: EventEmitter<CustomEvent>;\r\n\r\n  /**\r\n   * Fires when the user toggles any of the options.\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifyFast: EventEmitter<CustomEvent>;\r\n\r\n  /**\r\n   * CSS classlist to add to the component's outer wrapper element.\r\n   */\r\n  @Prop() wrapperClass: string = '';\r\n\r\n  /**\r\n   * id of the visual representation of the drop-down.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) facadeId: string = \"\";\r\n\r\n  /**\r\n   * id of the actual drop-down element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) actualId: string = \"\";\r\n\r\n  /**\r\n   * name of the actual drop-down element. Defaults to match id.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) actualName: string = this.actualId;\r\n\r\n  /**\r\n   * Whether the component requires a valid value.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  /**\r\n   * Token list of left | right and/or above | below that describes the drop-down's visual position relative to the closed state anchor.\r\n   */\r\n  @Prop() menuAlignment: string = \"\";\r\n\r\n  /**\r\n   * Whether the component has a valid value.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean;\r\n\r\n  /**\r\n   * The component's value is represented as a string of comma-separated values.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) value: string = '';\r\n\r\n  /**** TODO: handle programmatic value changes: i.e. when controller JS sets [component].value \r\n  @Watch(\"value\")\r\n  handleValueChange(newValue: string, oldValue: string) {\r\n    this.handleProgrammaticValueChange(newValue, oldValue);\r\n  }*/\r\n\r\n  /**\r\n   * id of an external HTML element that the component's actual drop-down element references in aria-labelledby.\r\n   */\r\n  @Prop() labelledBy: string = \"\";\r\n\r\n  /**\r\n   * id of an external HTML element that the component's actual drop-down element references in aria-describedby.\r\n   */\r\n  @Prop() describedBy: string = \"\";\r\n\r\n  /**\r\n   * Text that appears in the closed state/anchor when there are no selections.\r\n   */\r\n  @Prop() placeholder: string = \"- Select -\";\r\n\r\n  /**\r\n   * Whether or not to show the optional Clear all selections puck.\r\n   */\r\n  @Prop() showClear: boolean = true;\r\n\r\n  /**\r\n   * Array of YetiMultiselectOptions that describes the component's internal representation of its options. See utils.js for more detail.\r\n   */\r\n  @State() options: YetiMultiselectOption[] = [];\r\n\r\n  /**\r\n   * Whether or not the user has interacted with the component (i.e. focused and blurred).\r\n   */\r\n  @State() isTouched: boolean = false;\r\n\r\n  /**\r\n   * Number of total selections (used primarily for the anchor).\r\n   */\r\n  @State() numSelections: number = 0;\r\n\r\n  /**\r\n   * Toggle to re-render the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether or not the drop-down is open/visible or not.\r\n   */\r\n  @State() isOpen: boolean = false;\r\n\r\n  /**\r\n   * 0-based index of the currently focused option.\r\n   */\r\n  @State() cursorPosition: number = -1;\r\n\r\n\r\n\r\n  @Listen(\"click\", {\r\n    target: \"body\"\r\n  })\r\n  handleDefocusingClick() {\r\n    if (this.el.querySelectorAll(\":focus\").length == 0 && this.isOpen) {\r\n      this.closeFlyout();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen(\"keydown\")\r\n  handleKeydown(ev: KeyboardEvent) {\r\n\r\n    let key = ev.key.toString().toLowerCase();\r\n\r\n    switch (key) {\r\n\r\n      // Handle potential tabout\r\n      case \"tab\": {\r\n\r\n        // Normal tab direction\r\n        if (!ev.shiftKey) {\r\n\r\n          if (this.el.querySelectorAll(\".yeti-multiselect:focus\").length == 0) {\r\n            this.closeFlyout();\r\n          }\r\n\r\n        // Shift tab direction (backwards)\r\n        } else {\r\n\r\n          if (this.el.querySelectorAll(\".yeti-multiselect:focus\").length > 0) {\r\n            this.closeFlyout();\r\n          }\r\n\r\n        }\r\n        \r\n        break;\r\n      }\r\n\r\n\r\n      // Handle arrow navigation\r\n      case \"arrowdown\": {\r\n\r\n        if (this.isOpen) {\r\n          this.cursorPosition = (this.cursorPosition + 1) % this.options.length;\r\n          ev.preventDefault();\r\n        } else if (ev.altKey) {\r\n\r\n          this.openFlyout();\r\n          ev.preventDefault();\r\n\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle arrow navigation\r\n      case \"arrowup\": {\r\n\r\n        if (this.isOpen) {\r\n          this.cursorPosition = (this.cursorPosition - 1 + this.options.length) % this.options.length;\r\n          ev.preventDefault();\r\n        } else if (ev.altKey) {\r\n\r\n          this.openFlyout();\r\n          ev.preventDefault();\r\n\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle escape navigation\r\n      case \"escape\": {\r\n\r\n        if (this.isOpen) {\r\n          this.closeFlyout();\r\n          ev.preventDefault();\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle flyout open/close toggling enter/space or selection-making enter/space\r\n      case \"enter\":\r\n      case \" \": {\r\n\r\n        // Check to see if this happened while selecting something.\r\n        ev.preventDefault();\r\n        let target = ev.target as HTMLElement;\r\n\r\n        // First check if the clear everything puck has focus\r\n        if (target.classList.contains(\"yeti-multiselect-puck\")) {\r\n          target.click();\r\n          break;\r\n        } else {\r\n        // Next check if the cursor is on a selection\r\n        \r\n          if (this.cursorPosition >= 0) {\r\n            // Toggle selection on the option at this cursor position.\r\n            this.handleOptionClick(this.cursorPosition);\r\n          } else {\r\n\r\n        // User isn't selecting or activating clear puck, so just toggle the flyout open/close state.\r\n            this.toggleFlyout();\r\n          }\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  openFlyout() {\r\n    this.isOpen = true;\r\n  }\r\n\r\n\r\n\r\n  closeFlyout() {\r\n    this.isOpen = false;\r\n    this.cursorPosition = -1;\r\n    this.isTouched = true;\r\n    this.readyToVerifySlow.emit();\r\n  }\r\n\r\n\r\n\r\n  toggleFlyout() {\r\n    if (this.isOpen) {\r\n      this.closeFlyout()\r\n    } else {\r\n      this.openFlyout();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleFieldBlur(ev) {\r\n    this.isTouched = true;\r\n    this.readyToVerifySlow.emit(ev);\r\n  }\r\n\r\n\r\n\r\n  parseOptionElements(options: HTMLCollection) {\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      \r\n      let option = options.item(i);\r\n      \r\n      // First, confirm this element is indeed a yeti-multiselect-option element.\r\n      if (option.tagName.toLowerCase() == 'yeti-multiselect-option') {\r\n\r\n        let optionId;\r\n\r\n        if (option.hasAttribute(\"id\")) {\r\n          optionId = option.getAttribute(\"id\");\r\n        } else {\r\n          optionId = `${this.el.getAttribute(\"id\")}_option${i}`;\r\n        }\r\n\r\n        this.options.push({\r\n          selected: option.hasAttribute(\"selected\"),\r\n          label: option.innerHTML,\r\n          id: optionId\r\n        });\r\n\r\n        if (option.hasAttribute(\"selected\")) {\r\n          ++this.numSelections;\r\n        }\r\n\r\n      }\r\n\r\n    } // End for\r\n\r\n    // Finally, we need to remove the option elements.\r\n    for (let j = options.length - 1; j >= 0; --j) {\r\n      options.item(j).remove();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  getPlaceholderDisplay() {\r\n    // Returns the string of text that should go in the placeholder area.\r\n    switch (this.numSelections) {\r\n\r\n      case 0:\r\n        return this.placeholder;\r\n\r\n      case 1:\r\n        for (let i=0; i < this.options.length; i++) {\r\n          \r\n          if (this.options[i].selected) {\r\n            return this.options[i].label;\r\n          }\r\n\r\n        }\r\n\r\n      default: // Multiple selections\r\n        return `${this.numSelections} selections`;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  renderActualOptions() {\r\n    // Creates the <option>s for the actual <select>.\r\n    let optionsActual = [];\r\n    for (let i=0; i<this.options.length; i++) {\r\n      let optionActual = <option value={this.options[i].label} selected={this.options[i].selected}>{this.options[i].label}</option>;\r\n      optionsActual.push(optionActual);\r\n    }\r\n\r\n    return optionsActual;\r\n  }\r\n\r\n\r\n\r\n  handleOptionClick(i: number) {\r\n    // i = options index\r\n    let newValue = [];\r\n    this.numSelections = (this.options[i].selected) ? --this.numSelections : ++this.numSelections;\r\n    this.options[i].selected = !this.options[i].selected;\r\n    for (let j = 0; j < this.options.length; j++) {\r\n      if (this.options[j].selected) {\r\n        newValue.push(this.options[j].label);\r\n      }\r\n    }\r\n    this.value = newValue.toString();\r\n    this.iLoveJSX = !this.iLoveJSX; // Trigger re-render\r\n    this.readyToVerifyFast.emit();\r\n  }\r\n\r\n\r\n\r\n  handleClearSelections(ev: Event) {\r\n    let fieldElement = this.el.querySelector(\".yeti-multiselect\") as HTMLElement;\r\n    for (let i=0; i<this.options.length; i++) {\r\n      this.options[i].selected = false;\r\n    }\r\n    this.value = \"\";\r\n    this.numSelections = 0;\r\n    fieldElement.focus();\r\n    ev.stopPropagation();\r\n    this.readyToVerifySlow.emit();\r\n    this.readyToVerifyFast.emit();\r\n  }\r\n\r\n\r\n\r\n  handleActualFocus() {\r\n    let facade = this.el.querySelector(\".yeti-multiselect\") as HTMLElement;\r\n    if (facade) {\r\n      facade.focus();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  //handleProgrammaticValueChange(newValue: string, oldValue: string) {\r\n    // Usually you'd pre-set the value of the control by specifying the selected attribute of yeti-multiselect-option, however it can also be\r\n    // set programmatically via the value property of the component.\r\n    \r\n    //console.log(`Value should change from ${oldValue} to ${newValue}`);\r\n  //}\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids and handle any <yeti-multiselect-option> elements\r\n    let optionElements = this.el.children;\r\n\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    this.actualId = (this.actualId != \"\") ? this.actualId : `${componentId}_actual`;\r\n    this.actualName = this.actualId;\r\n\r\n    this.facadeId = (this.facadeId != \"\") ? this.facadeId : `${componentId}_facade`;\r\n    \r\n\r\n    // Handle any <yeti-multiselect-option> elements\r\n    if (this.el.hasAttribute(\"id\") && this.el.getAttribute(\"id\") != \"\") { \r\n      this.el.getAttribute(\"id\");\r\n    } else {\r\n      this.el.setAttribute(\"id\", utils.generateUniqueId());\r\n    }\r\n\r\n    // Look for and handle any <yeti-multiselect-option> elements.\r\n    if (optionElements.length > 0) {\r\n      \r\n      this.parseOptionElements(optionElements);\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  componentWillRender() {\r\n    if (this.value == \"\") {\r\n      for (let i=0; i<this.options.length; i++) {\r\n        this.options[i].selected = false;\r\n      }\r\n      this.value = \"\";\r\n      this.numSelections = 0;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    // If the cursor is over an option, make sure it's visible.\r\n    if (this.isOpen) {\r\n      // The facade flyout is open. If one of the options is being hovered over then we want to scroll it into view.\r\n      // If not, then we'll scroll the whole flyout into view.\r\n      let flyout = this.el.querySelector(\".yeti-multiselect-flyout\");\r\n      let hoveredOption = this.el.querySelector(\".yeti-multiselect-option__hover\");\r\n      let thingToScrollIntoView = (hoveredOption) ? hoveredOption : flyout;\r\n      thingToScrollIntoView.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\"\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperClasses = 'yeti-multiselect';\r\n    let flyoutClass = 'yeti-multiselect-flyout';\r\n\r\n    if (this.wrapperClass != '') {\r\n      wrapperClasses += ' ' + this.wrapperClass;\r\n    }\r\n\r\n    if (this.isValid == false) {\r\n      wrapperClasses += ' yeti-multiselect__error';\r\n    }\r\n\r\n    flyoutClass += (this.isOpen) ? \" yeti-multiselect-flyout__open\" : \"\";\r\n\r\n    if (this.menuAlignment == \"right\") {\r\n      flyoutClass += ' yeti-multiselect-flyout-align-right'\r\n    }\r\n\r\n    return ([\r\n      <div class=\"yeti-multiselect-wrapper\">\r\n\r\n        <select\r\n          tabIndex={-1}\r\n          class=\"yeti-multiselect-actual yeti-a11y-hidden\"\r\n          multiple={true}\r\n          id={this.actualId}\r\n          name={this.actualName}\r\n          onFocus={() => {this.handleActualFocus()}}\r\n          {...((!this.isValid) ? {\"aria-invalid\": true} : {})}\r\n          {...((this.labelledBy != \"\") ? {\"aria-labeledby\": this.labelledBy} : {})}\r\n          {...((this.describedBy != \"\") ? {\"aria-describedby\": this.describedBy} : {})}\r\n        >\r\n          \r\n          {this.renderActualOptions()}\r\n\r\n        </select>\r\n\r\n        <div \r\n          tabIndex={0}\r\n          class={wrapperClasses}\r\n          onClick={() => {\r\n            this.isOpen = !this.isOpen;\r\n          }}\r\n          onFocus={() => {\r\n            this.isTouched = true;\r\n          }}\r\n          aria-hidden=\"true\"\r\n        >\r\n\r\n          <span class=\"yeti-multiselect-placeholder\" title={this.getPlaceholderDisplay()}>{this.getPlaceholderDisplay()}</span>\r\n\r\n          { (this.showClear && this.numSelections > 0) ? \r\n\r\n            (<button class=\"yeti-multiselect-puck\" title=\"Clear all selections\" onClick={ (ev) => { this.handleClearSelections(ev); ev.preventDefault() }}>\r\n              <span class=\"material-icons yeti-multiselect-puck-icon\" aria-hidden=\"true\">cancel</span>\r\n            </button>)\r\n\r\n          :\r\n\r\n            \"\"\r\n\r\n          }\r\n\r\n        </div>\r\n\r\n        \r\n        <div class={flyoutClass} aria-hidden=\"true\">\r\n        \r\n          <ul\r\n            class=\"yeti-multiselect-options\"\r\n            id={this.facadeId}\r\n          >\r\n\r\n            {this.options.map((option, i) => {\r\n\r\n                let optionClass = (this.cursorPosition == i) ? \"yeti-multiselect-option yeti-multiselect-option__hover\" : \"yeti-multiselect-option\";\r\n              \r\n                return (\r\n                  <li id={option.id} key={option.id}>\r\n                    <button class={optionClass} tabIndex={-1} onClick={(ev) => { this.handleOptionClick(i); ev.preventDefault(); }}>\r\n                      <span class=\"yeti-multiselect-option-checkbox\">\r\n                        <span class=\"material-icons\">{(option.selected) ? \"check_box\" : \"check_box_outline_blank\"}</span>\r\n                      </span>\r\n                      <span class=\"yeti-multiselect-option-label\">{option.label}</span>\r\n                    </button>\r\n                  </li>\r\n                )\r\n              }\r\n            \r\n            )}\r\n\r\n          </ul>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n}"],"mappings":"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"}