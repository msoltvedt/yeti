{"version":3,"names":["YetiFileExplorer","name","content","path","isFolder","isRoot","isSelected","selectedIndex","offset","pageSize","totalElements","id","utils","generateUniqueId","type","handlePathChange","handleItemClick","depth","index","serverPathStringToClickedFolder","this","length","pop","forEach","val","fileExplorerChange","emit","newFolderObject","folder","undefined","renderFolders","folders","emptyFolder","push","renderFolder","minimumDisplayDepth","jsx","h","class","renderFolderContents","map","item","renderItem","buttonCSS","onClick","iconCode","alt","render","wrapperCSS","componentDidRender","folderElements","el","querySelectorAll","scrollIntoView","behavior","block"],"sources":["src/components/yeti-file-explorer/yeti-file-explorer.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Event, EventEmitter, Method, Watch } from '@stencil/core';\r\nimport { YetiFileSystemItem, utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-file-explorer',\r\n  shadow: false,\r\n})\r\nexport class YetiFileExplorer {\r\n\r\n  /**\r\n   * Fires when the user clicks a folder\r\n   */\r\n  @Event() fileExplorerChange: EventEmitter;\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * CSS classlist applied to the explorer wrapper element.\r\n   */\r\n  @Prop({ attribute: 'wrapper-css'}) wrapperCSS?: string = '';\r\n\r\n  /**\r\n   * Whether or not to show files (folders are always shown).\r\n   */\r\n  @Prop() showFiles: boolean = true;\r\n\r\n  /**\r\n   * minimum number of folder layers to show\r\n   */\r\n  @Prop() minimumDisplayDepth: number = 3;\r\n\r\n  /**\r\n   * All the displayed folders in order from root to terminus\r\n   */\r\n  @Prop({ mutable: true }) path: YetiFileSystemItem[] = /*[\r\n    {\r\n      name: \"root\",\r\n      content: [],\r\n      path: \"//\",\r\n      isFolder: true,\r\n      isRoot: true,\r\n      isSelected: true,\r\n      isTerminus: false,\r\n      selectedIndex: -1,\r\n      offset: 0,\r\n      pageSize: 1000,\r\n      totalElements: 0,\r\n      id: utils.generateUniqueId(),\r\n      type: \"folder\"\r\n    }\r\n  ];*/\r\n  [\r\n    {\r\n      name: \"root\",\r\n      content: [\r\n        {\r\n          name: \"subfolder1\",\r\n          content: [],\r\n          path: \"//subfolder1\",\r\n          isFolder: true,\r\n          isRoot: false,\r\n          isSelected: false,\r\n          selectedIndex: -1,\r\n          offset: 0,\r\n          pageSize: 1000,\r\n          totalElements: 0,\r\n          id: utils.generateUniqueId(),\r\n          type: \"folder\"\r\n        },\r\n        {\r\n          name: \"subfolder2\",\r\n          content: [],\r\n          path: \"//subfolder2\",\r\n          isFolder: true,\r\n          isRoot: false,\r\n          isSelected: false,\r\n          selectedIndex: -1,\r\n          offset: 0,\r\n          pageSize: 1000,\r\n          totalElements: 0,\r\n          id: utils.generateUniqueId(),\r\n          type: \"folder\"\r\n        },\r\n        {\r\n          name: \"subfolder3\",\r\n          content: [],\r\n          path: \"//subfolder3\",\r\n          isFolder: true,\r\n          isRoot: false,\r\n          isSelected: false,\r\n          selectedIndex: -1,\r\n          offset: 0,\r\n          pageSize: 1000,\r\n          totalElements: 0,\r\n          id: utils.generateUniqueId(),\r\n          type: \"folder\"\r\n        },\r\n      ],\r\n      path: \"\",\r\n      isFolder: true,\r\n      isRoot: true,\r\n      isSelected: true,\r\n      selectedIndex: -1,\r\n      offset: 0,\r\n      pageSize: 1000,\r\n      totalElements: 3,\r\n      id: utils.generateUniqueId(),\r\n      type: \"folder\"\r\n    }\r\n  ];\r\n  @Watch(\"path\")\r\n  handlePathChange() {\r\n    // TODO: validate the incoming path variable\r\n  }\r\n\r\n  /**\r\n   * Toggle to trigger a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n\r\n\r\n  handleItemClick(depth: number = 0, index: number = 0) {\r\n    // A folder or file was just clicked. Handle it.\r\n    let serverPathStringToClickedFolder = \"\"; // This will be the term by which the server identifies this folder\r\n    \r\n    // If necessary, prune any folders that would be to the right of this.\r\n    while (this.path.length > depth + 1) {\r\n      this.path.pop();\r\n    }\r\n\r\n    // (Re)set the isSelected state for this folder and its sibling\r\n    this.path[depth].content.forEach((val) => {\r\n      val.isSelected = false;\r\n    })\r\n\r\n    // Update the path at this depth\r\n    this.path[depth].isSelected = true;\r\n    this.path[depth].selectedIndex = index;\r\n\r\n    // Derive the server path to this folder\r\n    serverPathStringToClickedFolder += this.path[depth].content[index].path;\r\n\r\n    // Fire the change event so the component consumer can provide new data\r\n    this.fileExplorerChange.emit({\r\n      \"path\": serverPathStringToClickedFolder,\r\n      \"depth\": depth,\r\n      \"index\": index\r\n    });\r\n    \r\n  }\r\n\r\n\r\n\r\n  @Method()\r\n  async newFolderObject() {\r\n    let folder: YetiFileSystemItem = {\r\n      content: [],\r\n      name: undefined,\r\n      path: undefined,\r\n      isFolder: true,\r\n      isRoot: false,\r\n      isSelected: false,\r\n      selectedIndex: -1,\r\n      id: utils.generateUniqueId()\r\n    };\r\n    return folder;\r\n  }\r\n\r\n\r\n\r\n  renderFolders() {\r\n    // Render all the displayed folders for the currently selected path.\r\n    let folders = [];\r\n    let emptyFolder: YetiFileSystemItem = {\r\n      name: \"\",\r\n      path: \"/\",\r\n      content: [],\r\n      selectedIndex: -1,\r\n      isRoot: false,\r\n      isSelected: false\r\n    }\r\n\r\n    // Loop through the path and render each folder in it\r\n    this.path.forEach((folder, index) => {\r\n      folders.push(this.renderFolder(folder, index));\r\n    });\r\n\r\n    while (folders.length < this.minimumDisplayDepth) {\r\n      folders.push(this.renderFolder(emptyFolder, -1));\r\n    }\r\n\r\n    return folders;\r\n  }\r\n\r\n\r\n\r\n  renderFolder(folder: YetiFileSystemItem, depth) {\r\n\r\n    let jsx =\r\n\r\n      <div class=\"yeti-file_explorer-folder\">\r\n\r\n        <ul class=\"yeti-file_explorer-folder-items\">\r\n\r\n          {this.renderFolderContents(folder, depth)}\r\n\r\n        </ul>\r\n\r\n      </div>\r\n\r\n    return jsx;\r\n      \r\n  }\r\n\r\n\r\n\r\n  renderFolderContents(folder: YetiFileSystemItem, depth: number = -1) {\r\n\r\n    return folder.content.map((item, index) => {\r\n      return this.renderItem(item, depth, index);\r\n    });\r\n\r\n  }\r\n\r\n\r\n\r\n  renderItem(item: YetiFileSystemItem, depth: number = -1, index: number = -1) {\r\n\r\n    let buttonCSS = \"yeti-file_explorer-folder-item-wrapper\" + ((item.isSelected) ? \" yeti-file_explorer-folder-item-wrapper__selected\" : \"\");\r\n    let jsx = \r\n\r\n      <li class=\"yeti-file_explorer-folder-item\">\r\n\r\n          <button class={buttonCSS} onClick={() => { this.handleItemClick(depth, index); }} data-path={item.path}>\r\n\r\n              <yeti-icon iconCode=\"folder\" alt=\"subfolder\" icon-style=\"outlined\" class=\"yeti-file_explorer-folder-item-icon\"></yeti-icon>\r\n            \r\n              <span class=\"yeti-file_explorer-folder-item-name\">{item.name}</span>\r\n            \r\n              {/* {\r\n                (item.content.length) ? \r\n                  <yeti-icon iconCode=\"chevron_right\" alt=\"open subfolder\" class=\"yeti-file_explorer-folder-more\"></yeti-icon>\r\n                : \r\n                  \"\"\r\n              } */}\r\n\r\n              <yeti-icon iconCode=\"chevron_right\" alt=\"open subfolder\" class=\"yeti-file_explorer-folder-more\"></yeti-icon>\r\n        \r\n          </button>\r\n\r\n      </li>\r\n\r\n    return jsx;\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperCSS = 'yeti-file_explorer-wrapper';\r\n\r\n    wrapperCSS += (this.wrapperCSS != '') ? ` ${this.wrapperCSS}` : '';\r\n\r\n    return (\r\n\r\n      <div class={wrapperCSS}>\r\n\r\n        <div class=\"yeti-file_explorer\">\r\n\r\n          <div class=\"yeti-file_explorer-folders\">\r\n\r\n            {this.renderFolders()}\r\n\r\n          </div>{/* /folders */}\r\n\r\n        </div>{/* /file_explorer */}\r\n\r\n      \r\n        <div class=\"yeti-file_explorer-path\">{this.path[ this.path.length - 1 ].path}</div>\r\n\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    // Scroll the last folder into view\r\n    let folderElements = this.el.querySelectorAll(\".yeti-file_explorer-folder\");\r\n\r\n    if (folderElements && folderElements.length) {\r\n      folderElements[ folderElements.length-1 ].scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\"\r\n      });\r\n    }\r\n  }\r\n\r\n}"],"mappings":"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"}