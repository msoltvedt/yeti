{"file":"yeti-toast.entry.esm.js","mappings":"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","names":[],"sources":["src/components/yeti-toast/yeti-toast.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Event, EventEmitter } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-toast',\r\n  shadow: false,\r\n})\r\nexport class YetiToast {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Fires when the user clicks the action button.\r\n   */\r\n  @Event({ bubbles: true }) toastActionClick: EventEmitter;\r\n\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop() wrapperClass: string = '';\r\n\r\n  /**\r\n   * The type of toast: error (default) | info | success | warning | warningAlt.\r\n   */\r\n  @Prop() toastType: string = \"\";\r\n\r\n  /**\r\n   * Whether to use the low-contrast variant or not.\r\n   */\r\n  @Prop() isLowContrast: boolean = false;\r\n\r\n  /**\r\n   * Whether to show the close button or not.\r\n   */\r\n  @Prop() showCloseButton: boolean = true;\r\n\r\n  /**\r\n   * Which icon to use (see Google Material Icons).\r\n   */\r\n  @Prop() iconCode: string = \"\";\r\n\r\n  /**\r\n   * The alt text for the icon.\r\n   */\r\n  @Prop() iconAltText: string = \"\";\r\n\r\n  /**\r\n   * Text value to display as the toast's title.\r\n   */\r\n  @Prop() textTitle: string = \"Mmmm Toast!\";\r\n\r\n  /**\r\n   * Optionally set a size (currently only supports default and \"full\")\r\n   */\r\n  @Prop() size: string = \"\";\r\n\r\n  /**\r\n   * Text label for the action button.\r\n   */\r\n  @Prop() actionLabel: string = \"\";\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) toastId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * Time in ms before the Toast closes itself. Values of less than 1 will be ignored.\r\n   */\r\n  @Prop() closesSelfAfter: number = 0;\r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the toast is visible or not.\r\n   */\r\n  @Prop() isVisible: boolean = true;\r\n\r\n\r\n\r\n  handleCloseClick(e) {\r\n    this.isVisible = false;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  handleActionClick(e) {\r\n    this.toastActionClick.emit();\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    this.toastId = (this.toastId != \"\") ? this.toastId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n\r\n    if (this.closesSelfAfter > 0) {\r\n      setTimeout(() => {\r\n        this.isVisible = false;\r\n      }, this.closesSelfAfter);\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let altText = this.iconAltText;\r\n    let iconCode = this.iconCode;\r\n    let wrapperClass = 'yeti-toast';\r\n    wrapperClass += (this.size == 'full') ? ' yeti-toast_full' : '';\r\n    wrapperClass += (this.wrapperClass !== '') ? ` ${this.wrapperClass}` : ``;\r\n\r\n    // Set type-based CSS class\r\n    switch (this.toastType) {\r\n\r\n      case \"error\":\r\n\r\n        wrapperClass += ' yeti-toast-error';\r\n        altText = (altText != '') ? altText : 'Error';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n      case \"info\":\r\n\r\n        wrapperClass += ' yeti-toast-info';\r\n        altText = (altText != '') ? altText : 'Information';\r\n        iconCode = (iconCode != '') ? iconCode : 'info';\r\n        break;\r\n\r\n      case \"success\":\r\n\r\n        wrapperClass += ' yeti-toast-success';\r\n        altText = (altText != '') ? altText : 'Success';\r\n        iconCode = (iconCode != '') ? iconCode : 'check_circle';\r\n        break;\r\n\r\n      case \"warning\":\r\n\r\n        wrapperClass += ' yeti-toast-warning';\r\n        altText = (altText != '') ? altText : 'Warning';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n      case \"warningAlt\":\r\n\r\n        wrapperClass += ' yeti-toast-warning_alt';\r\n        altText = (altText != '') ? altText : 'Warning';\r\n        iconCode = (iconCode != '') ? iconCode : 'warning';\r\n        break;\r\n\r\n      case \"\":\r\n      default:\r\n        altText = (altText != '') ? altText : 'Error';\r\n        iconCode = (iconCode != '') ? iconCode : 'error';\r\n        break;\r\n\r\n    }\r\n    \r\n\r\n    // Set low-contrast mode\r\n    wrapperClass += (this.isLowContrast) ? ' yeti-toast-low_contrast' : '';\r\n\r\n\r\n    // Set visibility\r\n    wrapperClass += (this.isVisible) ? '' : ' yeti-toast__hidden';\r\n  \r\n\r\n    return (\r\n      <div class={wrapperClass} id={this.toastId} role=\"status\">\r\n\r\n        <div class=\"yeti-toast-icon\">\r\n          \r\n          <span class=\"material-icons\" aria-hidden=\"true\">{iconCode}</span>\r\n          <span class=\"yeti-a11y-hidden\">{altText}</span>\r\n\r\n        </div>\r\n\r\n\r\n        <div class=\"yeti-toast-content\">\r\n        \r\n          {\r\n            (this.textTitle != \"\") ?\r\n              <div class=\"yeti-toast-content-title\">{this.textTitle}</div>\r\n            :\r\n              ''\r\n          }\r\n          <div class=\"yeti-toast-content-subtitle\">\r\n\r\n            <slot />\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n        {\r\n          (this.actionLabel != \"\") ?\r\n\r\n            <button class=\"yeti-toast-action\" onClick={(e) => this.handleActionClick(e)}>\r\n              {this.actionLabel}\r\n            </button>\r\n          :\r\n            \"\"\r\n        }\r\n\r\n        {\r\n          (this.showCloseButton) ?\r\n\r\n            <button class=\"yeti-toast-close\" onClick={(e) => this.handleCloseClick(e)}>\r\n              <span class=\"material-icons\">close</span>\r\n            </button>\r\n          :\r\n            \"\"\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}"],"version":3}