{"version":3,"names":["YetiTooltip","this","justClickedClosed","handleSlotHover","clickToOpen","scrollTooltipIntoView","handleSlotFocus","handleDeFocusingClick","isClickedOpen","handleClick","e","stopImmediatePropagation","handleTriggerClick","preventDefault","handleTriggerKeyPress","key","handleCloseTooltipClick","actual","el","querySelector","scrollIntoView","behavior","block","componentWillLoad","componentId","getAttribute","utils","generateUniqueId","setAttribute","hasRichContent","tipId","slotId","renderContent","h","name","text","render","wrapperClass","tipClass","tooltipClass","position","class","Object","assign","onClick","onKeyPress","tabindex","id","iconCode","iconClass","componentDidRender","slot","firstElementChild","trigger","focus"],"sources":["src/components/yeti-tooltip/yeti-tooltip.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Listen } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-tooltip',\r\n  shadow: false,\r\n})\r\nexport class YetiTooltip {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop() wrapperClass: string = '';\r\n\r\n  /**\r\n   * CSS classlist to add to the actual tooltip element.\r\n   */\r\n  @Prop() tooltipClass: string = '';\r\n\r\n  /**\r\n   * Text value to display as the tooltip's contents.\r\n   */\r\n  @Prop() text: string = \"I'm a helpful tooltip.\";\r\n\r\n  /**\r\n   * Token list to describe the tooltip's position relative to its anchor: left | right and/or above | below.\r\n   */\r\n  @Prop() position: string = \"above\";\r\n\r\n  /**\r\n   * Boolean value that sets whether the tooltip opens on hover/focus (default) or on click.\r\n   */\r\n  @Prop() clickToOpen: boolean = false;\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) tipId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * Whether the anchor should be forced to be a CSS display block style or left as is.\r\n   */\r\n  @Prop() blockAnchor: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip should remain open permanently.\r\n   */\r\n  @Prop() forceOpen: boolean = false;\r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip has been clicked open or not.\r\n   */\r\n  @State() isClickedOpen: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip has rich content (i.e. html rather than just a string of text) or not.\r\n   */\r\n  @State() hasRichContent: boolean = false;\r\n\r\n  justClickedClosed: boolean = false;\r\n\r\n\r\n  @Listen('mouseover')\r\n  handleSlotHover() {\r\n    if (!this.clickToOpen) {\r\n      this.scrollTooltipIntoView();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen('focusin')\r\n  handleSlotFocus() {\r\n    if (!this.clickToOpen) {\r\n      this.scrollTooltipIntoView();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen('click', {\r\n    target: 'body'\r\n  })\r\n  handleDeFocusingClick() {\r\n    this.isClickedOpen = false;\r\n  }\r\n\r\n\r\n\r\n  @Listen('click')\r\n  handleClick(e) {\r\n    e.stopImmediatePropagation(); // Intercept the click event before it gets to the body-level handler\r\n  }\r\n\r\n  \r\n\r\n  handleTriggerClick(e) {\r\n    if (this.clickToOpen && !this.justClickedClosed) {\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      this.scrollTooltipIntoView();\r\n      this.isClickedOpen = !this.isClickedOpen;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  handleTriggerKeyPress(e) {\r\n    if (this.clickToOpen && e.key == \"Enter\" && !this.justClickedClosed) {\r\n      this.handleTriggerClick(e);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleCloseTooltipClick(e) {\r\n    this.justClickedClosed = true;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n    this.isClickedOpen = false;\r\n  }\r\n\r\n\r\n\r\n  scrollTooltipIntoView() {\r\n    let actual = this.el.querySelector(\".yeti-tooltip\");\r\n    actual.scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"nearest\"\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    if (this.el.querySelector('[slot=\"content\"]')) {\r\n      this.hasRichContent = true;\r\n    }\r\n\r\n    this.tipId = (this.tipId != \"\") ? this.tipId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n  }\r\n\r\n\r\n\r\n  renderContent() {\r\n    if (this.hasRichContent) {\r\n      return <slot name=\"content\"></slot>\r\n    } else {\r\n      return this.text;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperClass = 'yeti-tooltip-wrapper';\r\n    let tipClass = 'yeti-tooltip';\r\n\r\n    wrapperClass += (this.wrapperClass != '') ? ` ${this.wrapperClass}` : '';\r\n    tipClass += (this.tooltipClass != '') ? ` ${this.tooltipClass}` : '';\r\n\r\n    tipClass += (this.isClickedOpen) ? ' yeti-tooltip__clicked_open' : '';\r\n\r\n    tipClass += (this.forceOpen) ? ' yeti-tooltip__forced_open' : '';\r\n\r\n    wrapperClass += (this.clickToOpen) ? ' yeti-tooltip-wrapper-is_click_to_open' : '';\r\n    wrapperClass += (this.blockAnchor) ? ' yeti-tooltip-wrapper-has_block_anchor' : '';\r\n\r\n    switch (this.position) {\r\n\r\n      case \"right\":\r\n\r\n        tipClass += \" yeti-tooltip-right\";\r\n        break;\r\n\r\n      case \"below\":\r\n\r\n        tipClass += \" yeti-tooltip-below\";\r\n        break;\r\n\r\n      case \"left\":\r\n\r\n        tipClass += \" yeti-tooltip-left\";\r\n        break;\r\n\r\n      case \"below-left\":\r\n\r\n        tipClass += \" yeti-tooltip-below-left\";\r\n        break;\r\n\r\n      case \"below-right\":\r\n\r\n        tipClass += \" yeti-tooltip-below-right\";\r\n        break;\r\n\r\n      case \"above-left\":\r\n\r\n        tipClass += \" yeti-tooltip-above-left\";\r\n        break;\r\n\r\n      case \"above-right\":\r\n\r\n        tipClass += \" yeti-tooltip-above-right\";\r\n        break;\r\n\r\n    }\r\n\r\n    return ([\r\n      <div class={wrapperClass}>\r\n\r\n        <div \r\n          class=\"yeti-tooltip-trigger\" \r\n          onClick={(e) => this.handleTriggerClick(e)}\r\n          onKeyPress={(e) => this.handleTriggerKeyPress(e)}\r\n          {...((this.clickToOpen) ? { \"tabindex\": 0 } : {})}  \r\n        >\r\n\r\n          <slot />\r\n\r\n        </div>\r\n\r\n\r\n        <div class={tipClass}>\r\n\r\n          <div class=\"yeti-tooltip-content\" id={this.tipId}>{this.renderContent()}</div>\r\n\r\n          {\r\n            (this.clickToOpen && this.isClickedOpen) ?\r\n\r\n              <button class=\"yeti-tooltip-close\" onClick={(e) => { this.handleCloseTooltipClick(e); }}>\r\n                <yeti-icon iconCode=\"close\" iconClass='yeti-color-white yeti-typo-size-5'></yeti-icon>\r\n              </button>\r\n\r\n            :\r\n              null\r\n          }\r\n          \r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    let slot = this.el.querySelector(\".yeti-tooltip-trigger\").firstElementChild;\r\n    let trigger = this.el.querySelector(\".yeti-tooltip-trigger\") as HTMLElement;\r\n    //slot.setAttribute(\"tabindex\", \"0\");\r\n    slot.setAttribute(\"aria-describedby\",this.tipId);\r\n\r\n    if (this.justClickedClosed && trigger) {\r\n      // The user just clicked the tooltip closed. Restore focus to the trigger.\r\n      this.justClickedClosed = false;\r\n      trigger.focus();\r\n    }\r\n\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]}