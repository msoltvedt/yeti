{"version":3,"names":["YetiField","this","tipId","utils","generateUniqueId","errorId","hasSlottedField","hasSlottedRequired","inputId","validateLabel","newValue","isInvalid","Error","updateSlottedContentForErrorState","element","el","querySelector","classList","add","remove","handleReadyToVerifySlow","ev","childControl","target","autovalidate","required","value","errorMessage","label","isValid","nodeName","toLowerCase","componentWillLoad","potentiallySlottedElement","potentiallySlottedRequired","describedBy","tip","id","hasAttribute","inputName","getAttribute","setAttribute","render","cssClass","wrapperClass","tipClass","tipPosition","isInline","fieldClass","h","key","class","htmlFor","name","type","defaultValue","Object","assign","inputMaxlength"],"sources":["src/components/yeti-field/yeti-field.tsx"],"sourcesContent":["import { Component, Prop, h, State, Watch, Listen, Element } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-field',\r\n  shadow: false,\r\n})\r\nexport class YetiField {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * id that will be assigned to the actual input element. A unique one will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputId: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputName: string = this.inputId;\r\n\r\n  /**\r\n   * type that will be assigned to the actual input element.\r\n   */\r\n  @Prop() type: string = \"text\";\r\n\r\n  /**\r\n   * CSS classlist that will be assigned to the containing field element (probably a div).\r\n   */\r\n  @Prop() fieldClass: string = \"\";\r\n\r\n  /**\r\n   * maximum length for the field.\r\n   */\r\n  @Prop() inputMaxlength?: number = 0;\r\n  \r\n  /**\r\n   * Mandatory value for the label of the field.\r\n   */\r\n  @Prop() label!: string;\r\n  @Watch('label')\r\n  validateLabel(newValue: string) {\r\n    // Label must have a non-empty value.\r\n    const isInvalid = typeof newValue !== 'string' || newValue === '';\r\n    if (isInvalid) {\r\n      throw new Error('yeti-field must have a non-empty label attribute');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Value for the optional input tip that appears at the bottom of the field.\r\n   */\r\n  @Prop() tip: string = \"\";\r\n\r\n  /**\r\n   * Position of the input tip relative to the rest of the field's contents. Defaults to \"below\", can also be \"above\".\r\n   */\r\n  @Prop() tipPosition?: string = \"below\";\r\n\r\n  /**\r\n   * Whether the field is required to have a valid value by the greater form.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  /**\r\n   * Error message that appears when the field is invalid. Can be updated at any time.\r\n   */\r\n  @Prop({mutable: true}) errorMessage: string = 'Error: please correct this field.'\r\n\r\n  /**\r\n   * Whether the input is currently valid or invalid.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean = true;\r\n  @Watch('isValid')\r\n  updateSlottedContentForErrorState(newValue: string) {\r\n    if (!this.hasSlottedField) {\r\n      return; // We don't need to do anything here unless the form element comes via slotted content.\r\n    }\r\n\r\n    let element = this.el.querySelector(`#${this.inputId}`);\r\n\r\n    if (element) {\r\n\r\n      if (newValue) {\r\n        element.classList.add(\"yeti-input__error\");\r\n      } else {\r\n        element.classList.remove(\"yeti-input__error\");\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default value of the field's input.\r\n   */\r\n  @Prop() defaultValue: string = '';\r\n\r\n  /**\r\n   * Determines whether the field should attempt to validate itself or merely pass through any readyToVerify events from its input.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) autovalidate: boolean = true;\r\n\r\n  /**\r\n   * Determines whether the field uses block (default) or inline labels.\r\n   */\r\n  @Prop() isInline: boolean = false;\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the Field's wrapper.\r\n   */\r\n  @Prop() wrapperClass?: string = \"\";\r\n\r\n  /**\r\n   * Tracks whether the field's input has been focused and then blurred (i.e. if the user has interacted with it yet).\r\n   */\r\n  @State() isDirty: boolean = false;\r\n  \r\n  @Listen('readyToVerifySlow', { capture: true })\r\n  handleReadyToVerifySlow(ev) {\r\n\r\n    let childControl = ev.target;\r\n\r\n    if (this.autovalidate == false) {\r\n      return;\r\n    }\r\n\r\n    if (this.required) {\r\n\r\n      // Autoverification is on, this field is required, and the child component just notified us that it's ready for verification.\r\n\r\n      // First, regardless of whether it's an input or date-picker, it can't be empty.\r\n      if (childControl.value == \"\") {\r\n\r\n        this.errorMessage = (this.errorMessage != \"\") ? this.errorMessage : `${this.label} field is required.`\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n      \r\n    } else if (childControl.nodeName.toLowerCase() == \"yeti-date-picker\") {\r\n\r\n      // Second, if it's a non-empty date-picker, see if it's a valid date.\r\n\r\n      if (!childControl.isValid) {\r\n\r\n        // The date-picker already validates itself. We just need to check its status.\r\n        this.errorMessage = 'Enter the date in mm/dd/yyyy format.'\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n    }\r\n\r\n    this.isValid = true;\r\n\r\n  }\r\n\r\n\r\n  tipId = utils.generateUniqueId();\r\n  errorId = utils.generateUniqueId();\r\n  hasSlottedField: boolean = false;\r\n  hasSlottedRequired: boolean = false;\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    \r\n    let potentiallySlottedElement = this.el.querySelector('[slot=\"element\"]');\r\n    let potentiallySlottedRequired = this.el.querySelector('[slot=\"required\"]');\r\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\r\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\r\n\r\n    // Handle Required\r\n    if (potentiallySlottedRequired) {\r\n\r\n      this.hasSlottedRequired = true;\r\n\r\n    }\r\n\r\n    // Handle Element\r\n    if (potentiallySlottedElement) {\r\n\r\n      this.hasSlottedField = true;\r\n      this.autovalidate = false; // We can't autovalidate a slotted element provided by the user\r\n\r\n      // See if the slotted element has an id\r\n      if (potentiallySlottedElement.id) {\r\n        this.inputId = potentiallySlottedElement.id; // It does, so replace the auto-generated default with the user-provided one.\r\n      } else {\r\n        potentiallySlottedElement.id = this.inputId; // It doesn't, so assign the auto-generated default one.\r\n      }\r\n\r\n      // See if the slotted element has a name\r\n      if (potentiallySlottedElement.hasAttribute(\"name\")) {\r\n        this.inputName = potentiallySlottedElement.getAttribute(\"name\"); // It does, so replace the auto-generated default with the user-provided one.\r\n      } else {\r\n        potentiallySlottedElement.setAttribute(\"name\", this.inputName);  // It doesn't, so assign the auto-generated default one.\r\n      }\r\n\r\n      // Connect the slotted element to the tip and/or error message\r\n      if (describedBy != \"\") {\r\n        potentiallySlottedElement.setAttribute(\"aria-describedby\", describedBy);\r\n      }\r\n\r\n      // Add the error class if necessary\r\n      if (!this.isValid) {\r\n        potentiallySlottedElement.classList.add(\"yeti-input__error\");\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let cssClass = \"yeti-form-field\";\r\n    cssClass += (this.wrapperClass != \"\") ? ` ${this.wrapperClass}` : '';\r\n\r\n    let tipClass = `yeti-form-tip`;\r\n    tipClass += (this.tipPosition == \"above\") ? ` yeti-form-tip-above` : ``;\r\n\r\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\r\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\r\n\r\n\r\n    if (this.isInline) {\r\n      cssClass += \" yeti-form-field-inline\";\r\n    }\r\n\r\n    this.validateLabel(this.label);\r\n\r\n    if (this.fieldClass != \"\") {\r\n      cssClass = \"yeti-form-field \" + this.fieldClass;\r\n    }\r\n\r\n    return (\r\n      <div class={cssClass}>\r\n\r\n        <label htmlFor={this.inputId} class=\"yeti-form-label\">{`${this.label} `}\r\n          {(this.required && this.hasSlottedRequired) ? <slot name=\"required\"></slot> : null}\r\n        </label>\r\n\r\n        {(!this.hasSlottedField) ?\r\n\r\n            (this.type == \"date\") ?\r\n\r\n              <yeti-date-picker\r\n                input-id={this.inputId}\r\n                input-name={this.inputName}\r\n                value={this.defaultValue}\r\n                required={this.required}\r\n                is-valid={this.isValid}\r\n                described-by={describedBy}\r\n              ></yeti-date-picker>\r\n\r\n            :\r\n          \r\n              <yeti-input \r\n                input-id={this.inputId} \r\n                input-class={!this.isValid ? 'yeti-input__error' : null} \r\n                value={this.defaultValue} \r\n                required={this.required}\r\n                is-valid={this.isValid}\r\n                described-by={describedBy}\r\n                {...((this.inputMaxlength != 0) ? {\"input-maxlength\": this.inputMaxlength} : {})}\r\n              ></yeti-input>\r\n\r\n        :\r\n\r\n          <slot name=\"element\"></slot>\r\n\r\n        }\r\n\r\n        \r\n        {\r\n          (this.tip != \"\") ?\r\n\r\n            <span class={tipClass} aria-live=\"polite\" id={this.tipId}>{this.tip}</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n        \r\n        {\r\n          (this.errorMessage != \"\" && !this.isValid) ?\r\n\r\n            <span class=\"yeti-form-field-error\" aria-live=\"polite\" id={this.errorId}>{this.errorMessage}</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]}