{"file":"yeti-panel.entry.esm.js","mappings":";;;MAOa,SAAS;;;;QA6EpB,iBAAY,GAAY,KAAK,CAAC;uBA9DT,SAAS;4BAQH,KAAK;yBAKH,IAAI;0BAQR,IAAI;wBAiBP,KAAK,CAAC,gBAAgB,EAAE;yBAQvB,KAAK,CAAC,gBAAgB,EAAE;4BAQrB,EAAE;wBAKC,KAAK;;IApClC,sBAAsB,CAAC,QAAiB;QAEtC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC;YAC9B,WAAW,EAAE,IAAI,CAAC,EAAE;YACpB,YAAY,EAAE,QAAQ;SACvB,CAAC,CAAC;KAEJ;IAoCD,iBAAiB;QACf,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC;SACpC;KACF;IAID,iBAAiB;QAEf,IAAI,kBAAkB,GAAG,IAAI,CAAC,EAAE,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;QAErE,IAAI,kBAAkB,EAAE;YACtB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;KAEF;IAID,MAAM;QAEJ,IAAI,UAAU,GAAG,YAAY,CAAC;QAE9B,UAAU,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC;QAEjE,UAAU,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,wBAAwB,GAAG,EAAE,CAAC;QAClE,UAAU,IAAI,CAAC,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,IAAI,uBAAuB,GAAG,EAAE,CAAC;QAEpF,QAEI,4DAAK,KAAK,EAAE,UAAU,IAGnB,CAAC,IAAI,CAAC,SAAS;YACd,CAAC,IAAI,CAAC,YAAY;;gBAGhB,cACE,EAAE,EAAE,IAAI,CAAC,QAAQ,EACjB,KAAK,EAAC,mBAAmB,EACzB,OAAO,EAAE,QAAQ,IAAI,CAAC,iBAAiB,EAAE,CAAC,EAAE,mBAC7B,IAAI,CAAC,UAAU,mBACf,IAAI,CAAC,SAAS,EAC7B,IAAI,EAAC,QAAQ,IAGb,WAAK,KAAK,EAAC,4BAA4B,IAEpC,CAAC,IAAI,CAAC,UAAU;oBAEf,iBAAW,QAAQ,EAAC,aAAa,EAAC,GAAG,EAAC,EAAE,EAAC,SAAS,EAAC,yBAAyB,GAAa;;wBAIzF,iBAAW,QAAQ,EAAC,aAAa,EAAC,GAAG,EAAC,EAAE,EAAC,SAAS,EAAC,yBAAyB,GAAa,EAI3F,WAAK,KAAK,EAAC,0BAA0B,IAElC,IAAI,CAAC,OAAO,CAET,EAGN,YAAM,IAAI,EAAC,WAAW,GAAG,CAGrB,CAEC;;;oBAKT,WACE,EAAE,EAAE,IAAI,CAAC,QAAQ,EACjB,KAAK,EAAC,mBAAmB,IAGzB,WAAK,KAAK,EAAC,4BAA4B,IAGrC,WAAK,KAAK,EAAC,0BAA0B,IAElC,IAAI,CAAC,OAAO,CAET,EAGN,YAAM,IAAI,EAAC,WAAW,GAAG,CAGrB,CAEF;;gBAIR,EAAE,EAOJ,4DACE,EAAE,EAAE,IAAI,CAAC,SAAS,EAClB,KAAK,EAAC,oBAAoB,EAC1B,IAAI,EAAC,QAAQ,qBACI,IAAI,CAAC,QAAQ,IAG9B,8DAAQ,CAEJ,CAGF,EAER;KACH;;;;;;;;;","names":[],"sources":["src/components/yeti-panel/yeti-panel.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Event, EventEmitter, Watch } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-panel',\r\n  shadow: false,\r\n})\r\nexport class YetiPanel {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Event that fires when the panel's isExpanded state changes to expanded.\r\n   */\r\n  @Event({ bubbles: true }) panelExpansionChanged: EventEmitter;\r\n\r\n  /**\r\n   * The descriptive text that appears in the heading bar above the content.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) heading: string = 'Heading';\r\n\r\n  /**\r\n   * Whether or not this panel can expand or collapse\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isExpandable: boolean = false;\r\n\r\n  /**\r\n   * Whether or not this panel has a header (it will have by default)\r\n   */\r\n  @Prop() hasHeader: boolean = true;\r\n\r\n  /**\r\n   * Whether or not this panel is currently expanded.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isExpanded: boolean = true;\r\n  @Watch('isExpanded')\r\n  watchIsExpandedHandler(newValue: boolean) {\r\n    \r\n    this.panelExpansionChanged.emit({\r\n      \"yetiPanel\": this.el,\r\n      \"isExpanded\": newValue\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n   * The id of the HTML element representing the panel header\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) headerId: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * The id of the HTML element representing the panel's content container\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) contentId: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * A string of CSS space-separated CSS classes to add to the HTML element that represents the panel's outer wrapper\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) wrapperClass: string = '';\r\n\r\n  /**\r\n   * Used to toggle a re-render of the icon.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n\r\n  hasSubheader: boolean = false;\r\n\r\n\r\n\r\n  handleHeaderClick() {\r\n    if (this.isExpandable) {\r\n      this.isExpanded = !this.isExpanded;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    \r\n    let potentialSubheader = this.el.querySelector('[slot=\"subheader\"]');\r\n    \r\n    if (potentialSubheader) {\r\n      this.hasSubheader = true;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperCSS = 'yeti-panel';\r\n\r\n    wrapperCSS += (this.wrapperClass) ? ` ${this.wrapperClass}` : '';\r\n\r\n    wrapperCSS += (this.isExpandable) ? ' yeti-panel-expandable' : '';\r\n    wrapperCSS += (this.isExpandable && this.isExpanded) ? ' yeti-panel__expanded' : '';\r\n\r\n    return (\r\n\r\n        <div class={wrapperCSS}>\r\n\r\n          {/* Header */}\r\n          {(this.hasHeader) ?\r\n            (this.isExpandable) ? \r\n            \r\n              // It's expandable, use a button for the header.\r\n              <button \r\n                id={this.headerId}\r\n                class=\"yeti-panel-header\"\r\n                onClick={() => { this.handleHeaderClick(); }}\r\n                aria-expanded={this.isExpanded}\r\n                aria-controls={this.contentId}\r\n                type=\"button\"\r\n              >\r\n\r\n                <div class='yeti-panel-header-contents'>\r\n\r\n                  {(this.isExpanded) ?\r\n                  \r\n                    <yeti-icon iconCode='expand_less' alt='' iconClass='yeti-panel-header-caret'></yeti-icon>\r\n\r\n                  :\r\n\r\n                    <yeti-icon iconCode='expand_more' alt='' iconClass='yeti-panel-header-caret'></yeti-icon>\r\n\r\n                  }\r\n                  \r\n                  <div class=\"yeti-panel-header-actual\">\r\n\r\n                    {this.heading}\r\n                    \r\n                  </div>\r\n\r\n\r\n                  <slot name=\"subheader\" />\r\n\r\n\r\n                </div>\r\n\r\n              </button>\r\n\r\n            :\r\n\r\n              // It's not expandable, just use a div for the header.\r\n              <div \r\n                id={this.headerId}\r\n                class=\"yeti-panel-header\"\r\n              >\r\n\r\n                <div class='yeti-panel-header-contents'>\r\n\r\n                  \r\n                  <div class=\"yeti-panel-header-actual\">\r\n\r\n                    {this.heading}\r\n                    \r\n                  </div>\r\n\r\n\r\n                  <slot name=\"subheader\" />\r\n\r\n\r\n                </div>\r\n\r\n              </div>\r\n          \r\n          :\r\n            \r\n            ''\r\n          \r\n          }\r\n          \r\n\r\n\r\n          {/* Content */}\r\n          <div \r\n            id={this.contentId}\r\n            class=\"yeti-panel-content\"\r\n            role=\"region\"\r\n            aria-labelledby={this.headerId}\r\n          >\r\n\r\n            <slot />\r\n\r\n          </div>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n  }\r\n\r\n}"],"version":3}