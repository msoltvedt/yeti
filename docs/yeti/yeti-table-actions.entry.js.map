{"file":"yeti-table-actions.entry.esm.js","mappings":"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","names":[],"sources":["src/components/yeti-table-actions/yeti-table-actions.tsx"],"sourcesContent":["import { Component, Prop, h, Element } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-table-actions',\n  shadow: false,\n})\nexport class YetiTableActions {\n\n  @Element() el: HTMLElement;\n\n  /**\n   * CSS classlist to add to the actual element serving as the component's wrapper.\n   */\n  @Prop() cssClass: string = '';\n\n  /**\n   * id value of the actual element serving as the component's wrapper. Will be auto-generated with a unique value if not provided.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) htmlId: string = \"\"; // Set on component load\n\n  /**\n   * Whether or not to use the Yeti Grid system to lay out child options.\n   */\n  @Prop() useGrid: boolean = false;\n\n\n\n  parseTableActionElements() {\n    let actionElementsWithoutGridColumnsSpecified = this.el.querySelectorAll('yeti-table-action:not([grid-columns]), yeti-table-pagination:not([grid-columns])');\n    let actionElementsWithGridColumnsSpecified = this.el.querySelectorAll('[grid-columns]');\n    const numberOfGridColumns = 16;\n    let gridColumnsAvailable = numberOfGridColumns;\n    let genericColumns; // This will eventually be what column span to give actions that didn't specify that.\n\n    // actionElement... is the outer, <yeti-*> wrapper element. Since their parent is the grid container, we need to apply\n    // the grid cell styling directly to this element.\n    \n    // First handle the actions that have a grid-columns attribute.\n    actionElementsWithGridColumnsSpecified.forEach((actionElement) => {\n      \n      let spanAttribute = parseInt(actionElement.getAttribute('grid-columns'));\n      let span = (isNaN(spanAttribute)) ? 1 : spanAttribute;\n      let className = 'yeti-grid-column-' + span;\n      let existingClasses = actionElement.getAttribute(\"class\");\n      existingClasses = (existingClasses) ? existingClasses : '';\n\n      actionElement.setAttribute('class', `${existingClasses} ${className}`);\n      gridColumnsAvailable -= span;\n\n    });\n\n    if (gridColumnsAvailable < actionElementsWithoutGridColumnsSpecified.length) {\n      console.warn('Table actions must use a total of no more than 16 columns.');\n    }\n\n    genericColumns = Math.floor( gridColumnsAvailable / actionElementsWithoutGridColumnsSpecified.length );\n    \n    // Second divvy up the remaining grid columns amongst the actions that don't have a grid-columns attribute.\n    for (let i = 0; i < actionElementsWithoutGridColumnsSpecified.length; i++) {\n      \n      let actionElement = actionElementsWithoutGridColumnsSpecified[i];\n      let isLastElementWithoutColumnsSpecified = ((i+1) == actionElementsWithoutGridColumnsSpecified.length) ? true : false;\n      let span = (isLastElementWithoutColumnsSpecified) ? gridColumnsAvailable : genericColumns;\n      let className = 'yeti-grid-column-' + span;\n      let existingClasses = actionElement.getAttribute(\"class\");\n      existingClasses = (existingClasses) ? existingClasses : '';\n\n      actionElement.setAttribute('class', `${existingClasses} ${className}`);\n      gridColumnsAvailable -= span;\n\n    }\n  }\n\n\n\n  componentWillLoad() {\n    // Set up ids and parse table action HTML elements\n\n    // Set up ids\n    let componentId = this.el.getAttribute(\"id\");\n    let parent = this.el.parentElement;\n    let parentId = (parent && parent.getAttribute(\"id\")) ? parent.getAttribute(\"id\") : utils.generateUniqueId();\n\n    if (!componentId || componentId == \"\") {\n\n      componentId = `${parentId}_actionsComponent`;\n      this.el.setAttribute(\"id\", componentId);\n\n    }\n\n    this.htmlId = (this.htmlId != \"\") ? this.htmlId : `${parentId}_actions`;\n\n    // Parse children \n    this.parseTableActionElements();\n  }\n\n\n\n  render() {\n\n    let cssClasses = 'yeti-table-actions';\n\n    cssClasses += (this.useGrid) ? ' yeti-grid yeti-grid-gapless yeti-grid-gutterless' : '';\n\n    if (this.cssClass != '') {\n      cssClasses += ' ' + this.cssClass;\n    }\n\n    return (\n      <div class={cssClasses} id={this.htmlId}><slot /></div>\n    );\n  }\n\n}\n"],"version":3}