{"version":3,"names":["YetiLoading","this","previouslyFocusedElement","shouldStealFocus","shouldReturnFocus","handleFocus","newValue","setBackgroundElementStyles","modalIsActivating","document","body","classList","add","remove","focusTrap","e","isActive","preventDefault","componentWillLoad","componentId","el","getAttribute","utils","generateUniqueId","setAttribute","render","modalOverlayCSS","baseLoading","h","class","tabindex","viewBox","cx","cy","r","componentDidRender","loadingDiv","getElementsByClassName","activeElement","focus"],"sources":["src/components/yeti-loading/yeti-loading.tsx"],"sourcesContent":["import { Component, Prop, h, Element, Watch, Listen } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-loading',\n  shadow: false,\n})\nexport class YetiLoading {\n\n  @Element() el: HTMLElement;\n\n  /**\n   * Whether to display the Loading pattern as a modal (covering its parent container) or as an inline-block object.\n   */\n  @Prop() isModal: boolean = false;\n\n  /**\n   * Tracks whether the Loader is displaying or not.\n   */\n  @Prop() isActive: boolean = false;\n  @Watch('isActive')\n  handleFocus(newValue: boolean) {\n    // When the Loading becomes active it should take focus away from whatever had it before, but\n    // we want to keep track of what that was so we can return focus if Loading becomes inactive.\n\n    // Becoming active, take focus\n    if (newValue) {\n      this.shouldStealFocus = true;\n      this.setBackgroundElementStyles(true);\n    }\n\n    // Becoming inactive, return focus\n    else {\n      this.shouldReturnFocus = true;\n      this.setBackgroundElementStyles(false);\n    }\n  }\n\n\n  previouslyFocusedElement: HTMLElement = null; // So we can return focus to wherever the user was when the Loading component appeared.\n  shouldStealFocus = false;\n  shouldReturnFocus = false;\n\n\n  setBackgroundElementStyles(modalIsActivating: boolean) {\n    if (modalIsActivating) {\n        document.body.classList.add(\"yeti-modal-has_active_modal\");\n    } else {\n        document.body.classList.remove(\"yeti-modal-has_active_modal\");\n    }\n  }\n\n\n\n  @Listen('keydown')\n  focusTrap(e) {\n    if (this.isActive) {\n      e.preventDefault();\n    }\n  }\n\n\n  componentWillLoad() {\n    // Set up ids\n    let componentId = this.el.getAttribute(\"id\");\n\n    if (!componentId || componentId == \"\") {\n      componentId = utils.generateUniqueId();\n      this.el.setAttribute(\"id\", componentId);\n    }\n\n  }\n\n\n  render() {\n\n    let modalOverlayCSS = \"yeti-modal-overlay yeti-modal-overlay-light\";\n\n    let baseLoading =\n\n      <div class=\"yeti-loading\" tabindex=\"-1\">\n        <div class=\"yeti-loading-icon\">\n            <svg class=\"yeti-loading-icon-svg\" viewBox=\"0 0 100 100\" aria-hidden=\"true\">\n                <circle class=\"yeti-loading-icon-svg-circle\" cx=\"50%\" cy=\"50%\" r=\"44\"></circle>\n            </svg>\n        </div>\n\n        <div class=\"yeti-loading-label\">Loading...</div>\n\n        <div class=\"yeti-loading-content\">\n          \n          <slot />\n        \n        </div>\n      </div>\n\n    modalOverlayCSS += (this.isActive) ? \"\" : \" yeti-modal-overlay__inert\";\n\n    return (\n      (this.isModal) ?\n\n        <div class={modalOverlayCSS}>\n          <div class=\"yeti-modal yeti-modal-size-xs\">\n              {baseLoading}\n          </div>\n        </div>\n\n      :\n\n        baseLoading\n\n    );\n  }\n\n\n\n  componentDidRender() {\n    // Handle focus management. We can't do this when the property changes because the inactive state uses display: none,\n    // which interferes with the ability to accept focus depending on some race conditions.\n\n    if (this.shouldStealFocus) {\n      // Becoming active, take focus\n      let loadingDiv = this.el.getElementsByClassName(\"yeti-loading\")[0] as HTMLElement;\n      this.previouslyFocusedElement = document.activeElement as HTMLElement;\n      loadingDiv.focus();\n    }\n\n    if (this.shouldReturnFocus) {\n      // Becoming inactive, return focus\n      if (this.previouslyFocusedElement) {\n        this.previouslyFocusedElement.focus();\n      }\n    }\n\n    this.shouldStealFocus = false;\n    this.shouldReturnFocus = false;\n  }\n\n}\n"],"mappings":"4FAOaA,EAAW,M,yBAgCtBC,KAAAC,yBAAwC,KACxCD,KAAAE,iBAAmB,MACnBF,KAAAG,kBAAoB,M,aA3BO,M,cAKC,K,CAE5B,WAAAC,CAAYC,GAKV,GAAIA,EAAU,CACZL,KAAKE,iBAAmB,KACxBF,KAAKM,2BAA2B,K,KAI7B,CACHN,KAAKG,kBAAoB,KACzBH,KAAKM,2BAA2B,M,EAUpC,0BAAAA,CAA2BC,GACzB,GAAIA,EAAmB,CACnBC,SAASC,KAAKC,UAAUC,IAAI,8B,KACzB,CACHH,SAASC,KAAKC,UAAUE,OAAO,8B,EAOrC,SAAAC,CAAUC,GACR,GAAId,KAAKe,SAAU,CACjBD,EAAEE,gB,EAKN,iBAAAC,GAEE,IAAIC,EAAclB,KAAKmB,GAAGC,aAAa,MAEvC,IAAKF,GAAeA,GAAe,GAAI,CACrCA,EAAcG,EAAMC,mBACpBtB,KAAKmB,GAAGI,aAAa,KAAML,E,EAM/B,MAAAM,GAEE,IAAIC,EAAkB,8CAEtB,IAAIC,EAEFC,EAAA,OAAKC,MAAM,eAAeC,SAAS,MACjCF,EAAA,OAAKC,MAAM,qBACPD,EAAA,OAAKC,MAAM,wBAAwBE,QAAQ,cAAa,cAAa,QACjEH,EAAA,UAAQC,MAAM,+BAA+BG,GAAG,MAAMC,GAAG,MAAMC,EAAE,SAIzEN,EAAA,OAAKC,MAAM,sBAAoB,cAE/BD,EAAA,OAAKC,MAAM,wBAETD,EAAA,eAKNF,GAAoBzB,KAAa,SAAI,GAAK,6BAE1C,OACGA,KAAY,QAEX2B,EAAA,OAAKC,MAAOH,GACVE,EAAA,OAAKC,MAAM,iCACNF,IAMPA,C,CAON,kBAAAQ,GAIE,GAAIlC,KAAKE,iBAAkB,CAEzB,IAAIiC,EAAanC,KAAKmB,GAAGiB,uBAAuB,gBAAgB,GAChEpC,KAAKC,yBAA2BO,SAAS6B,cACzCF,EAAWG,O,CAGb,GAAItC,KAAKG,kBAAmB,CAE1B,GAAIH,KAAKC,yBAA0B,CACjCD,KAAKC,yBAAyBqC,O,EAIlCtC,KAAKE,iBAAmB,MACxBF,KAAKG,kBAAoB,K"}