{"file":"yeti-modal.entry.esm.js","mappings":"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","names":[],"sources":["src/components/yeti-modal/yeti-modal.tsx"],"sourcesContent":["import { Component, Prop, h, Element, Watch, Listen } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-modal',\n  shadow: false,\n})\nexport class YetiModal {\n\n  @Element() el: HTMLElement;\n\n  /**\n   * The string that will display in the modal's heading and serve as its title.\n   */\n  @Prop() heading: string = \"Modal Heading\";\n\n  /**\n   * The optional id of an element that describes the modal's content.\n   */\n  @Prop() describedBy: string = \"\";\n\n  /**\n   * The optional size of the modal (other than the default). Options are xl, l, s, xs.\n   */\n  @Prop() size: string = \"\";\n\n  /**\n   * Optional CSS classes to add to the modal element.\n   */\n  @Prop({ attribute: 'modal-css'}) modalCSS: string = \"\";\n\n  /**\n   * Whether overflowing contents are shown via scrolling or clipped.\n   */\n  @Prop() isScrollable: boolean = true;\n\n  /**\n   * Tracks whether the Modal is displaying or not.\n   */\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) isActive: boolean = false;\n  @Watch('isActive')\n  handleFocus(newValue: boolean) {\n    // When the Loading becomes active it should take focus away from whatever had it before, but\n    // we want to keep track of what that was so we can return focus if Loading becomes inactive.\n\n    // Becoming active, take focus\n    if (newValue) {\n      this.shouldStealFocus = true;\n      this.setBackgroundElementStyles(true);\n    }\n\n    // Becoming inactive, return focus\n    else {\n      this.shouldReturnFocus = true;\n      this.setBackgroundElementStyles(false);\n    }\n  }\n\n  /**\n   * Whether to show the Close icon (currently an X) or not\n   */\n  @Prop() showClose: boolean = true;\n\n\n  previouslyFocusedElement: HTMLElement = null; // So we can return focus to wherever the user was when the Loading component appeared.\n  bodyInnerWrapper: HTMLElement = null; // A div wrapped around everything in the body except the modal. Used to prevent background scrolling.\n  shouldStealFocus = false;\n  shouldReturnFocus = false;\n  headingId = utils.generateUniqueId();\n  \n\n\n  setBackgroundElementStyles(modalIsActivating: boolean) {\n    if (modalIsActivating) {\n        document.body.classList.add(\"yeti-modal-has_active_modal\");\n    } else {\n        document.body.classList.remove(\"yeti-modal-has_active_modal\");\n    }\n  }\n\n\n\n  @Listen('keydown', { target: 'window'})\n  focusTrap(e) {\n\n    if (this.isActive && e.keyCode == 27 && this.showClose) { // Escape button\n        this.isActive = false;    \n    }\n\n  }\n\n\n\n  handleInitialFocus() {\n    // Sets focus on the correct thing within the modal's content when it first opens. If nothing is focusable, uses the content area itself.\n    let contentArea = this.el.querySelector('.yeti-modal-content') as HTMLElement;\n    let firstFocusableContentItem = utils.aria.focusFirstDescendant(contentArea); // either false or an HTMLElement\n\n    if (!firstFocusableContentItem) {\n        // There is nothing focusable within the content of the modal, so make the content area itself focusable.\n        contentArea.setAttribute(\"tabIndex\", \"-1\");\n        contentArea.focus();\n    }\n  }\n\n\n\n  componentWillLoad() {\n    // Set up ids and handle slotted content\n    let componentId = this.el.getAttribute(\"id\");\n    let content = this.el.querySelector(\"yeti-modal-content\");\n    let buttons = this.el.querySelector(\"yeti-modal-buttons\");\n\n    if (!content) {\n        console.error(\"Yeti Modal components must have a yeti-modal-content element.\");\n    } else {\n        content.setAttribute(\"slot\", \"content\");\n    }\n\n    if (!buttons) {\n        console.error(\"Yeti Modal components must have a yeti-modal-buttons element.\");\n    } else {\n        buttons.setAttribute(\"slot\", \"buttons\");\n    }\n\n    if (!componentId || componentId == \"\") {\n      componentId = utils.generateUniqueId();\n      this.el.setAttribute(\"id\", componentId);\n    }\n\n  }\n\n\n  render() {\n\n    let modalOverlayCSS = \"yeti-modal-overlay\";\n    let modalCSS = \"yeti-modal\";\n    let modalProperties = {\n        \"role\": \"dialog\",\n        \"aria-modal\": \"true\",\n        \"aria-labelledby\": this.headingId\n    };\n\n    if (this.describedBy != \"\") {\n        modalProperties[\"aria-describedby\"] = this.describedBy;\n    }\n\n    modalOverlayCSS += (this.isActive) ? \"\" : \" yeti-modal-overlay__inert\";\n\n    modalCSS += (this.size == \"\") ? \"\" : ` yeti-modal-size-${this.size}`;\n\n    modalCSS += (this.modalCSS != \"\") ? ` ${this.modalCSS}` : \"\";\n\n    modalCSS += (this.isScrollable) ? \"\" : \" yeti-modal__unscrollable\";\n\n    return (\n        <div class={modalOverlayCSS}>\n            \n            <div class=\"yeti-modal-bumper-front\" tabIndex={0}></div>\n\n\n            <div class={modalCSS} {...modalProperties}>\n        \n                <div class=\"yeti-modal-header\">\n                    <h1 class=\"yeti-modal-header-heading\" id={this.headingId}>{this.heading}</h1>\n\n                    {(this.showClose) ?\n\n                      <button class=\"yeti-modal-header-close yeti-button-ghost\" onClick={() => { this.isActive = false }}>\n                      <span class=\"material-icons\">close</span>\n                      </button>\n\n                    :\n\n                      null\n\n                    }\n                    \n                </div>\n\n        \n                <div class=\"yeti-modal-content\">\n\n                    <slot name=\"content\" />\n        \n                    <div class=\"yeti-modal-content-fade\"></div>\n        \n                </div>\n\n        \n                <div class=\"yeti-modal-actions\">\n\n                    <div class=\"yeti-modal-actions-buttons\">\n                    \n                        <slot name=\"buttons\" />\n                    \n                    </div>\n                \n                </div>\n        \n            </div>\n\n\n            <div class=\"yeti-modal-bumper-back\" tabIndex={0}></div>\n\n        </div>\n\n    );\n  }\n\n\n\n  componentDidRender() {\n    // Handle focus management. We can't do this when the property changes because the inactive state uses display: none,\n    // which interferes with the ability to accept focus depending on some race conditions.\n\n    if (this.shouldStealFocus) {\n      // Becoming active, take focus\n      this.previouslyFocusedElement = document.activeElement as HTMLElement;\n      //utils.aria.focusFirstDescendant(this.el);\n      this.handleInitialFocus();\n    }\n\n    if (this.shouldReturnFocus) {\n      // Becoming inactive, return focus\n      if (this.previouslyFocusedElement) {\n        this.previouslyFocusedElement.focus();\n      }\n    }\n\n    this.shouldStealFocus = false;\n    this.shouldReturnFocus = false;\n  }\n\n\n\n  componentDidLoad() {\n    let frontBumper = this.el.querySelector(\".yeti-modal-bumper-front\");\n    let backBumper  = this.el.querySelector(\".yeti-modal-bumper-back\");\n\n    frontBumper.addEventListener(\"focus\", () => {\n        utils.aria.focusLastDescendant(this.el.querySelector(\".yeti-modal\"));\n    });\n\n    backBumper.addEventListener(\"focus\", () => {\n        utils.aria.focusFirstDescendant(this.el.querySelector(\".yeti-modal\"));\n    });\n  }\n\n}"],"version":3}