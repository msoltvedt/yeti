{"file":"yeti-tooltip.entry.esm.js","mappings":"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","names":[],"sources":["src/components/yeti-tooltip/yeti-tooltip.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Listen } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-tooltip',\r\n  shadow: false,\r\n})\r\nexport class YetiTooltip {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop() wrapperClass: string = '';\r\n\r\n  /**\r\n   * CSS classlist to add to the actual tooltip element.\r\n   */\r\n  @Prop() tooltipClass: string = '';\r\n\r\n  /**\r\n   * Text value to display as the tooltip's contents.\r\n   */\r\n  @Prop() text: string = \"I'm a helpful tooltip.\";\r\n\r\n  /**\r\n   * Token list to describe the tooltip's position relative to its anchor: left | right and/or above | below.\r\n   */\r\n  @Prop() position: string = \"above\";\r\n\r\n  /**\r\n   * Token list to describe the tooltip's position relative to its anchor: left | right and/or above | below.\r\n   */\r\n  @Prop() clickToOpen: boolean = false;\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) tipId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * Whether the anchor should be forced to be a CSS display block style or left as is.\r\n   */\r\n  @Prop() blockAnchor: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip should remain open permanently.\r\n   */\r\n  @Prop() forceOpen: boolean = false;\r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip has been clicked open or not.\r\n   */\r\n  @State() isClickedOpen: boolean = false;\r\n\r\n\r\n\r\n  @Listen('mouseover')\r\n  handleSlotHover() {\r\n    if (!this.clickToOpen) {\r\n      this.scrollTooltipIntoView();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen('focusin')\r\n  handleSlotFocus() {\r\n    if (!this.clickToOpen) {\r\n      this.scrollTooltipIntoView();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen('click', {\r\n    target: 'body'\r\n  })\r\n  handleDeFocusingClick() {\r\n    this.isClickedOpen = false;\r\n  }\r\n\r\n\r\n\r\n  @Listen('click')\r\n  handleClick(e) {\r\n    e.stopImmediatePropagation(); // Intercept the click event before it gets to the body-level handler\r\n  }\r\n\r\n  \r\n\r\n  handleTriggerClick(e) {\r\n    if (this.clickToOpen) {\r\n      this.isClickedOpen = !this.isClickedOpen;\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      this.scrollTooltipIntoView();\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  handleTriggerKeyUp(e) {\r\n    if (this.clickToOpen && e.key == \"Enter\") {\r\n      this.handleTriggerClick(e);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleCloseTooltipClick(e) {\r\n    this.isClickedOpen = false;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  scrollTooltipIntoView() {\r\n    let actual = this.el.querySelector(\".yeti-tooltip\");\r\n    actual.scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"nearest\"\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    this.tipId = (this.tipId != \"\") ? this.tipId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperClass = 'yeti-tooltip-wrapper';\r\n    let tipClass = 'yeti-tooltip';\r\n\r\n    wrapperClass += (this.wrapperClass != '') ? ` ${this.wrapperClass}` : '';\r\n    tipClass += (this.tooltipClass != '') ? ` ${this.tooltipClass}` : '';\r\n\r\n    tipClass += (this.isClickedOpen) ? ' yeti-tooltip__clicked_open' : '';\r\n\r\n    tipClass += (this.forceOpen) ? ' yeti-tooltip__forced_open' : '';\r\n\r\n    wrapperClass += (this.clickToOpen) ? ' yeti-tooltip-wrapper-is_click_to_open' : '';\r\n    wrapperClass += (this.blockAnchor) ? ' yeti-tooltip-wrapper-has_block_anchor' : '';\r\n\r\n    switch (this.position) {\r\n\r\n      case \"right\":\r\n\r\n        tipClass += \" yeti-tooltip-right\";\r\n        break;\r\n\r\n      case \"below\":\r\n\r\n        tipClass += \" yeti-tooltip-below\";\r\n        break;\r\n\r\n      case \"left\":\r\n\r\n        tipClass += \" yeti-tooltip-left\";\r\n        break;\r\n\r\n      case \"below-left\":\r\n\r\n        tipClass += \" yeti-tooltip-below-left\";\r\n        break;\r\n\r\n      case \"below-right\":\r\n\r\n        tipClass += \" yeti-tooltip-below-right\";\r\n        break;\r\n\r\n      case \"above-left\":\r\n\r\n        tipClass += \" yeti-tooltip-above-left\";\r\n        break;\r\n\r\n      case \"above-right\":\r\n\r\n        tipClass += \" yeti-tooltip-above-right\";\r\n        break;\r\n\r\n    }\r\n\r\n    return ([\r\n      <div class={wrapperClass}>\r\n\r\n      <div \r\n        class=\"yeti-tooltip-trigger\" \r\n        onClick={(e) => this.handleTriggerClick(e)}\r\n        onKeyUp={(e) => this.handleTriggerKeyUp(e)}\r\n        {...((this.clickToOpen) ? { \"tabindex\": 0 } : {})}  \r\n      >\r\n\r\n        <slot />\r\n\r\n      </div>\r\n\r\n        <div class={tipClass}>\r\n\r\n          <div class=\"yeti-tooltip-content\" id={this.tipId}>{this.text}</div>\r\n\r\n          {\r\n            (this.clickToOpen && this.isClickedOpen) ?\r\n\r\n              <button class=\"yeti-tooltip-close\" onClick={(e) => { this.handleCloseTooltipClick(e); }}>\r\n                <yeti-icon iconCode=\"close\" iconClass='yeti-color-white yeti-typo-size-5'></yeti-icon>\r\n              </button>\r\n\r\n            :\r\n              null\r\n          }\r\n          \r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    let slot = this.el.querySelector(\".yeti-tooltip-trigger\").firstElementChild;\r\n    //slot.setAttribute(\"tabindex\", \"0\");\r\n    slot.setAttribute(\"aria-describedby\",this.tipId);\r\n  }\r\n\r\n}\r\n"],"version":3}