{"file":"yeti-tooltip.entry.esm.js","mappings":"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","names":[],"sources":["src/components/yeti-tooltip/yeti-tooltip.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Listen } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-tooltip',\r\n  shadow: false,\r\n})\r\nexport class YetiTooltip {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop({ attribute: 'wrapper-class'}) wrapperCSS: string = '';\r\n\r\n  /**\r\n   * CSS classlist to add to the actual tooltip element.\r\n   */\r\n  @Prop({ attribute: 'tooltip-class'}) tooltipCSS: string = '';\r\n\r\n  /**\r\n   * Text value to display as the tooltip's contents.\r\n   */\r\n  @Prop() text: string = \"I'm a helpful tooltip.\";\r\n\r\n  /**\r\n   * Token list to describe the tooltip's position relative to its anchor: left | right and/or above | below.\r\n   */\r\n  @Prop() position: string = \"above\";\r\n\r\n  /**\r\n   * Token list to describe the tooltip's position relative to its anchor: left | right and/or above | below.\r\n   */\r\n  @Prop() clickToOpen: boolean = false;\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) tipId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * Whether the anchor should be forced to be a CSS display block style or left as is.\r\n   */\r\n  @Prop() blockAnchor: boolean = false;\r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip has been clicked open or not.\r\n   */\r\n  @State() isClickedOpen: boolean = false;\r\n\r\n\r\n\r\n  @Listen('mouseover')\r\n  handleSlotHover() {\r\n    this.scrollTooltipIntoView();\r\n  }\r\n\r\n\r\n\r\n  @Listen('focusin')\r\n  handleSlotFocus() {\r\n    this.scrollTooltipIntoView();\r\n  }\r\n\r\n\r\n\r\n  @Listen('click', {\r\n    target: 'body'\r\n  })\r\n  handleDeFocusingClick() {\r\n    this.isClickedOpen = false;\r\n  }\r\n\r\n\r\n\r\n  @Listen('click')\r\n  handleClick(e) {\r\n    e.stopImmediatePropagation(); // Intercept the click event before it gets to the body-level handler\r\n  }\r\n\r\n  \r\n\r\n  handleTriggerClick(e) {\r\n    if (this.clickToOpen) {\r\n      this.isClickedOpen = !this.isClickedOpen;\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      this.scrollTooltipIntoView();\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleCloseTooltipClick(e) {\r\n    this.isClickedOpen = false;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  scrollTooltipIntoView() {\r\n    let actual = this.el.querySelector(\".yeti-tooltip\");\r\n    actual.scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"nearest\"\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    this.tipId = (this.tipId != \"\") ? this.tipId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperCSS = 'yeti-tooltip-wrapper';\r\n    let tipClass = 'yeti-tooltip';\r\n\r\n    tipClass += (this.isClickedOpen) ? ' yeti-tooltip__clicked_open' : '';\r\n\r\n    wrapperCSS += (this.clickToOpen) ? ' yeti-tooltip-wrapper-is_click_to_open' : '';\r\n    wrapperCSS += (this.blockAnchor) ? ' yeti-tooltip-wrapper-has_block_anchor' : '';\r\n\r\n    switch (this.position) {\r\n\r\n      case \"right\":\r\n\r\n        tipClass += \" yeti-tooltip-right\";\r\n        break;\r\n\r\n      case \"below\":\r\n\r\n        tipClass += \" yeti-tooltip-below\";\r\n        break;\r\n\r\n      case \"left\":\r\n\r\n        tipClass += \" yeti-tooltip-left\";\r\n        break;\r\n\r\n    }\r\n\r\n    return ([\r\n      <div class={wrapperCSS}>\r\n\r\n      <div class=\"yeti-tooltip-trigger\" onClick={(e) => this.handleTriggerClick(e)}>\r\n\r\n        <slot />\r\n\r\n      </div>\r\n\r\n        <div class={tipClass}>\r\n\r\n          <div class=\"yeti-tooltip-content\" id={this.tipId}>{this.text}</div>\r\n\r\n          {\r\n            (this.clickToOpen) ?\r\n\r\n              <button class=\"yeti-tooltip-close\" onClick={(e) => { this.handleCloseTooltipClick(e); }}>\r\n                <yeti-icon iconCode=\"close\" iconCSS='yeti-color-white yeti-typo-size-5'></yeti-icon>\r\n              </button>\r\n\r\n            :\r\n              null\r\n          }\r\n          \r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    let slot = this.el.querySelector(\".yeti-tooltip-trigger\").firstElementChild;\r\n    slot.setAttribute(\"tabindex\", \"0\");\r\n    slot.setAttribute(\"aria-describedby\",this.tipId);\r\n  }\r\n\r\n}\r\n"],"version":3}