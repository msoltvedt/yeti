{"version":3,"names":["YetiField","constructor","hostRef","this","inputId","utils","generateUniqueId","inputName","placeholder","type","inputMaxlength","label","tip","tipPosition","required","indicateRequired","errorMessage","isValid","defaultValue","autovalidate","isInline","wrapperClass","inputClass","inputWrapperClass","isDirty","tipId","errorId","hasSlottedField","hasSlottedRequired","hasSlottedLabel","updateSlottedContentForErrorState","newValue","element","el","querySelector","classList","add","remove","handleReadyToVerifySlow","ev","childControl","target","value","nodeName","toLowerCase","componentWillLoad","potentiallySlottedElement","potentiallySlottedRequired","potentiallySlottedLabel","describedBy","id","hasAttribute","getAttribute","setAttribute","renderRequiredIndicator","h","name","class","render","cssClass","tipClass","key","htmlFor","Object","assign"],"sources":["src/components/yeti-field/yeti-field.tsx"],"sourcesContent":["import { Component, Prop, h, State, Watch, Listen, Element } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-field',\r\n  shadow: false,\r\n})\r\n\r\nexport class YetiField {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * id that will be assigned to the actual input element. A unique one will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputId: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputName: string = this.inputId;\r\n\r\n  /**\r\n   * name that will be assigned to the actual input element. id will be assigned if one is not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) placeholder: string = \"\";\r\n\r\n  /**\r\n   * type that will be assigned to the actual input element.\r\n   */\r\n  @Prop() type: string = \"text\";\r\n\r\n  /**\r\n   * maximum length for the field.\r\n   */\r\n  @Prop() inputMaxlength?: number = 0;\r\n  \r\n  /**\r\n   * Mandatory value for the label of the field.\r\n   */\r\n  @Prop() label: string=\"\";\r\n  \r\n\r\n  /**\r\n   * Value for the optional input tip that appears at the bottom of the field.\r\n   */\r\n  @Prop() tip: string = \"\";\r\n\r\n  /**\r\n   * Position of the input tip relative to the rest of the field's contents. Defaults to \"below\", can also be \"above\".\r\n   */\r\n  @Prop() tipPosition?: string = \"below\";\r\n\r\n  /**\r\n   * Whether the field is required to have a valid value by the greater form.\r\n   */\r\n  @Prop() required?: boolean = false;\r\n\r\n  /**\r\n   * Whether to indicate the field is required by showing a default icon.\r\n   */\r\n  @Prop() indicateRequired?: boolean = false;\r\n\r\n  /**\r\n   * Error message that appears when the field is invalid. Can be updated at any time.\r\n   */\r\n  @Prop({mutable: true}) errorMessage: string = 'Error: please correct this field.'\r\n\r\n  /**\r\n   * Whether the input is currently valid or invalid.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean = true;\r\n  @Watch('isValid')\r\n  updateSlottedContentForErrorState(newValue: string) {\r\n\r\n    if (!this.hasSlottedField) {\r\n      return; // We don't need to do anything here unless the form element comes via slotted content.\r\n    }\r\n\r\n    let element = this.el.querySelector(`#${this.inputId}`);\r\n\r\n    if (element) {\r\n\r\n      if (newValue) {\r\n        element.classList.add(\"yeti-input__error\");\r\n      } else {\r\n        element.classList.remove(\"yeti-input__error\");\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Default value of the field's input.\r\n   */\r\n  @Prop() defaultValue: string = '';\r\n\r\n  /**\r\n   * Determines whether the field should attempt to validate itself or merely pass through any readyToVerify events from its input.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) autovalidate: boolean = true;\r\n\r\n  /**\r\n   * Determines whether the field uses block (default) or inline labels.\r\n   */\r\n  @Prop() isInline: boolean = false;\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the Field's wrapper.\r\n   */\r\n  @Prop() wrapperClass?: string = \"\";\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the input.\r\n   */\r\n  @Prop() inputClass?: string = \"\";\r\n\r\n  /**\r\n   * Additional user-supplied CSS classes to apply to the input's wrapper.\r\n   */\r\n  @Prop() inputWrapperClass?: string = \"\";\r\n\r\n  /**\r\n   * Tracks whether the field's input has been focused and then blurred (i.e. if the user has interacted with it yet).\r\n   */\r\n  @State() isDirty: boolean = false;\r\n  \r\n  @Listen('readyToVerifySlow', { capture: true })\r\n  handleReadyToVerifySlow(ev) {\r\n\r\n    let childControl = ev.target;\r\n\r\n    if (this.autovalidate == false) {\r\n      return;\r\n    }\r\n\r\n   \r\n    if (this.required) {\r\n\r\n      // Autoverification is on, this field is required, and the child component just notified us that it's ready for verification.\r\n\r\n      // First, regardless of whether it's an input or date-picker, it can't be empty.\r\n      if (childControl.value == \"\") {\r\n\r\n        this.errorMessage = (this.errorMessage != \"\") ? this.errorMessage : `${this.label} field is required.`\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n      \r\n    } else if (childControl.nodeName.toLowerCase() == \"yeti-date-picker\") {\r\n\r\n      // Second, if it's a non-empty date-picker, see if it's a valid date.\r\n\r\n      if (!childControl.isValid) {\r\n\r\n        // The date-picker already validates itself. We just need to check its status.\r\n        this.errorMessage = 'Enter the date in mm/dd/yyyy format.'\r\n        this.isValid = false;\r\n        return;\r\n\r\n      }\r\n    }\r\n\r\n    this.isValid = true;\r\n\r\n  }\r\n\r\n\r\n  tipId = utils.generateUniqueId();\r\n  errorId = utils.generateUniqueId();\r\n  hasSlottedField: boolean = false;\r\n  hasSlottedRequired: boolean = false;\r\n  hasSlottedLabel: boolean = false;\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    \r\n    let potentiallySlottedElement = this.el.querySelector('[slot=\"element\"]');\r\n    let potentiallySlottedRequired = this.el.querySelector('[slot=\"required\"]');\r\n    let potentiallySlottedLabel = this.el.querySelector('[slot=\"label\"]');\r\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\r\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\r\n\r\n    // Handle Required\r\n    if (potentiallySlottedRequired) {\r\n\r\n      this.hasSlottedRequired = true;\r\n\r\n    }\r\n\r\n     // Handle label\r\n     if (potentiallySlottedLabel) {\r\n\r\n      this.hasSlottedLabel = true;\r\n\r\n    }\r\n\r\n    // Handle Element\r\n    if (potentiallySlottedElement) {\r\n\r\n      this.hasSlottedField = true;\r\n      this.autovalidate = false; // We can't autovalidate a slotted element provided by the user\r\n\r\n      // See if the slotted element has an id\r\n      if (potentiallySlottedElement.id) {\r\n        this.inputId = potentiallySlottedElement.id; // It does, so replace the auto-generated default with the user-provided one.\r\n      } else {\r\n        potentiallySlottedElement.id = this.inputId; // It doesn't, so assign the auto-generated default one.\r\n      }\r\n\r\n      // See if the slotted element has a name\r\n      if (potentiallySlottedElement.hasAttribute(\"name\")) {\r\n        this.inputName = potentiallySlottedElement.getAttribute(\"name\"); // It does, so replace the auto-generated default with the user-provided one.\r\n      } else {\r\n        potentiallySlottedElement.setAttribute(\"name\", this.inputName);  // It doesn't, so assign the auto-generated default one.\r\n      }\r\n\r\n      // Connect the slotted element to the tip and/or error message\r\n      if (describedBy != \"\") {\r\n        potentiallySlottedElement.setAttribute(\"aria-describedby\", describedBy);\r\n      }\r\n\r\n      // Add the error class if necessary\r\n      if (!this.isValid) {\r\n        potentiallySlottedElement.classList.add(\"yeti-input__error\");\r\n      }\r\n\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n  renderRequiredIndicator() {\r\n\r\n    if (!this.required) {\r\n      return null;\r\n    }\r\n    \r\n\r\n    if (this.required && this.indicateRequired) {\r\n\r\n      // Use the slotted required content if it exists\r\n      if (this.hasSlottedRequired) {\r\n        return <slot name=\"required\"></slot>;\r\n      }\r\n\r\n      // Otherwise use the Yeti Required Symbol\r\n      else {\r\n        return <span class=\"yeti-form-label-required-wrapper\">\r\n          <yeti-required-symbol></yeti-required-symbol>\r\n        </span>;\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let cssClass = \"yeti-form-field\";\r\n    cssClass += (this.wrapperClass != \"\") ? ` ${this.wrapperClass}` : '';\r\n\r\n\r\n    let tipClass = `yeti-form-tip`;\r\n    tipClass += (this.tipPosition == \"above\") ? ` yeti-form-tip-above` : ``;\r\n\r\n    let describedBy = (this.tip != \"\") ? `${this.tipId} ` : ``;\r\n    describedBy += (this.errorMessage != \"\" && !this.isValid) ? `${this.errorId}` : ``;\r\n\r\n    if (this.isInline) {\r\n      cssClass += \" yeti-form-field-inline\";\r\n    }\r\n\r\n    return (\r\n      <div class={cssClass}>\r\n\r\n        <label htmlFor={this.inputId} class=\"yeti-form-label\">\r\n          {(this.hasSlottedLabel) ? <slot name=\"label\"></slot> : `${this.label}`}\r\n          {(this.indicateRequired) ? \r\n           (this.hasSlottedRequired ? <slot name=\"required\"></slot> : <yeti-required-symbol></yeti-required-symbol>)\r\n           : null}\r\n        </label>\r\n\r\n        {(!this.hasSlottedField) ?\r\n\r\n            (this.type == \"date\") ?\r\n\r\n              <yeti-date-picker\r\n                input-id={this.inputId}\r\n                input-name={this.inputName}\r\n                value={this.defaultValue}\r\n                required={this.required}\r\n                is-valid={this.isValid}\r\n                described-by={describedBy}\r\n              ></yeti-date-picker>\r\n\r\n            :\r\n          \r\n              <yeti-input \r\n                inputId={this.inputId} \r\n                // input-class={!this.isValid ? 'yeti-input__error' : null}\r\n                value={this.defaultValue} \r\n                required={this.required}\r\n                isValid={this.isValid}\r\n                describedBy={describedBy}\r\n                inputName={this.inputName}\r\n                {...((this.inputClass != \"\") ? {\"input-class\": this.inputClass} : {})}\r\n                {...((this.inputWrapperClass != \"\") ? {\"wrapper-class\": this.inputWrapperClass} : {})}\r\n                {...((this.inputMaxlength != 0) ? {\"input-maxlength\": this.inputMaxlength} : {})}\r\n                {...((this.placeholder != \"\") ? {\"placeholder\": this.placeholder} : {})}\r\n              ></yeti-input>\r\n\r\n        :\r\n\r\n          <slot name=\"element\"></slot>\r\n\r\n        }\r\n\r\n        \r\n        {\r\n          (this.tip != \"\") ?\r\n\r\n            <span class={tipClass} aria-live=\"polite\" id={this.tipId}>{this.tip}</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n        \r\n        {\r\n          (this.errorMessage != \"\" && !this.isValid) ?\r\n\r\n            <span class=\"yeti-form-field-error\" aria-live=\"polite\" id={this.errorId}>{this.errorMessage}</span>\r\n\r\n          :\r\n            \"\"\r\n        }\r\n        \r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]}