{"version":3,"names":["YetiCombobox","handleValueChange","this","updateOptions","handleDefocusingClick","el","querySelectorAll","length","isOpen","closeFlyout","handleClick","ev","console","log","isTouched","toggleFlyout","preventDefault","handleButtonClick","handleKeydown","key","toString","toLowerCase","shiftKey","value","cursorPosition","options","openFlyout","target","classList","contains","click","handleOptionClick","match","handleClearSelections","fieldElement","querySelector","option","selected","focus","stopPropagation","readyToVerifySlow","emit","readyToVerifyFast","handleInputChange","label","handleFieldBlur","parseOptionElements","i","item","tagName","optionId","hasAttribute","getAttribute","push","innerHTML","id","j","remove","getPlaceholderDisplay","placeholder","clickedOption","input","componentWillLoad","optionElements","children","componentId","utils","generateUniqueId","setAttribute","inputId","buttonId","dropdownId","render","wrapperCss","dropdownCss","isValid","menuAlignment","h","class","onClick","type","title","onFocus","onBlur","onInput","role","showClear","tabIndex","iconCode","alt","map","optionClass","componentDidRender","dropdown","hoveredOption","thingToScrollIntoView","scrollIntoView","behavior","block"],"sources":["src/components/yeti-combobox/yeti-combobox.tsx"],"sourcesContent":["import { Component, Watch, Prop, h, State, Event, EventEmitter, Element, Listen, /*Watch*/ } from '@stencil/core';\r\nimport { utils, YetiComboboxOption } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-combobox',\r\n  shadow: false,\r\n})\r\nexport class YetiCombobox {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Fires when the user has made a selection and closed the dropdown (usually by focusing elsewhere).\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifySlow: EventEmitter<CustomEvent>;\r\n\r\n  /**\r\n   * Fires when the user clicks an option or types in the input field.\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifyFast: EventEmitter<CustomEvent>;\r\n\r\n  /**\r\n   * CSS classlist to add to the component's outer wrapper element.\r\n   */\r\n  @Prop({ attribute: 'wrapper-class'}) wrapperCss: string = '';\r\n\r\n  /**\r\n   * Whether the component requires a valid value.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  /**\r\n   * Token list of left | right and/or above | below that describes the drop-down's visual position relative to the closed state anchor.\r\n   */\r\n  @Prop() menuAlignment: string = \"\";\r\n\r\n  /**\r\n   * Whether the component has a valid value.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean;\r\n\r\n  /**\r\n   * The component's value.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) value: string = '';\r\n \r\n  @Watch(\"value\")\r\n  handleValueChange() {\r\n    this.updateOptions();\r\n  }\r\n\r\n  /**\r\n   * Text that appears in the closed state/anchor when there are no selections.\r\n   */\r\n  @Prop() placeholder: string = \"- Select -\";\r\n\r\n  /**\r\n   * Array of YetiComboboxOptions that describes the component's internal representation of its options. See utils.js for more detail.\r\n   */\r\n  @State() options: YetiComboboxOption[] = [];\r\n\r\n  /**\r\n   * Whether or not the user has interacted with the component (i.e. focused and blurred).\r\n   */\r\n  @State() isTouched: boolean = false;\r\n\r\n  /**\r\n   * Toggle to re-render the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether or not the drop-down is open/visible or not.\r\n   */\r\n  @State() isOpen: boolean = false;\r\n\r\n  /**\r\n   * 0-based index of the currently focused option.\r\n   */\r\n  @State() cursorPosition: number = -1;\r\n\r\n  /**\r\n   * Whether or not to show the optional Clear all selections puck.\r\n   */\r\n  @Prop() showClear: boolean = true;\r\n\r\n\r\n  // These will be initialized on component load\r\n  componentId: string;\r\n  inputId: string;\r\n  buttonId: string;\r\n  dropdownId: string;\r\n\r\n\r\n\r\n  @Listen(\"click\", {\r\n    target: \"body\"\r\n  })\r\n  handleDefocusingClick() {\r\n    if (this.el.querySelectorAll(\":focus\").length == 0 && this.isOpen) {\r\n      this.closeFlyout();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleClick(ev) {\r\n    console.log(\"Component clicked!\");\r\n    this.isTouched = true;\r\n    this.toggleFlyout();\r\n    ev.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  handleButtonClick(ev) {\r\n    ev.preventDefault();\r\n    console.log(\"Button clicked!\");\r\n  }\r\n\r\n\r\n\r\n  @Listen(\"keydown\")\r\n  handleKeydown(ev: KeyboardEvent) {\r\n\r\n    let key = ev.key.toString().toLowerCase();\r\n\r\n    switch (key) {\r\n\r\n      // Handle potential tabout\r\n      case \"tab\": {\r\n\r\n        // Normal tab direction\r\n        if (!ev.shiftKey) {\r\n\r\n          if (this.el.querySelectorAll(\".yeti-combobox-input:focus\").length == 0 || this.value == \"\") {\r\n            this.closeFlyout();\r\n          }\r\n\r\n        // Shift tab direction (backwards)\r\n        } else {\r\n\r\n          if (this.el.querySelectorAll(\".yeti-combobox-input:focus\").length > 0) {\r\n            this.closeFlyout();\r\n          }\r\n\r\n        }\r\n        \r\n        break;\r\n      }\r\n\r\n\r\n      // Handle arrow navigation\r\n      case \"arrowdown\": {\r\n\r\n        if (this.isOpen) {\r\n          this.cursorPosition = (this.cursorPosition + 1) % this.options.length;\r\n          ev.preventDefault();\r\n        } else {\r\n\r\n          this.cursorPosition = (ev.altKey) ? this.cursorPosition : 0;\r\n          this.openFlyout();\r\n          ev.preventDefault();\r\n\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle arrow navigation\r\n      case \"arrowup\": {\r\n\r\n        if (this.isOpen) {\r\n          this.cursorPosition = (this.cursorPosition - 1 + this.options.length) % this.options.length;\r\n          ev.preventDefault();\r\n        } else {\r\n\r\n          this.cursorPosition = this.options.length - 1;\r\n          this.openFlyout();\r\n          ev.preventDefault();\r\n\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle escape navigation\r\n      case \"escape\": {\r\n\r\n        if (this.isOpen) {\r\n          this.closeFlyout();\r\n          ev.preventDefault();\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle dropdown open/close toggling enter/space or selection-making enter/space\r\n      case \"enter\": {\r\n\r\n        // Check to see if this happened while selecting something.\r\n        ev.preventDefault();\r\n        let target = ev.target as HTMLElement;\r\n\r\n        // First check if the clear everything puck has focus\r\n        if (target.classList.contains(\"yeti-combobox-puck\")) {\r\n          target.click();\r\n          break;\r\n        } \r\n        \r\n        else {\r\n          \r\n          // Next check if the cursor is on a selection and the flyout is open\r\n          if (this.cursorPosition >= 0 && this.isOpen) {\r\n            // Toggle selection on the option at this cursor position.\r\n            this.handleOptionClick(this.cursorPosition);\r\n          } \r\n          \r\n          this.closeFlyout();\r\n        }\r\n\r\n        break;\r\n      }\r\n      \r\n      default: {\r\n        // If the user is trying to type a letter or number then open the flyout\r\n        if (key.length == 1 && key.match(/[a-zA-Z0-9]/)) {\r\n          this.openFlyout();\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleClearSelections(ev: Event) {\r\n    let fieldElement = this.el.querySelector(\".yeti-combobox-input\") as HTMLElement;\r\n    for (let option of this.options) {\r\n      option.selected = false;\r\n    }\r\n    this.value = \"\";\r\n    fieldElement.focus();\r\n    ev.stopPropagation();\r\n    this.readyToVerifySlow.emit();\r\n    this.readyToVerifyFast.emit();\r\n  }\r\n\r\n\r\n\r\n  handleInputChange(ev) {\r\n    this.value = ev.target.value;\r\n  }\r\n\r\n\r\n\r\n  updateOptions() {\r\n    // Based on the (new) value of this.value, set the options' status\r\n    for (let option of this.options) {\r\n      option.selected = (option.label.toLowerCase() == this.value.toLowerCase());\r\n    }\r\n  }\r\n\r\n\r\n\r\n  openFlyout() {\r\n    this.isOpen = true;\r\n  }\r\n\r\n\r\n\r\n  closeFlyout() {\r\n    this.isOpen = false;\r\n    // this.cursorPosition = -1;\r\n    this.isTouched = true;\r\n    this.readyToVerifySlow.emit();\r\n  }\r\n\r\n\r\n\r\n  toggleFlyout() {\r\n    if (this.isOpen) {\r\n      this.closeFlyout()\r\n    } else {\r\n      this.openFlyout();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleFieldBlur(ev) {\r\n    this.isTouched = true;\r\n    this.readyToVerifySlow.emit(ev);\r\n  }\r\n\r\n\r\n\r\n  parseOptionElements(options: HTMLCollection) {\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      \r\n      let option = options.item(i);\r\n      \r\n      // First, confirm this element is indeed a yeti-combobox-option element.\r\n      if (option.tagName.toLowerCase() == 'yeti-combobox-option') {\r\n\r\n        let optionId;\r\n\r\n        if (option.hasAttribute(\"id\")) {\r\n          optionId = option.getAttribute(\"id\");\r\n        } else {\r\n          optionId = `${this.el.getAttribute(\"id\")}_option${i}`;\r\n        }\r\n\r\n        this.options.push({\r\n          selected: option.hasAttribute(\"selected\"),\r\n          label: option.innerHTML,\r\n          id: optionId\r\n        });\r\n\r\n        if (option.hasAttribute(\"selected\")) {\r\n          this.value = option.innerHTML;\r\n        }\r\n\r\n      }\r\n\r\n    } // End for\r\n\r\n    // Finally, we need to remove the option elements.\r\n    for (let j = options.length - 1; j >= 0; --j) {\r\n      options.item(j).remove();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  getPlaceholderDisplay() {\r\n    // Returns the string of text that should go in the placeholder area.\r\n    return (this.value != \"\") ? this.value : this.placeholder;\r\n  }\r\n\r\n\r\n\r\n  handleOptionClick(i: number) {\r\n    // i = options index\r\n    let clickedOption = this.options[i];\r\n    let input = this.el.querySelector(\".yeti-combobox-input\") as HTMLInputElement;\r\n\r\n    // Set selected state of each option\r\n    for (let j = 0; j < this.options.length; j++) {\r\n      this.options[j].selected = (i == j);\r\n    }\r\n\r\n    // Update value, close dropdown, refocus, and fire events\r\n    this.value = clickedOption.label;\r\n    this.closeFlyout();\r\n    input.focus();\r\n    this.readyToVerifyFast.emit();\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids and handle any <yeti-combobox-option> elements\r\n    let optionElements = this.el.children;\r\n\r\n    // Set up ids\r\n    this.componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!this.componentId || this.componentId == \"\") {\r\n      this.componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", this.componentId);\r\n    }\r\n\r\n    this.inputId = this.componentId + \"_input\";\r\n    this.buttonId = this.componentId + \"_button\";\r\n    this.dropdownId = this.componentId + \"_dropdown\";\r\n\r\n    // Look for and handle any <yeti-combobox-option> elements.\r\n    if (optionElements.length > 0) {\r\n      this.parseOptionElements(optionElements);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperCss = 'yeti-combobox-wrapper';\r\n    let dropdownCss = 'yeti-combobox-dropdown';\r\n\r\n    wrapperCss += (this.wrapperCss == \"\") ? '' : ` ${this.wrapperCss}`;\r\n\r\n    if (this.isValid == false) {\r\n      wrapperCss += ' yeti-combobox__error';\r\n    }\r\n\r\n    dropdownCss += (this.isOpen) ? \" yeti-combobox-dropdown__open\" : \"\";\r\n\r\n    if (this.menuAlignment == \"right\") {\r\n      dropdownCss += ' yeti-combobox-dropdown-align-right'\r\n    }\r\n\r\n    return ([\r\n      <div class={wrapperCss}>\r\n\r\n        <div \r\n          class=\"yeti-combobox\"\r\n          onClick={(ev) => this.handleClick(ev)}\r\n        >\r\n\r\n          <input \r\n            type=\"text\" \r\n            class=\"yeti-combobox-input\" \r\n            title={this.value}\r\n            value={this.value}\r\n            onFocus={() => {\r\n              this.isTouched = true;\r\n            }}\r\n            onBlur={() => {\r\n              //this.isOpen = false;\r\n            }}\r\n            onInput={(ev) => this.handleInputChange(ev)}\r\n            role=\"combobox\"\r\n            aria-autocomplete=\"none\"\r\n            aria-controls={this.dropdownId}\r\n            aria-expanded={this.isOpen}\r\n            id={this.inputId}\r\n          />\r\n\r\n          { (this.showClear && this.value != '') ? \r\n\r\n            (<button class=\"yeti-combobox-clear\" title=\"Clear all selections\" onClick={ (ev) => { this.handleClearSelections(ev); ev.preventDefault() }}>\r\n              <span class=\"material-icons yeti-combobox-clear-icon\">clear</span>\r\n            </button>)\r\n\r\n          :\r\n\r\n            \"\"\r\n\r\n          }\r\n\r\n          <button \r\n            class=\"yeti-combobox-button\" \r\n            tabIndex={-1}\r\n            aria-controls={this.dropdownId}\r\n            aria-expanded={this.isOpen}\r\n            onClick={(ev) => { this.handleButtonClick(ev) }}\r\n          >\r\n            <yeti-icon iconCode={(this.isOpen ? 'expand_less' : 'expand_more')} alt={(this.isOpen ? 'close' : 'open')}></yeti-icon>\r\n          </button>\r\n\r\n        </div>\r\n\r\n        \r\n        <div class={dropdownCss} aria-hidden=\"true\">\r\n        \r\n          <ul\r\n            class=\"yeti-combobox-options\"\r\n            id={this.dropdownId}\r\n            role=\"listbox\"\r\n          >\r\n\r\n            {this.options.map((option, i) => {\r\n\r\n                let optionClass = (this.cursorPosition == i) ? \"yeti-combobox-option yeti-combobox-option__hover\" : \"yeti-combobox-option\";\r\n                optionClass += (option.selected) ? \" yeti-combobox-option__selected\" : \"\";\r\n              \r\n                return (\r\n                  <li \r\n                    id={option.id} \r\n                    key={option.id} \r\n                    role=\"option\"\r\n                    aria-selected={option.selected}\r\n                  >\r\n                    <button \r\n                      class={optionClass} \r\n                      tabIndex={-1} \r\n                      onClick={(ev) => { this.handleOptionClick(i); ev.preventDefault(); }}\r\n                    >\r\n                      <span class=\"yeti-combobox-option-label\">{option.label}</span>\r\n                      <span class=\"yeti-combobox-option-checkmark\">\r\n                        {(option.selected) ? \r\n                        \r\n                          <yeti-icon iconCode='checkmark' alt='selected'></yeti-icon>\r\n\r\n                        :\r\n\r\n                          ''\r\n\r\n                        }\r\n                      </span>\r\n                    </button>\r\n                  </li>\r\n                )\r\n              }\r\n            \r\n            )}\r\n\r\n          </ul>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    // If the cursor is over an option, make sure it's visible.\r\n    if (this.isOpen) {\r\n      // The facade dropdown is open. If one of the options is being hovered over then we want to scroll it into view.\r\n      // If not, then we'll scroll the whole dropdown into view.\r\n      let dropdown = this.el.querySelector(\".yeti-combobox-dropdown\");\r\n      let hoveredOption = this.el.querySelector(\".yeti-combobox-option__hover\");\r\n      let thingToScrollIntoView = (hoveredOption) ? hoveredOption : dropdown;\r\n      thingToScrollIntoView.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\"\r\n      });\r\n    }\r\n  }\r\n\r\n}"],"mappings":"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"}