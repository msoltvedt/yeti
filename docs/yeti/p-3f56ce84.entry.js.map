{"version":3,"names":["YetiField","this","tipId","utils","generateUniqueId","inputId","validateLabel","newValue","isInvalid","Error","handleReadyToVerifySlow","ev","childControl","target","autovalidate","required","value","errorMessage","label","isValid","nodeName","toLowerCase","render","cssClass","fieldClass","h","class","htmlFor","type","inputName","defaultValue","id","tip"],"sources":["src/components/yeti-field/yeti-field.tsx"],"sourcesContent":["import { Component, Prop, h, State, Watch, Listen } from '@stencil/core';\nimport { utils } from '../../utils/utils';\n\n@Component({\n  tag: 'yeti-field',\n  shadow: false,\n})\nexport class YetiField {\n\n  @Prop() inputId: string = utils.generateUniqueId();\n\n  @Prop() inputName: string = this.inputId;\n\n  @Prop() type: string = \"text\";\n\n  @Prop() fieldClass: string = \"\";\n  \n  @Prop() label!: string;\n  @Watch('label')\n  validateLabel(newValue: string) {\n    // Label must have a non-empty value.\n    const isInvalid = typeof newValue !== 'string' || newValue === '';\n    if (isInvalid) {\n      throw new Error('yeti-field must have a non-empty label attribute');\n    }\n  }\n\n  @Prop() tip: string;\n\n  @Prop() required: boolean = false;\n\n  @Prop({mutable: true}) errorMessage: string = 'Error: please correct this field.'\n\n  @Prop({\n    mutable: true,\n    reflect: true\n  }) isValid: boolean = true;\n\n  @Prop() defaultValue: string = '';\n\n  @Prop() autovalidate: boolean = true;\n\n  @State() isDirty: boolean = false;\n  \n  @Listen('readyToVerifySlow', { capture: true })\n  handleReadyToVerifySlow(ev) {\n\n    let childControl = ev.target;\n\n    if (this.autovalidate == false) {\n      return;\n    }\n\n    if (this.required) {\n\n      // Autoverification is on, this field is required, and the child component just notified us that it's ready for verification.\n\n      // First, regardless of whether it's an input or date-picker, it can't be empty.\n      if (childControl.value == \"\") {\n\n        this.errorMessage = `${this.label} field is required.`\n        this.isValid = false;\n        return;\n\n      }\n      \n    } else if (childControl.nodeName.toLowerCase() == \"yeti-date-picker\") {\n\n      // Second, if it's a non-empty date-picker, see if it's a valid date.\n\n      if (!childControl.isValid) {\n\n        // The date-picker already validates itself. We just need to check its status.\n        this.errorMessage = 'Enter the date in mm/dd/yyyy format.'\n        this.isValid = false;\n        return;\n\n      }\n    }\n\n    this.isValid = true;\n\n  }\n\n  tipId = utils.generateUniqueId();\n\n\n\n  render() {\n\n    let cssClass = \"yeti-form-field\";\n\n    this.validateLabel(this.label);\n\n    if (this.fieldClass != \"\") {\n      cssClass =\"yeti-form-field \" + this.fieldClass;\n    }\n\n    return (\n      <div class={cssClass}>\n\n        <label htmlFor={this.inputId} class=\"yeti-form-label\">{this.label}{this.required ? ' (required)' : null}</label>\n\n        { \n          (this.type == \"date\") ?\n\n            <yeti-date-picker\n              input-id={this.inputId}\n              input-name={this.inputName}\n              value={this.defaultValue}\n              required={this.required}\n              is-valid={this.isValid}\n              described-by={this.tipId}\n            ></yeti-date-picker>\n\n          :\n        \n            <yeti-input \n              input-id={this.inputId} \n              input-class={!this.isValid ? 'yeti-input__error' : null} \n              value={this.defaultValue} \n              required={this.required}\n              is-valid={this.isValid}\n              described-by={this.tipId}\n            ></yeti-input>\n        }\n        \n        <span class=\"yeti-form-tip\" aria-live=\"polite\" id={this.tipId}>{\n\n              !this.isValid\n              ? this.errorMessage\n              : \n                this.tip\n                ? this.tip\n                : null\n\n        }</span>\n        \n      </div>\n    );\n  }\n\n}\n"],"mappings":"qFAOaA,EAAS,M,yBA6EpBC,KAAAC,MAAQC,EAAMC,mB,aA3EYD,EAAMC,mB,eAEJH,KAAKI,Q,UAEV,O,gBAEM,G,sDAcD,M,kBAEkB,oC,aAKxB,K,kBAES,G,kBAEC,K,aAEJ,K,CAvB5BC,cAAcC,GAEZ,MAAMC,SAAmBD,IAAa,UAAYA,IAAa,GAC/D,GAAIC,EAAW,CACb,MAAM,IAAIC,MAAM,mD,EAsBpBC,wBAAwBC,GAEtB,IAAIC,EAAeD,EAAGE,OAEtB,GAAIZ,KAAKa,cAAgB,MAAO,CAC9B,M,CAGF,GAAIb,KAAKc,SAAU,CAKjB,GAAIH,EAAaI,OAAS,GAAI,CAE5Bf,KAAKgB,aAAe,GAAGhB,KAAKiB,2BAC5BjB,KAAKkB,QAAU,MACf,M,OAIG,GAAIP,EAAaQ,SAASC,eAAiB,mBAAoB,CAIpE,IAAKT,EAAaO,QAAS,CAGzBlB,KAAKgB,aAAe,uCACpBhB,KAAKkB,QAAU,MACf,M,EAKJlB,KAAKkB,QAAU,I,CAQjBG,SAEE,IAAIC,EAAW,kBAEftB,KAAKK,cAAcL,KAAKiB,OAExB,GAAIjB,KAAKuB,YAAc,GAAI,CACzBD,EAAU,mBAAqBtB,KAAKuB,U,CAGtC,OACEC,EAAA,OAAKC,MAAOH,GAEVE,EAAA,SAAOE,QAAS1B,KAAKI,QAASqB,MAAM,mBAAmBzB,KAAKiB,MAAOjB,KAAKc,SAAW,cAAgB,MAGhGd,KAAK2B,MAAQ,OAEZH,EAAA,+BACYxB,KAAKI,QAAO,aACVJ,KAAK4B,UACjBb,MAAOf,KAAK6B,aACZf,SAAUd,KAAKc,SAAQ,WACbd,KAAKkB,QAAO,eACRlB,KAAKC,QAKrBuB,EAAA,yBACYxB,KAAKI,QAAO,eACRJ,KAAKkB,QAAU,oBAAsB,KACnDH,MAAOf,KAAK6B,aACZf,SAAUd,KAAKc,SAAQ,WACbd,KAAKkB,QAAO,eACRlB,KAAKC,QAIzBuB,EAAA,QAAMC,MAAM,gBAAe,YAAW,SAASK,GAAI9B,KAAKC,QAEjDD,KAAKkB,QACJlB,KAAKgB,aAELhB,KAAK+B,IACH/B,KAAK+B,IACL,M"}