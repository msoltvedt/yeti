{"version":3,"names":["YetiCombobox","constructor","hostRef","this","wrapperCss","required","menuAlignment","value","placeholder","options","isTouched","iLoveJSX","isOpen","cursorPosition","showClear","inputId","inputName","inputDescribedBy","isLookup","isFilterable","selectionType","handleValueChange","updateOptions","handleSelectionTypeChange","handleDefocusingClick","el","querySelectorAll","length","closeFlyout","handleClick","ev","toggleFlyout","preventDefault","handleButtonClick","handleKeydown","key","toString","toLowerCase","shiftKey","openFlyout","target","classList","contains","click","handleOptionClick","option","selected","label","match","handleClearSelections","fieldElement","querySelector","focus","stopPropagation","readyToVerifySlow","emit","readyToVerifyFast","handleInputChange","foundASelectionAlready","indexOf","isVisible","handleFieldBlur","parseOptionElements","i","item","tagName","optionId","hasAttribute","getAttribute","push","innerHTML","id","j","remove","getPlaceholderDisplay","clickedOption","input","componentWillLoad","optionElements","children","componentId","utils","generateUniqueId","setAttribute","buttonId","dropdownId","render","dropdownCss","activeDescendantId","isValid","h","class","onClick","Object","assign","type","name","onFocus","onBlur","e","onInput","role","autocomplete","title","tabIndex","iconCode","alt","map","optionClass","componentDidRender","dropdown","hoveredOption","thingToScrollIntoView","scrollIntoView","behavior","block"],"sources":["src/components/yeti-combobox/yeti-combobox.tsx"],"sourcesContent":["import { Component, Watch, Prop, h, State, Event, EventEmitter, Element, Listen, /*Watch*/ } from '@stencil/core';\r\nimport { utils, YetiComboboxOption } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-combobox',\r\n  shadow: false,\r\n})\r\nexport class YetiCombobox {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Fires when the user has made a selection and closed the dropdown (usually by focusing elsewhere).\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifySlow: EventEmitter<CustomEvent>;\r\n\r\n  /**\r\n   * Fires when the user clicks an option or types in the input field.\r\n   */\r\n  @Event({ bubbles: true }) readyToVerifyFast: EventEmitter<CustomEvent>;\r\n\r\n  /**\r\n   * CSS classlist to add to the component's outer wrapper element.\r\n   */\r\n  @Prop({ attribute: 'wrapper-class'}) wrapperCss: string = '';\r\n\r\n  /**\r\n   * Whether the component requires a valid value.\r\n   */\r\n  @Prop() required: boolean = false;\r\n\r\n  /**\r\n   * Token list of left | right and/or above | below that describes the drop-down's visual position relative to the closed state anchor.\r\n   */\r\n  @Prop() menuAlignment: string = \"\";\r\n\r\n  /**\r\n   * Whether the component has a valid value.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isValid: boolean;\r\n\r\n  /**\r\n   * The component's value.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) value: string = '';\r\n \r\n  @Watch(\"value\")\r\n  handleValueChange() {\r\n    this.updateOptions();\r\n  }\r\n\r\n  /**\r\n   * Text that appears in the closed state/anchor when there are no selections.\r\n   */\r\n  @Prop() placeholder: string = \"- Select -\";\r\n\r\n  /**\r\n   * Array of YetiComboboxOptions that describes the component's internal representation of its options. See utils.js for more detail.\r\n   */\r\n  @State() options: YetiComboboxOption[] = [];\r\n\r\n  /**\r\n   * Whether or not the user has interacted with the component (i.e. focused and blurred).\r\n   */\r\n  @State() isTouched: boolean = false;\r\n\r\n  /**\r\n   * Toggle to re-render the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether or not the drop-down is open/visible or not.\r\n   */\r\n  @State() isOpen: boolean = false;\r\n\r\n  /**\r\n   * 0-based index of the currently focused option.\r\n   */\r\n  @State() cursorPosition: number = -1;\r\n\r\n  /**\r\n   * Whether or not to show the optional Clear all selections puck.\r\n   */\r\n  @Prop() showClear: boolean = true;\r\n\r\n  /**\r\n   * Optionally provide an id for the combobox element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputId: string = \"\";\r\n\r\n  /**\r\n   * Optionally provide a form element name.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) inputName: string = \"\";\r\n\r\n  /**\r\n   * Optionally provide the id of a describing element (like an input tip).\r\n   */\r\n  @Prop({ attribute: 'input-describedby'}) inputDescribedBy: string = \"\";\r\n\r\n  /**\r\n   * Use the Lookup style (i.e. swap the caret for a search icon)\r\n   */\r\n  @Prop() isLookup: boolean = false;\r\n\r\n  /**\r\n   * Whether the options list should be filtered by the text input\r\n   */\r\n  @Prop() isFilterable: boolean = false;\r\n\r\n  /**\r\n   * Whether/how changes to the text field value select an option from the list. Possible values are \"manual\" (default) and \"automatic\". Any value other than \"automatic\" will equal manual.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) selectionType?: string = \"manual\";\r\n \r\n  @Watch(\"selectionType\")\r\n  handleSelectionTypeChange() {\r\n    // Make sure selection type is a valid value.\r\n    this.selectionType = (this.selectionType == \"automatic\") ? this.selectionType : \"manual\";\r\n  }\r\n\r\n\r\n  // These will be initialized on component load\r\n  componentId: string;\r\n  buttonId: string;\r\n  dropdownId: string;\r\n\r\n\r\n\r\n  @Listen(\"click\", {\r\n    target: \"body\"\r\n  })\r\n  handleDefocusingClick() {\r\n    if (this.el.querySelectorAll(\":focus\").length == 0 && this.isOpen) {\r\n      this.closeFlyout();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleClick(ev) {\r\n    this.isTouched = true;\r\n    this.toggleFlyout();\r\n    ev.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  handleButtonClick(ev) {\r\n    ev.preventDefault();\r\n    // Otherwise just let the handleClick function do the rest.\r\n  }\r\n\r\n\r\n\r\n  @Listen(\"keydown\")\r\n  handleKeydown(ev: KeyboardEvent) {\r\n\r\n    let key = ev.key.toString().toLowerCase();\r\n\r\n    switch (key) {\r\n\r\n      // Handle potential tabout\r\n      case \"tab\": {\r\n\r\n        // Normal tab direction\r\n        if (!ev.shiftKey) {\r\n\r\n          if (this.el.querySelectorAll(\".yeti-combobox-input:focus\").length == 0 || this.value == \"\") {\r\n            this.closeFlyout();\r\n          }\r\n\r\n        // Shift tab direction (backwards)\r\n        } else {\r\n\r\n          if (this.el.querySelectorAll(\".yeti-combobox-input:focus\").length > 0) {\r\n            this.closeFlyout();\r\n          }\r\n\r\n        }\r\n        \r\n        break;\r\n      }\r\n\r\n\r\n      // Handle arrow navigation\r\n      case \"arrowdown\": {\r\n\r\n        if (this.isOpen) {\r\n          this.cursorPosition = (this.cursorPosition + 1) % this.options.length;\r\n          ev.preventDefault();\r\n        } else {\r\n\r\n          this.cursorPosition = (ev.altKey) ? this.cursorPosition : 0;\r\n          this.openFlyout();\r\n          ev.preventDefault();\r\n\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle arrow navigation\r\n      case \"arrowup\": {\r\n\r\n        if (this.isOpen) {\r\n          this.cursorPosition = (this.cursorPosition - 1 + this.options.length) % this.options.length;\r\n          ev.preventDefault();\r\n        } else {\r\n\r\n          this.cursorPosition = this.options.length - 1;\r\n          this.openFlyout();\r\n          ev.preventDefault();\r\n\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle escape navigation\r\n      case \"escape\": {\r\n\r\n        if (this.isOpen) {\r\n          this.closeFlyout();\r\n          ev.preventDefault();\r\n        }\r\n\r\n        break;\r\n      }\r\n\r\n\r\n      // Handle dropdown open/close toggling enter/space or selection-making enter/space\r\n      case \"enter\": {\r\n\r\n        // Check to see if this happened while selecting something.\r\n        ev.preventDefault();\r\n        let target = ev.target as HTMLElement;\r\n\r\n        // First check if the clear everything puck has focus\r\n        if (target.classList.contains(\"yeti-combobox-clear\")) {\r\n          target.click();\r\n          break;\r\n        } \r\n        \r\n        else {\r\n          \r\n          // Next check if the cursor is on a selection and the flyout is open\r\n          if (this.cursorPosition >= 0 && this.isOpen) {\r\n            // Toggle selection on the option at this cursor position.\r\n            this.handleOptionClick(this.cursorPosition);\r\n          }\r\n          \r\n          // Finally, if the selection type is automatic, and there's at least one option selected, set the value to its label.\r\n          if (this.selectionType == \"automatic\") {\r\n            for (let option of this.options) {\r\n              if (option.selected) {\r\n                this.value = option.label;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          \r\n          this.closeFlyout();\r\n        }\r\n\r\n        break;\r\n      }\r\n      \r\n      default: {\r\n        // If the user is trying to type a letter or number then open the flyout\r\n        if (key.length == 1 && key.match(/[a-zA-Z0-9]/)) {\r\n          this.openFlyout();\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleClearSelections(ev: Event) {\r\n    let fieldElement = this.el.querySelector(\".yeti-combobox-input\") as HTMLElement;\r\n    for (let option of this.options) {\r\n      option.selected = false;\r\n    }\r\n    this.value = \"\";\r\n    fieldElement.focus();\r\n    ev.stopPropagation();\r\n    this.readyToVerifySlow.emit();\r\n    this.readyToVerifyFast.emit();\r\n  }\r\n\r\n\r\n\r\n  handleInputChange(ev) {\r\n    this.value = ev.target.value;\r\n  }\r\n\r\n\r\n\r\n  updateOptions() {\r\n    // Based on the (new) value of this.value, set the options' status\r\n    let foundASelectionAlready = false;\r\n\r\n    for (let option of this.options) {\r\n      option.selected = (option.label.toLowerCase() == this.value.toLowerCase());\r\n\r\n      // Determine whether to show this option or not based on filtering\r\n      if (this.isFilterable && option.label.toLowerCase().indexOf( this.value.toLowerCase() ) < 0) {\r\n        option.isVisible = false;\r\n      } else {\r\n        option.isVisible = true;\r\n      }\r\n\r\n      // Determine whether to mark this option as selected based on selection type\r\n      if (this.selectionType == \"automatic\") {\r\n\r\n        // If this is a match, and we don't already have one, mark this one as selected. Otherwise set it as unselected.\r\n        if (!foundASelectionAlready\r\n            && this.value != \"\"\r\n            && option.label.toLowerCase().indexOf( this.value.toLowerCase() ) >= 0 \r\n        ) {\r\n          option.selected = true;\r\n          foundASelectionAlready = true;\r\n        } else {\r\n          option.selected = false;\r\n        }\r\n\r\n      }\r\n      \r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  openFlyout() {\r\n    this.isOpen = true;\r\n  }\r\n\r\n\r\n\r\n  closeFlyout() {\r\n    this.isOpen = false;\r\n    // this.cursorPosition = -1;\r\n    this.isTouched = true;\r\n    this.readyToVerifySlow.emit();\r\n  }\r\n\r\n\r\n\r\n  toggleFlyout() {\r\n    if (this.isOpen) {\r\n      this.closeFlyout()\r\n    } else {\r\n      this.openFlyout();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleFieldBlur(ev) {\r\n    this.isTouched = true;\r\n    \r\n    // If selection type is automatic, update value with the first selected option.\r\n    if (this.selectionType == \"automatic\") {\r\n      for (let option of this.options) {\r\n        if (option.selected) {\r\n          this.value = option.label;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.readyToVerifySlow.emit(ev);\r\n  }\r\n\r\n\r\n\r\n  parseOptionElements(options: HTMLCollection) {\r\n\r\n    for (let i = 0; i < options.length; i++) {\r\n      \r\n      let option = options.item(i);\r\n      \r\n      // First, confirm this element is indeed a yeti-combobox-option element.\r\n      if (option.tagName.toLowerCase() == 'yeti-combobox-option') {\r\n\r\n        let optionId;\r\n\r\n        if (option.hasAttribute(\"id\")) {\r\n          optionId = option.getAttribute(\"id\");\r\n        } else {\r\n          optionId = `${this.el.getAttribute(\"id\")}_option${i}`;\r\n        }\r\n\r\n        this.options.push({\r\n          selected: (option.hasAttribute(\"selected\") || option.innerHTML == this.value),\r\n          label: option.innerHTML,\r\n          isVisible: true,\r\n          id: optionId\r\n        });\r\n\r\n        if (option.hasAttribute(\"selected\")) {\r\n          this.value = option.innerHTML;\r\n        }\r\n\r\n      }\r\n\r\n    } // End for\r\n\r\n    // Finally, we need to remove the option elements.\r\n    for (let j = options.length - 1; j >= 0; --j) {\r\n      options.item(j).remove();\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  getPlaceholderDisplay() {\r\n    // Returns the string of text that should go in the placeholder area.\r\n    return (this.value != \"\") ? this.value : this.placeholder;\r\n  }\r\n\r\n\r\n\r\n  handleOptionClick(i: number) {\r\n    // i = options index\r\n    let clickedOption = this.options[i];\r\n    let input = this.el.querySelector(\".yeti-combobox-input\") as HTMLInputElement;\r\n\r\n    // Set selected state of each option\r\n    for (let j = 0; j < this.options.length; j++) {\r\n      this.options[j].selected = (i == j);\r\n    }\r\n\r\n    // Update value, close dropdown, refocus, and fire events\r\n    this.value = clickedOption.label;\r\n    this.closeFlyout();\r\n    input.focus();\r\n    this.readyToVerifyFast.emit();\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids and handle any <yeti-combobox-option> elements\r\n    let optionElements = this.el.children;\r\n\r\n    // Set up ids\r\n    this.componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!this.componentId || this.componentId == \"\") {\r\n      this.componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", this.componentId);\r\n    }\r\n\r\n    this.inputId = (this.inputId != \"\") ? this.inputId : this.componentId + \"_input\";\r\n    this.buttonId = this.componentId + \"_button\";\r\n    this.dropdownId = this.componentId + \"_dropdown\";\r\n\r\n    this.inputName = (this.inputName != \"\") ? this.inputName : this.inputId; // If the user supplied a name, use it, otherwise just re-use the id.\r\n\r\n    // Look for and handle any <yeti-combobox-option> elements.\r\n    if (optionElements.length > 0) {\r\n      this.parseOptionElements(optionElements);\r\n    }\r\n\r\n    // Make sure selection type is a valid value.\r\n    this.selectionType = (this.selectionType == \"automatic\") ? this.selectionType : \"manual\";\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperCss = 'yeti-combobox-wrapper';\r\n    let dropdownCss = 'yeti-combobox-dropdown';\r\n    let activeDescendantId = (this.isOpen && this.cursorPosition != -1) ? `${this.componentId}_option${this.cursorPosition}` : ``; // If there is an active descendant (i.e. the menu is open and one of the options has the cursor highlight) then its id will look something like componentId_option3.\r\n\r\n    wrapperCss += (this.wrapperCss == \"\") ? '' : ` ${this.wrapperCss}`;\r\n\r\n    if (this.isValid == false) {\r\n      wrapperCss += ' yeti-combobox__error';\r\n    }\r\n\r\n    dropdownCss += (this.isOpen) ? \" yeti-combobox-dropdown__open\" : \"\";\r\n\r\n    if (this.menuAlignment == \"right\") {\r\n      dropdownCss += ' yeti-combobox-dropdown-align-right'\r\n    }\r\n\r\n    return ([\r\n      <div class={wrapperCss}>\r\n\r\n        <div \r\n          class=\"yeti-combobox\"\r\n          onClick={(ev) => this.handleClick(ev)}\r\n        >\r\n\r\n          <input \r\n            type=\"text\" \r\n            class=\"yeti-combobox-input\" \r\n            // title={this.value}\r\n            value={this.value}\r\n            name={this.inputName}\r\n            onFocus={() => {\r\n              this.isTouched = true;\r\n            }}\r\n            onBlur={(e) => {\r\n              this.handleFieldBlur(e);\r\n            }}\r\n            onInput={(ev) => this.handleInputChange(ev)}\r\n            role=\"combobox\"\r\n            autocomplete=\"off\"\r\n            aria-autocomplete=\"none\"\r\n            aria-controls={this.dropdownId}\r\n            aria-expanded={this.isOpen}\r\n            id={this.inputId}\r\n            {...(this.inputDescribedBy != \"\") ? { \"aria-describedby\" : this.inputDescribedBy } : {}}\r\n            {...(activeDescendantId != \"\") ? { \"aria-activedescendant\" : activeDescendantId } : {}}\r\n          />\r\n\r\n          { (this.showClear && this.value != '') ? \r\n\r\n            (<button class=\"yeti-combobox-clear\" title=\"Clear all selections\" onClick={ (ev) => { this.handleClearSelections(ev); ev.preventDefault() }}>\r\n              <span class=\"material-icons yeti-combobox-clear-icon\" aria-hidden=\"true\">clear</span>\r\n            </button>)\r\n\r\n          :\r\n\r\n            \"\"\r\n\r\n          }\r\n\r\n          <button \r\n            class=\"yeti-combobox-button\" \r\n            tabIndex={-1}\r\n            aria-controls={this.dropdownId}\r\n            aria-expanded={this.isOpen}\r\n            id={this.buttonId}\r\n            onClick={(ev) => { this.handleButtonClick(ev) }}\r\n          >\r\n            {\r\n              (!this.isLookup) ?\r\n\r\n                <yeti-icon iconCode={(this.isOpen ? 'expand_less' : 'expand_more')} alt={(this.isOpen ? 'close' : 'open')}></yeti-icon>\r\n\r\n              :\r\n\r\n                <yeti-icon iconCode='search' alt={(this.isOpen ? 'lookup, close' : 'lookup, open')}></yeti-icon>\r\n\r\n            }\r\n            \r\n          </button>\r\n\r\n        </div>\r\n\r\n        \r\n        <div class={dropdownCss}>\r\n        \r\n          <ul\r\n            class=\"yeti-combobox-options\"\r\n            id={this.dropdownId}\r\n            role=\"listbox\"\r\n          >\r\n\r\n            {this.options.map((option, i) => {\r\n\r\n                let optionClass = (this.cursorPosition == i) ? \"yeti-combobox-option yeti-combobox-option__hover\" : \"yeti-combobox-option\";\r\n                optionClass += (option.selected) ? \" yeti-combobox-option__selected\" : \"\";\r\n\r\n                // Only render visible options\r\n                if (!option.isVisible) {\r\n                  return \"\";\r\n                }\r\n              \r\n                return (\r\n                  <li \r\n                    id={option.id} \r\n                    key={option.id} \r\n                    role=\"option\"\r\n                    aria-selected={`${option.selected}`}\r\n                    class={optionClass}\r\n                    onClick={(ev) => { this.handleOptionClick(i); ev.preventDefault(); }}\r\n                  >\r\n\r\n                      <span class=\"yeti-combobox-option-label\">{option.label}</span>\r\n                      <span class=\"yeti-combobox-option-checkmark\" aria-hidden='true'>\r\n                        {(option.selected) ? \r\n                        \r\n                          <yeti-icon iconCode='checkmark'></yeti-icon>\r\n\r\n                        :\r\n\r\n                          ''\r\n\r\n                        }\r\n                      </span>\r\n\r\n                  </li>\r\n                )\r\n              }\r\n            \r\n            )}\r\n\r\n          </ul>\r\n\r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    // If the cursor is over an option, make sure it's visible.\r\n    if (this.isOpen) {\r\n      // The facade dropdown is open. If one of the options is being hovered over then we want to scroll it into view.\r\n      // If not, then we'll scroll the whole dropdown into view.\r\n      let dropdown = this.el.querySelector(\".yeti-combobox-dropdown\");\r\n      let hoveredOption = this.el.querySelector(\".yeti-combobox-option__hover\");\r\n      let thingToScrollIntoView = (hoveredOption) ? hoveredOption : dropdown;\r\n      thingToScrollIntoView.scrollIntoView({\r\n        behavior: \"smooth\",\r\n        block: \"nearest\"\r\n      });\r\n    }\r\n  }\r\n\r\n}"],"mappings":"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","ignoreList":[]}