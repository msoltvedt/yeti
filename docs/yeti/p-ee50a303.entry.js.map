{"version":3,"names":["YetiTooltip","constructor","hostRef","this","wrapperClass","tooltipClass","text","position","clickToOpen","slotId","tipId","blockAnchor","forceOpen","isClickedOpen","iLoveJSX","hasRichContent","justClickedClosed","handleSlotHover","scrollTooltipIntoView","handleSlotFocus","handleDeFocusingClick","handleClick","e","stopImmediatePropagation","handleTriggerClick","closeOtherTooltips","preventDefault","handleTriggerKeyPress","key","handleCloseTooltipClick","allTooltips","document","querySelectorAll","i","length","someTooltip","id","el","getAttribute","actual","querySelector","scrollIntoView","behavior","block","componentWillLoad","componentId","utils","generateUniqueId","setAttribute","renderContent","h","name","render","tipClass","class","Object","assign","onClick","onKeyPress","tabindex","iconCode","iconClass","componentDidRender","slot","firstElementChild","trigger","focus"],"sources":["src/components/yeti-tooltip/yeti-tooltip.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element, Listen } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-tooltip',\r\n  shadow: false,\r\n})\r\nexport class YetiTooltip {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop() wrapperClass: string = '';\r\n\r\n  /**\r\n   * CSS classlist to add to the actual tooltip element.\r\n   */\r\n  @Prop() tooltipClass: string = '';\r\n\r\n  /**\r\n   * Text value to display as the tooltip's contents.\r\n   */\r\n  @Prop() text: string = \"I'm a helpful tooltip.\";\r\n\r\n  /**\r\n   * Token list to describe the tooltip's position relative to its anchor: left | right and/or above | below.\r\n   */\r\n  @Prop() position: string = \"above\";\r\n\r\n  /**\r\n   * Boolean value that sets whether the tooltip opens on hover/focus (default) or on click.\r\n   */\r\n  @Prop() clickToOpen: boolean = false;\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) tipId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * Whether the anchor should be forced to be a CSS display block style or left as is.\r\n   */\r\n  @Prop() blockAnchor: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip should remain open permanently.\r\n   */\r\n  @Prop() forceOpen: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip has been clicked open or not.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) isClickedOpen: boolean = false;\r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip has rich content (i.e. html rather than just a string of text) or not.\r\n   */\r\n  @State() hasRichContent: boolean = false;\r\n\r\n  justClickedClosed: boolean = false;\r\n\r\n\r\n  @Listen('mouseover')\r\n  handleSlotHover() {\r\n    if (!this.clickToOpen) {\r\n      this.scrollTooltipIntoView();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen('focusin')\r\n  handleSlotFocus() {\r\n    if (!this.clickToOpen) {\r\n      this.scrollTooltipIntoView();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen('click', {\r\n    target: 'body'\r\n  })\r\n  handleDeFocusingClick() {\r\n    this.isClickedOpen = false;\r\n  }\r\n\r\n\r\n\r\n  @Listen('click')\r\n  handleClick(e) {\r\n    e.stopImmediatePropagation(); // Intercept the click event before it gets to the body-level handler\r\n  }\r\n\r\n  \r\n\r\n  handleTriggerClick(e) {\r\n    if (this.clickToOpen && !this.justClickedClosed) {\r\n      this.closeOtherTooltips();\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      this.scrollTooltipIntoView();\r\n      this.isClickedOpen = !this.isClickedOpen;\r\n      return false;\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  handleTriggerKeyPress(e) {\r\n    if (this.clickToOpen && e.key == \"Enter\" && !this.justClickedClosed) {\r\n      this.handleTriggerClick(e);\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleCloseTooltipClick(e) {\r\n    this.justClickedClosed = true;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n    this.isClickedOpen = false;\r\n  }\r\n\r\n\r\n\r\n  closeOtherTooltips() {\r\n    let allTooltips = document.querySelectorAll(\"yeti-tooltip\");\r\n\r\n    for (let i = 0; i < allTooltips.length; i++) {\r\n      let someTooltip = allTooltips[i];\r\n      if (someTooltip.clickToOpen && someTooltip.isClickedOpen && someTooltip.id != this.el.getAttribute(\"id\")) {\r\n        someTooltip.isClickedOpen = false;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n\r\n  scrollTooltipIntoView() {\r\n    let actual = this.el.querySelector(\".yeti-tooltip\");\r\n    actual.scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"nearest\"\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    if (this.el.querySelector('[slot=\"content\"]')) {\r\n      this.hasRichContent = true;\r\n    }\r\n\r\n    this.tipId = (this.tipId != \"\") ? this.tipId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n  }\r\n\r\n\r\n\r\n  renderContent() {\r\n    if (this.hasRichContent) {\r\n      return <slot name=\"content\"></slot>\r\n    } else {\r\n      return this.text;\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperClass = 'yeti-tooltip-wrapper';\r\n    let tipClass = 'yeti-tooltip';\r\n\r\n    wrapperClass += (this.wrapperClass != '') ? ` ${this.wrapperClass}` : '';\r\n    tipClass += (this.tooltipClass != '') ? ` ${this.tooltipClass}` : '';\r\n\r\n    tipClass += (this.isClickedOpen) ? ' yeti-tooltip__clicked_open' : '';\r\n\r\n    tipClass += (this.forceOpen) ? ' yeti-tooltip__forced_open' : '';\r\n\r\n    wrapperClass += (this.clickToOpen) ? ' yeti-tooltip-wrapper-is_click_to_open' : '';\r\n    wrapperClass += (this.blockAnchor) ? ' yeti-tooltip-wrapper-has_block_anchor' : '';\r\n\r\n    switch (this.position) {\r\n\r\n      case \"right\":\r\n\r\n        tipClass += \" yeti-tooltip-right\";\r\n        break;\r\n\r\n      case \"below\":\r\n\r\n        tipClass += \" yeti-tooltip-below\";\r\n        break;\r\n\r\n      case \"left\":\r\n\r\n        tipClass += \" yeti-tooltip-left\";\r\n        break;\r\n\r\n      case \"below-left\":\r\n\r\n        tipClass += \" yeti-tooltip-below-left\";\r\n        break;\r\n\r\n      case \"below-right\":\r\n\r\n        tipClass += \" yeti-tooltip-below-right\";\r\n        break;\r\n\r\n      case \"above-left\":\r\n\r\n        tipClass += \" yeti-tooltip-above-left\";\r\n        break;\r\n\r\n      case \"above-right\":\r\n\r\n        tipClass += \" yeti-tooltip-above-right\";\r\n        break;\r\n\r\n    }\r\n\r\n    return ([\r\n      <div class={wrapperClass}>\r\n\r\n        <div \r\n          class=\"yeti-tooltip-trigger\" \r\n          onClick={(e) => this.handleTriggerClick(e)}\r\n          onKeyPress={(e) => this.handleTriggerKeyPress(e)}\r\n          {...((this.clickToOpen) ? { \"tabindex\": 0 } : {})}  \r\n        >\r\n\r\n          <slot />\r\n\r\n        </div>\r\n\r\n\r\n        <div class={tipClass}>\r\n\r\n          <div class=\"yeti-tooltip-content\" id={this.tipId}>{this.renderContent()}</div>\r\n\r\n          {\r\n            (this.clickToOpen && this.isClickedOpen) ?\r\n\r\n              <button class=\"yeti-tooltip-close\" onClick={(e) => { this.handleCloseTooltipClick(e); }}>\r\n                <yeti-icon iconCode=\"close\" iconClass='yeti-color-white yeti-typo-size-5'></yeti-icon>\r\n              </button>\r\n\r\n            :\r\n              null\r\n          }\r\n          \r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    let slot = this.el.querySelector(\".yeti-tooltip-trigger\").firstElementChild;\r\n    let trigger = this.el.querySelector(\".yeti-tooltip-trigger\") as HTMLElement;\r\n    //slot.setAttribute(\"tabindex\", \"0\");\r\n    slot.setAttribute(\"aria-describedby\",this.tipId);\r\n\r\n    if (this.justClickedClosed && trigger) {\r\n      // The user just clicked the tooltip closed. Restore focus to the trigger.\r\n      this.justClickedClosed = false;\r\n      trigger.focus();\r\n    }\r\n\r\n  }\r\n\r\n}\r\n"],"mappings":"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","ignoreList":[]}