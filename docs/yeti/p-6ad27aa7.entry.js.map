{"version":3,"names":["YetiLoading","constructor","hostRef","this","isInline","isModal","isActive","previouslyFocusedElement","shouldStealFocus","shouldReturnFocus","slottedContent","handleFocus","newValue","setBackgroundElementStyles","modalIsActivating","document","body","classList","add","remove","focusTrap","e","preventDefault","componentWillLoad","componentId","el","getAttribute","utils","generateUniqueId","setAttribute","innerHTML","trim","render","modalOverlayCSS","baseLoading","h","key","class","tabindex","viewBox","cx","cy","r","inlineLoading","componentDidRender","loadingDiv","getElementsByClassName","activeElement","focus"],"sources":["src/components/yeti-loading/yeti-loading.tsx"],"sourcesContent":["import { Component, Prop, h, Element, Watch, Listen } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-loading',\r\n  shadow: false,\r\n})\r\nexport class YetiLoading {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * Whether to display the Loading pattern inline or default mode.\r\n   */\r\n  @Prop() isInline: boolean = false;\r\n\r\n  /**\r\n   * Whether to display the Loading pattern as a modal (covering its parent container) or as an inline-block object.\r\n   */\r\n  @Prop() isModal: boolean = false;\r\n\r\n  /**\r\n   * Tracks whether the Loader is displaying or not.\r\n   */\r\n  @Prop() isActive: boolean = false;\r\n  @Watch('isActive')\r\n  handleFocus(newValue: boolean) {\r\n    // When the Loading becomes active it should take focus away from whatever had it before, but\r\n    // we want to keep track of what that was so we can return focus if Loading becomes inactive.\r\n\r\n    // Becoming active, take focus\r\n    if (newValue) {\r\n      this.shouldStealFocus = true;\r\n      this.setBackgroundElementStyles(true);\r\n    }\r\n\r\n    // Becoming inactive, return focus\r\n    else {\r\n      this.shouldReturnFocus = true;\r\n      this.setBackgroundElementStyles(false);\r\n    }\r\n  }\r\n\r\n\r\n  previouslyFocusedElement: HTMLElement = null; // So we can return focus to wherever the user was when the Loading component appeared.\r\n  shouldStealFocus = false;\r\n  shouldReturnFocus = false;\r\n  slottedContent = null;\r\n\r\n\r\n  setBackgroundElementStyles(modalIsActivating: boolean) {\r\n    if (modalIsActivating) {\r\n        document.body.classList.add(\"yeti-modal-has_active_modal\");\r\n    } else {\r\n        document.body.classList.remove(\"yeti-modal-has_active_modal\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  @Listen('keydown')\r\n  focusTrap(e) {\r\n    if (this.isActive) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n    \r\n    // Check to see if there's slotted content\r\n    let innerHTML = this.el.innerHTML.trim();\r\n\r\n    if (innerHTML != \"\" && innerHTML != \"<!---->\") {\r\n      this.slottedContent = innerHTML;\r\n    } else {\r\n      this.slottedContent = null;\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let modalOverlayCSS = \"yeti-modal-overlay yeti-modal-overlay-light\";\r\n\r\n    let baseLoading =\r\n\r\n      <div class=\"yeti-loading\" tabindex=\"-1\">\r\n\r\n        <div class=\"yeti-loading-icon\">\r\n            <svg class=\"yeti-loading-icon-svg\" viewBox=\"0 0 100 100\" aria-hidden=\"true\">\r\n                <circle class=\"yeti-loading-icon-svg-circle\" cx=\"50%\" cy=\"50%\" r=\"44\"></circle>\r\n            </svg>\r\n        </div>\r\n\r\n        <div class=\"yeti-loading-label\">Loading...</div>\r\n\r\n        {(this.slottedContent == null && this.slottedContent != \"<!---->\") ?\r\n          \r\n          \"\"\r\n\r\n        :\r\n        \r\n          <div class=\"yeti-loading-content\">\r\n            \r\n            <slot />\r\n          \r\n          </div>\r\n        }\r\n\r\n      </div>\r\n\r\n\r\n    let inlineLoading = \r\n    \r\n      <div class=\"yeti-loading_inline\">\r\n          \r\n        <div class=\"yeti-loading_inline-icon\">\r\n            <svg class=\"yeti-loading_inline-icon-svg\" viewBox=\"0 0 100 100\">\r\n                <circle class=\"yeti-loading_inline-icon-svg-background\" cx=\"50%\" cy=\"50%\" r=\"44\"></circle>\r\n                <circle class=\"yeti-loading_inline-icon-svg-stroke\" cx=\"50%\" cy=\"50%\" r=\"44\"></circle>\r\n            </svg>\r\n        </div>\r\n\r\n        <div class=\"yeti-loading_inline-label\">Loading...</div>\r\n      \r\n      </div>;\r\n\r\n\r\n    modalOverlayCSS += (this.isActive) ? \"\" : \" yeti-modal-overlay__inert\";\r\n\r\n    return (\r\n      (this.isModal) ?\r\n\r\n        <div class={modalOverlayCSS}>\r\n          <div class=\"yeti-modal yeti-modal-size-xs\">\r\n              {baseLoading}\r\n          </div>\r\n        </div>\r\n\r\n      :\r\n\r\n        (this.isInline) ? inlineLoading : baseLoading\r\n\r\n    );\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    // Handle focus management. We can't do this when the property changes because the inactive state uses display: none,\r\n    // which interferes with the ability to accept focus depending on some race conditions.\r\n\r\n    if (this.shouldStealFocus) {\r\n      // Becoming active, take focus\r\n      let loadingDiv = this.el.getElementsByClassName(\"yeti-loading\")[0] as HTMLElement;\r\n      this.previouslyFocusedElement = document.activeElement as HTMLElement;\r\n      loadingDiv.focus();\r\n    }\r\n\r\n    if (this.shouldReturnFocus) {\r\n      // Becoming inactive, return focus\r\n      if (this.previouslyFocusedElement) {\r\n        this.previouslyFocusedElement.focus();\r\n      }\r\n    }\r\n\r\n    this.shouldStealFocus = false;\r\n    this.shouldReturnFocus = false;\r\n  }\r\n\r\n}\r\n"],"mappings":"4FAOaA,EAAW,MAJxB,WAAAC,CAAAC,G,UAWUC,KAAQC,SAAY,MAKpBD,KAAOE,QAAY,MAKnBF,KAAQG,SAAY,MAoB5BH,KAAAI,yBAAwC,KACxCJ,KAAgBK,iBAAG,MACnBL,KAAiBM,kBAAG,MACpBN,KAAcO,eAAG,IAqIlB,CA1JC,WAAAC,CAAYC,GAKV,GAAIA,EAAU,CACZT,KAAKK,iBAAmB,KACxBL,KAAKU,2BAA2B,K,KAI7B,CACHV,KAAKM,kBAAoB,KACzBN,KAAKU,2BAA2B,M,EAWpC,0BAAAA,CAA2BC,GACzB,GAAIA,EAAmB,CACnBC,SAASC,KAAKC,UAAUC,IAAI,8B,KACzB,CACHH,SAASC,KAAKC,UAAUE,OAAO,8B,EAOrC,SAAAC,CAAUC,GACR,GAAIlB,KAAKG,SAAU,CACjBe,EAAEC,gB,EAKN,iBAAAC,GAEE,IAAIC,EAAcrB,KAAKsB,GAAGC,aAAa,MAEvC,IAAKF,GAAeA,GAAe,GAAI,CACrCA,EAAcG,EAAMC,mBACpBzB,KAAKsB,GAAGI,aAAa,KAAML,E,CAI7B,IAAIM,EAAY3B,KAAKsB,GAAGK,UAAUC,OAElC,GAAID,GAAa,IAAMA,GAAa,gBAAW,CAC7C3B,KAAKO,eAAiBoB,C,KACjB,CACL3B,KAAKO,eAAiB,I,EAO1B,MAAAsB,GAEE,IAAIC,EAAkB,8CAEtB,IAAIC,EAEFC,EAAK,OAAAC,IAAA,2CAAAC,MAAM,eAAeC,SAAS,MAEjCH,EAAK,OAAAC,IAAA,2CAAAC,MAAM,qBACPF,EAAK,OAAAC,IAAA,2CAAAC,MAAM,wBAAwBE,QAAQ,cAAa,cAAa,QACjEJ,EAAA,UAAAC,IAAA,2CAAQC,MAAM,+BAA+BG,GAAG,MAAMC,GAAG,MAAMC,EAAE,SAIzEP,EAAK,OAAAC,IAAA,2CAAAC,MAAM,sBAAqC,cAE9ClC,KAAKO,gBAAkB,MAAQP,KAAKO,gBAAkB,gBAEtD,GAIAyB,EAAK,OAAAE,MAAM,wBAETF,EAAQ,eAQhB,IAAIQ,EAEFR,EAAK,OAAAC,IAAA,2CAAAC,MAAM,uBAETF,EAAK,OAAAC,IAAA,2CAAAC,MAAM,4BACPF,EAAA,OAAAC,IAAA,2CAAKC,MAAM,+BAA+BE,QAAQ,eAC9CJ,EAAA,UAAAC,IAAA,2CAAQC,MAAM,0CAA0CG,GAAG,MAAMC,GAAG,MAAMC,EAAE,OAC5EP,EAAA,UAAAC,IAAA,2CAAQC,MAAM,sCAAsCG,GAAG,MAAMC,GAAG,MAAMC,EAAE,SAIhFP,EAAA,OAAAC,IAAA,2CAAKC,MAAM,6BAA2B,eAK1CJ,GAAoB9B,KAAa,SAAI,GAAK,6BAE1C,OACGA,KAAY,QAEXgC,EAAK,OAAAE,MAAOJ,GACVE,EAAA,OAAKE,MAAM,iCACNH,IAMN/B,KAAa,SAAIwC,EAAgBT,C,CAOxC,kBAAAU,GAIE,GAAIzC,KAAKK,iBAAkB,CAEzB,IAAIqC,EAAa1C,KAAKsB,GAAGqB,uBAAuB,gBAAgB,GAChE3C,KAAKI,yBAA2BQ,SAASgC,cACzCF,EAAWG,O,CAGb,GAAI7C,KAAKM,kBAAmB,CAE1B,GAAIN,KAAKI,yBAA0B,CACjCJ,KAAKI,yBAAyByC,O,EAIlC7C,KAAKK,iBAAmB,MACxBL,KAAKM,kBAAoB,K","ignoreList":[]}