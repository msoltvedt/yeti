{"version":3,"names":["YetiIcon","utils","generateUniqueId","componentDidRender","this","focusable","el","setAttribute","render","iconCSS","styleModifier","iconStyle","h","Object","assign","class","alt","iconCode","YetiTooltip","handleSlotHover","handleSlotFocus","scrollTooltipIntoView","handleDeFocusingClick","isClickedOpen","handleClick","e","stopImmediatePropagation","handleTriggerClick","clickToOpen","preventDefault","handleCloseTooltipClick","actual","querySelector","scrollIntoView","behavior","block","componentWillLoad","componentId","getAttribute","tipId","slotId","wrapperCSS","tipClass","position","onClick","id","text","slot","firstElementChild"],"sources":["src/components/yeti-icon/yeti-icon.tsx","src/components/yeti-tooltip/yeti-tooltip.tsx"],"sourcesContent":["import { Component, Prop, h, State, Element } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-icon',\r\n  shadow: false,\r\n})\r\nexport class YetiIcon {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * The type of icon. Corresponds to the analogous \"code\" Google uses (i.e. check_circle).\r\n   */\r\n  @Prop({ attribute: 'type'}) iconCode: string = 'check_circle';\r\n\r\n  /**\r\n   * The type of icon. Corresponds to the analogous \"code\" Google uses (i.e. check_circle).\r\n   */\r\n  @Prop() iconStyle: string = '';\r\n\r\n  /**\r\n   * CSS classlist applied to the actual element producing the icon.\r\n   */\r\n  @Prop({ attribute: 'icon-css'}) iconCSS?: string = '';\r\n\r\n  /**\r\n   * id of the actual element producing the icon. Set to a unique id if one is not provided.\r\n   */\r\n  @Prop() iconId?: string = utils.generateUniqueId();\r\n\r\n  /**\r\n   * Optional replacement text to use as a more clear description of the icon for screen-reader users. Otherwise AT will announce the Google \"code\" (i.e. check_circle).\r\n   */\r\n  @Prop() alt?: string = \"\";\r\n\r\n  /**\r\n   * Whether the icon can gain focus (used primarily for tooltip anchors).\r\n   */\r\n  @Prop() focusable?: boolean = false;\r\n\r\n  /**\r\n   * Used to toggle a re-render of the icon.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    if (this.focusable) {\r\n        this.el.setAttribute(\"tabindex\", \"0\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n\r\n    let iconCSS = 'material-icons';\r\n    let styleModifier = '';\r\n\r\n    switch (this.iconStyle) {\r\n      \r\n      case 'outlined':\r\n        styleModifier = '-outlined';\r\n\r\n      case '':\r\n      default: {\r\n        break;\r\n      }\r\n    }\r\n\r\n    iconCSS += styleModifier;\r\n\r\n    iconCSS += (this.iconCSS != '') ? ` ${this.iconCSS}` : '';\r\n\r\n    return (\r\n\r\n        // <span class=\"yeti-icon-wrapper\" {...((this.focusable) ? {\"tabindex\": 0} : {})}>\r\n        [\r\n            \r\n            <span class={iconCSS} {...((this.alt != \"\") ? {\"aria-hidden\": true} : {})}>{this.iconCode}</span>,\r\n            \r\n            (this.alt != \"\") ? <span class=\"yeti-a11y-hidden\">{this.alt}</span> : \"\"\r\n          \r\n        ]\r\n        //</span>\r\n\r\n    );\r\n  }\r\n\r\n}","import { Component, Prop, h, State, Element, Listen } from '@stencil/core';\r\nimport { utils } from '../../utils/utils';\r\n\r\n@Component({\r\n  tag: 'yeti-tooltip',\r\n  shadow: false,\r\n})\r\nexport class YetiTooltip {\r\n\r\n  @Element() el: HTMLElement;\r\n\r\n  /**\r\n   * CSS classlist to add to the element serving as the component's wrapper.\r\n   */\r\n  @Prop({ attribute: 'wrapper-class'}) wrapperCSS: string = '';\r\n\r\n  /**\r\n   * CSS classlist to add to the actual tooltip element.\r\n   */\r\n  @Prop({ attribute: 'tooltip-class'}) tooltipCSS: string = '';\r\n\r\n  /**\r\n   * Text value to display as the tooltip's contents.\r\n   */\r\n  @Prop() text: string = \"I'm a helpful tooltip.\";\r\n\r\n  /**\r\n   * Token list to describe the tooltip's position relative to its anchor: left | right and/or above | below.\r\n   */\r\n  @Prop() position: string = \"above\";\r\n\r\n  /**\r\n   * Token list to describe the tooltip's position relative to its anchor: left | right and/or above | below.\r\n   */\r\n  @Prop() clickToOpen: boolean = false;\r\n\r\n  /**\r\n   * id of the component's slot element.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) slotId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * id of the component's actual element corresponding to the tooltip. Will be auto-populated with a unique value if not provided.\r\n   */\r\n  @Prop({\r\n    mutable: true,\r\n    reflect: true\r\n  }) tipId: string = \"\"; // Set on load\r\n\r\n  /**\r\n   * Whether the anchor should be forced to be a CSS display block style or left as is.\r\n   */\r\n  @Prop() blockAnchor: boolean = false;\r\n\r\n  /**\r\n   * Toggle to force a re-render of the whole component.\r\n   */\r\n  @State() iLoveJSX: boolean = false;\r\n\r\n  /**\r\n   * Whether the tooltip has been clicked open or not.\r\n   */\r\n  @State() isClickedOpen: boolean = false;\r\n\r\n\r\n\r\n  @Listen('mouseover')\r\n  handleSlotHover() {\r\n    //this.scrollTooltipIntoView();\r\n  }\r\n\r\n\r\n\r\n  @Listen('focusin')\r\n  handleSlotFocus() {\r\n    this.scrollTooltipIntoView();\r\n  }\r\n\r\n\r\n\r\n  @Listen('click', {\r\n    target: 'body'\r\n  })\r\n  handleDeFocusingClick() {\r\n    this.isClickedOpen = false;\r\n  }\r\n\r\n\r\n\r\n  @Listen('click')\r\n  handleClick(e) {\r\n    e.stopImmediatePropagation(); // Intercept the click event before it gets to the body-level handler\r\n  }\r\n\r\n  \r\n\r\n  handleTriggerClick(e) {\r\n    if (this.clickToOpen) {\r\n      this.isClickedOpen = !this.isClickedOpen;\r\n      e.stopImmediatePropagation();\r\n      e.preventDefault();\r\n      this.scrollTooltipIntoView();\r\n      return false;\r\n    }\r\n  }\r\n\r\n\r\n\r\n  handleCloseTooltipClick(e) {\r\n    this.isClickedOpen = false;\r\n    e.stopImmediatePropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n\r\n\r\n  scrollTooltipIntoView() {\r\n    let actual = this.el.querySelector(\".yeti-tooltip\");\r\n    actual.scrollIntoView({\r\n      behavior: \"smooth\",\r\n      block: \"nearest\"\r\n    });\r\n  }\r\n\r\n\r\n\r\n  componentWillLoad() {\r\n    // Set up ids\r\n    let componentId = this.el.getAttribute(\"id\");\r\n\r\n    if (!componentId || componentId == \"\") {\r\n      componentId = utils.generateUniqueId();\r\n      this.el.setAttribute(\"id\", componentId);\r\n    }\r\n\r\n    this.tipId = (this.tipId != \"\") ? this.tipId : `${componentId}_tip`;\r\n    this.slotId = (this.slotId != \"\") ? this.slotId : `${componentId}_slot`;\r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    let wrapperCSS = 'yeti-tooltip-wrapper';\r\n    let tipClass = 'yeti-tooltip';\r\n\r\n    tipClass += (this.isClickedOpen) ? ' yeti-tooltip__clicked_open' : '';\r\n\r\n    wrapperCSS += (this.clickToOpen) ? ' yeti-tooltip-wrapper-is_click_to_open' : '';\r\n    wrapperCSS += (this.blockAnchor) ? ' yeti-tooltip-wrapper-has_block_anchor' : '';\r\n\r\n    switch (this.position) {\r\n\r\n      case \"right\":\r\n\r\n        tipClass += \" yeti-tooltip-right\";\r\n        break;\r\n\r\n      case \"below\":\r\n\r\n        tipClass += \" yeti-tooltip-below\";\r\n        break;\r\n\r\n      case \"left\":\r\n\r\n        tipClass += \" yeti-tooltip-left\";\r\n        break;\r\n\r\n    }\r\n\r\n    return ([\r\n      <div class={wrapperCSS}>\r\n\r\n      <div class=\"yeti-tooltip-trigger\" onClick={(e) => this.handleTriggerClick(e)}>\r\n\r\n        <slot />\r\n\r\n      </div>\r\n\r\n        <div class={tipClass}>\r\n\r\n          <div class=\"yeti-tooltip-content\" id={this.tipId}>{this.text}</div>\r\n\r\n          {\r\n            (this.clickToOpen) ?\r\n\r\n              <button class=\"yeti-tooltip-close\" onClick={(e) => { this.handleCloseTooltipClick(e); }}>\r\n                <yeti-icon iconCode=\"close\" iconCSS='yeti-color-white yeti-typo-size-5'></yeti-icon>\r\n              </button>\r\n\r\n            :\r\n              null\r\n          }\r\n          \r\n        </div>\r\n\r\n      </div>\r\n    ]);\r\n  }\r\n\r\n\r\n\r\n  componentDidRender() {\r\n    let slot = this.el.querySelector(\".yeti-tooltip-trigger\").firstElementChild;\r\n    slot.setAttribute(\"tabindex\", \"0\");\r\n    slot.setAttribute(\"aria-describedby\",this.tipId);\r\n  }\r\n\r\n}\r\n"],"mappings":"4FAOaA,EAAQ,M,uCAO4B,e,eAKnB,G,aAKuB,G,YAKzBC,EAAMC,mB,SAKT,G,eAKO,M,cAKD,K,CAI7B,kBAAAC,GACE,GAAIC,KAAKC,UAAW,CAChBD,KAAKE,GAAGC,aAAa,WAAY,I,EAMvC,MAAAC,GAEE,IAAIC,EAAU,iBACd,IAAIC,EAAgB,GAEpB,OAAQN,KAAKO,WAEX,IAAK,WACHD,EAAgB,YAQpBD,GAAWC,EAEXD,GAAYL,KAAKK,SAAW,GAAM,IAAIL,KAAKK,UAAY,GAEvD,OAKQG,EAAA,OAAAC,OAAAC,OAAA,CAAMC,MAAON,GAAeL,KAAKY,KAAO,GAAM,CAAC,cAAe,MAAQ,IAAMZ,KAAKa,UAEhFb,KAAKY,KAAO,GAAMJ,EAAA,QAAMG,MAAM,oBAAoBX,KAAKY,KAAc,G,iCC5ErEE,EAAW,M,yCAOoC,G,gBAKA,G,UAKnC,yB,cAKI,Q,iBAKI,M,YAQX,G,WAQD,G,iBAKY,M,cAKF,M,mBAKK,K,CAKlC,eAAAC,G,CAOA,eAAAC,GACEhB,KAAKiB,uB,CAQP,qBAAAC,GACElB,KAAKmB,cAAgB,K,CAMvB,WAAAC,CAAYC,GACVA,EAAEC,0B,CAKJ,kBAAAC,CAAmBF,GACjB,GAAIrB,KAAKwB,YAAa,CACpBxB,KAAKmB,eAAiBnB,KAAKmB,cAC3BE,EAAEC,2BACFD,EAAEI,iBACFzB,KAAKiB,wBACL,OAAO,K,EAMX,uBAAAS,CAAwBL,GACtBrB,KAAKmB,cAAgB,MACrBE,EAAEC,2BACFD,EAAEI,gB,CAKJ,qBAAAR,GACE,IAAIU,EAAS3B,KAAKE,GAAG0B,cAAc,iBACnCD,EAAOE,eAAe,CACpBC,SAAU,SACVC,MAAO,W,CAMX,iBAAAC,GAEE,IAAIC,EAAcjC,KAAKE,GAAGgC,aAAa,MAEvC,IAAKD,GAAeA,GAAe,GAAI,CACrCA,EAAcpC,EAAMC,mBACpBE,KAAKE,GAAGC,aAAa,KAAM8B,E,CAG7BjC,KAAKmC,MAASnC,KAAKmC,OAAS,GAAMnC,KAAKmC,MAAQ,GAAGF,QAClDjC,KAAKoC,OAAUpC,KAAKoC,QAAU,GAAMpC,KAAKoC,OAAS,GAAGH,Q,CAIvD,MAAA7B,GAEE,IAAIiC,EAAa,uBACjB,IAAIC,EAAW,eAEfA,GAAatC,KAAkB,cAAI,8BAAgC,GAEnEqC,GAAerC,KAAgB,YAAI,yCAA2C,GAC9EqC,GAAerC,KAAgB,YAAI,yCAA2C,GAE9E,OAAQA,KAAKuC,UAEX,IAAK,QAEHD,GAAY,sBACZ,MAEF,IAAK,QAEHA,GAAY,sBACZ,MAEF,IAAK,OAEHA,GAAY,qBACZ,MAIJ,OACE9B,EAAA,OAAKG,MAAO0B,GAEZ7B,EAAA,OAAKG,MAAM,uBAAuB6B,QAAUnB,GAAMrB,KAAKuB,mBAAmBF,IAExEb,EAAA,cAIAA,EAAA,OAAKG,MAAO2B,GAEV9B,EAAA,OAAKG,MAAM,uBAAuB8B,GAAIzC,KAAKmC,OAAQnC,KAAK0C,MAGrD1C,KAAgB,YAEfQ,EAAA,UAAQG,MAAM,qBAAqB6B,QAAUnB,IAAQrB,KAAK0B,wBAAwBL,EAAE,GAClFb,EAAA,aAAWK,SAAS,QAAQR,QAAQ,uCAItC,O,CAWZ,kBAAAN,GACE,IAAI4C,EAAO3C,KAAKE,GAAG0B,cAAc,yBAAyBgB,kBAC1DD,EAAKxC,aAAa,WAAY,KAC9BwC,EAAKxC,aAAa,mBAAmBH,KAAKmC,M"}